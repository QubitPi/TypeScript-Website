{"version":3,"file":"component---src-templates-tsconfig-reference-tsx-c6ba2c24f25e37564212.js","mappings":"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","sources":["webpack://typescriptlang-org/./src/templates/tsconfigReference.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\ntype Category = { anchor: string, display: string, options: Array<{ anchor: string, name: string }> }\n\ntype Props = {\n  pageContext: {\n    categories: Category[],\n    tsconfigMDPath: string,\n    intro: {\n      html: string\n      header: string\n      preview: string\n    },\n    locale: string\n  },\n  data: GatsbyTypes.TSConfigReferenceTemplateQuery,\n  path: string\n}\n\nconst TSConfigReferenceTemplateComponent = (props: Props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    const calculateOffset = (\n      target: HTMLElement,\n      subnav: HTMLElement | null\n    ) => {\n      let offset = target.offsetTop\n      if (subnav) {\n        // Subtract height of subnav if \"position: sticky\" is active\n        const style = window.getComputedStyle(subnav)\n        if (style.position === \"sticky\") {\n          offset -= subnav.clientHeight\n        }\n      }\n      return offset\n    }\n\n    const scrollToHash = (hash: string) => {\n      if (hash === \"#\") return\n      const target = document.querySelector<HTMLElement>(hash)\n      if (!target) return\n\n      // Search for subnav if the target is a descendant of <article>\n      let search = target\n      let subnav: HTMLElement | null = null\n      while (search.parentElement) {\n        search = search.parentElement\n        if (search.tagName === \"ARTICLE\") {\n          subnav = search.querySelector(\"nav\")\n          break\n        }\n      }\n\n      // Smooth scroll to the target\n      const offset = calculateOffset(target, subnav)\n      if (!offset) return\n      window.scrollTo({\n        top: offset,\n        behavior: \"smooth\",\n      })\n    }\n\n    // Overrides the anchor behavior to smooth scroll instead\n    const hashLinks = document.querySelectorAll<HTMLAnchorElement>(\n      \".tsconfig a[href^='#']\"\n    )\n    hashLinks.forEach(link => {\n      link.addEventListener(\"click\", (event: MouseEvent) => {\n        event.preventDefault()\n        scrollToHash(link.hash)\n\n        // Update URL without triggering default scroll behavior\n        window.history.pushState(null, \"\", link.hash)\n      })\n    })\n\n    // Sets the current selection\n    // Based on https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavs = document.querySelectorAll<HTMLElement>(\n      \".tsconfig article nav\"\n    )\n    const updateSidebar = () => {\n      const fromTop = window.scrollY\n\n      subnavs.forEach(subnav => {\n        const subnavLinks = subnav.querySelectorAll<HTMLAnchorElement>(\n          \"a[href^='#']\"\n        )\n        let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n        // Scroll down to find the highest anchor on the screen\n        subnavLinks.forEach(link => {\n          const section = document.querySelector<HTMLElement>(link.hash)\n          if (!section) return\n          const offset = calculateOffset(section, subnav)\n          const isBelow = offset - 100 <= fromTop\n          if (isBelow) currentPossibleAnchor = link\n        })\n\n        // Then set the active tag\n        subnavLinks.forEach(link => {\n          if (link === currentPossibleAnchor) {\n            link.classList.add(\"current\")\n          } else {\n            link.classList.remove(\"current\")\n          }\n        })\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n  const joiner = (options: any[], opt: any) => {\n    const index = options.indexOf(opt)\n    if (index === options.length - 1) return null\n    return (index === options.length - 2) ? (<span> and </span>) : <span>, </span>\n  }\n\n  const anchor = (sectionName: string | undefined, anchor: string) => {\n    const prefixes = {\n      \"watchOptions\": \"watch\",\n      \"typeAcquisition\": \"type\"\n    }\n    if (!sectionName || !prefixes[sectionName]) return \"#\" + anchor\n    return `#${prefixes[sectionName]}-${anchor}`\n  }\n\n  const showCategories = (categories: Category[], sectionName?: string) => {\n    return <div className={sectionName ? \"tsconfig-quick-nav grouped\" : \"tsconfig-quick-nav\"}>\n      {sectionName ? <h4><code><a href={`#${sectionName}`}>\"{sectionName}\"</a></code></h4> : <div />}\n      {\n        categories.map(c => <div className=\"tsconfig-quick-nav-category\" key={c.display}>\n          <h5 id={`quick-nav-${c.anchor}`}>{c.display}</h5>\n          <ol aria-labelledby={`quick-nav-${c.anchor}`}>\n            {c.options.map(o => <li key={o.name}><code><a href={anchor(sectionName, o.anchor)}>{o.anchor}</a>{joiner(c.options, o)}</code></li>)}\n          </ol>\n        </div>)\n      }\n    </div >\n  }\n  const categories = props.pageContext.categories\n\n  const root = categories.filter(c => c.anchor === \"Top Level\")\n  const watch = categories.filter(c => c.anchor === \"watchOptions\")\n  const typeAcq = categories.filter(c => c.anchor === \"typeAcquisition\")\n  const skip = [\"Top Level\", \"watchOptions\", \"typeAcquisition\"]\n  const compilerOpts = categories.filter(c => !skip.includes(c.anchor))\n\n  const [openInfo, setOpenInfo] = useState(false)\n  const toggleInfoState = () => setOpenInfo(!openInfo)\n\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n\n      <div className={`tsconfig raised main-content-block markdown button ${openInfo ? \"open\" : \"closed\"}`} >\n        <a href=\"#\" onClick={toggleInfoState} aria-expanded={openInfo} role=\"button\">\n          <h2>\n            <svg width=\"22\" height=\"13\" viewBox=\"0 0 22 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M0.5 1L11 11.5L21.5 1\" stroke=\"black\" />\n            </svg>\n            {props.pageContext.intro.header}</h2>\n          {!openInfo && <div className=\"preview\">{props.pageContext.intro.preview}</div>}\n        </a>\n\n        {openInfo && <div className=\"content\">  <div dangerouslySetInnerHTML={{ __html: props.pageContext.intro.html }} /></div>}\n      </div>\n\n      <div className=\"tsconfig main-content-block\">\n        <h2>Compiler Options</h2>\n        {showCategories(root)}\n        {showCategories(compilerOpts, \"compilerOptions\")}\n        {showCategories(watch, \"watchOptions\")}\n        {showCategories(typeAcq, \"typeAcquisition\")}\n      </div>\n\n\n      <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n\n    </Layout >\n  )\n}\n\n\nexport const pageQuery = graphql`\nquery TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n  markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n    id\n    html\n    frontmatter {\n      permalink\n    }\n  }\n}\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n"],"names":["TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","React","useEffect","calculateOffset","target","subnav","offset","offsetTop","window","getComputedStyle","position","clientHeight","document","querySelectorAll","forEach","link","addEventListener","event","preventDefault","hash","querySelector","search","parentElement","tagName","scrollTo","top","behavior","scrollToHash","history","pushState","subnavs","updateSidebar","fromTop","scrollY","subnavLinks","currentPossibleAnchor","section","classList","add","remove","passive","capture","removeEventListener","anchor","sectionName","prefixes","showCategories","categories","className","href","map","c","key","display","id","options","o","name","joiner","opt","index","indexOf","length","pageContext","root","filter","watch","typeAcq","skip","compilerOpts","includes","openInfo","setOpenInfo","useState","Layout","title","description","lang","locale","onClick","toggleInfoState","role","width","height","viewBox","fill","xmlns","d","stroke","intro","header","preview","dangerouslySetInnerHTML","__html","html","Intl"],"sourceRoot":""}
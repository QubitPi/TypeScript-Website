{"version":3,"file":"component---src-templates-pages-download-tsx-bf639f65c489e2b445d1.js","mappings":"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","sources":["webpack://typescriptlang-org/./src/components/QuickJump.tsx","webpack://typescriptlang-org/./src/templates/pages/download.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\";\nimport { docCopy } from \"../copy/en/documentation\";\nimport { createIntlLink } from \"./IntlLink\";\n\n// Automatic metadata from npm and VS Marketplace\nimport releaseInfo from \"../lib/release-info.json\";\nimport { withPrefix } from \"gatsby\";\n\nexport type Props = {\n  title: string;\n  lang: string;\n};\nexport const QuickJump = (props: Props) => {\n  const intl = useIntl();\n  const i = createInternational<typeof docCopy>(intl);\n  i;\n\n  const releaseURL = withPrefix(releaseInfo.releaseNotesURL);\n  let betaURL: string | undefined = undefined;\n  if (releaseInfo.isBeta) betaURL = releaseInfo.betaPostURL;\n  if (releaseInfo.isRC) betaURL = releaseInfo.rcPostURL;\n\n  const IntlLink = createIntlLink(props.lang);\n\n  // TODO: Internationalize these strings\n  return <div className=\"main-content-block\">\n    <h2 style={{ textAlign: \"center\" }}>{props.title}</h2>\n    <div className=\"columns\">\n      <div className=\"item raised\">\n        <h4>Get Started</h4>\n        <ul>\n          <li>\n            <IntlLink to=\"/docs/handbook/typescript-in-5-minutes.html\">\n              JS to TS\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/typescript-from-scratch.html\">\n              New to Programming\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/typescript-in-5-minutes-oop.html\">\n              OOP to JS\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/typescript-in-5-minutes-func.html\">\n              Functional to JS\n            </IntlLink>\n          </li>\n          <li><IntlLink to=\"/download\">Installation</IntlLink></li>\n        </ul>\n      </div>\n\n      <div className=\"item raised\">\n        <h4>Handbook</h4>\n        <ul>\n          <li>\n            <IntlLink to=\"/docs/handbook/2/everyday-types.html\">\n              Everyday Types\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/2/types-from-types.html\">\n              Creating Types from Types\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/2/objects.html\">\n              Object Types\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/variable-declarations.html\">\n              Variable Declarations\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/2/functions.html\">More on Functions</IntlLink>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"item raised\">\n        <h4>Tools</h4>\n        <ul>\n          <li><IntlLink to=\"/play/\">Playground</IntlLink></li>\n          <li><IntlLink to=\"/tsconfig/\">TSConfig Reference</IntlLink></li>\n        </ul>\n        <h4 style={{ marginTop: \"28px\" }}>Release Notes</h4>\n        <ul>\n          {betaURL\n            ? <li>\n              <a href={betaURL}>\n                What's upcoming in {releaseInfo.tags.betaMajMin}?\n              </a>\n            </li>\n            : null}\n          <li>\n            <IntlLink to={releaseURL}>\n              What's new in {releaseInfo.tags.stableMajMin}\n            </IntlLink>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"item raised\">\n        <h4>Tutorials</h4>\n        <ul>\n          <li>\n            <IntlLink to=\"/docs/handbook/asp-net-core.html\">ASP.NET</IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/migrating-from-javascript.html\">\n              Migrating from JS\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/dom-manipulation.html\">\n              Working with the DOM\n            </IntlLink>\n          </li>\n          <li>\n            <IntlLink to=\"/docs/handbook/react-&-webpack.html\">\n              React &amp; Webpack\n            </IntlLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>;\n};\n","import * as React from \"react\"\nimport { Intl } from \"../../components/Intl\"\nimport { createIntlLink } from \"../../components/IntlLink\"\nimport { Layout } from \"../../components/layout\"\nimport { QuickJump } from \"../../components/QuickJump\"\nimport releaseInfo from \"../../lib/release-info.json\"\n\n\ntype Props = {\n  pageContext: any\n  b: NewableFunction\n}\n\nconst changeExample = (code: string) => document.getElementById(\"code-example\")!.textContent = code\nconst changeExample2 = (code: string) => document.getElementById(\"code-run\")!.textContent = code\n\nconst Index: React.FC<Props> = (props) => {\n  const Link = createIntlLink(props.pageContext.lang)\n\n  return <Layout title=\"How to set up TypeScript\" description=\"Add TypeScript to your project, or install TypeScript globally\" lang={props.pageContext.lang}>\n    <div className=\"raised main-content-block\">\n      <h1>Download TypeScript</h1>\n      <p>TypeScript can be installed through three installation routes depending on how you intend to use it: an npm module, a NuGet package or a Visual Studio Extension.</p>\n      <p>If you are using Node.js, you want the npm version. If you are using MSBuild in your project, you want the NuGet package or Visual Studio extension.</p>\n    </div>\n\n    <div className=\"raised main-content-block\">\n      <h2>TypeScript in Your Project</h2>\n      <p>Having TypeScript set up on a per-project basis lets you have many projects with many different versions of TypeScript, this keeps each project working consistently.</p>\n\n      <section style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <div style={{ borderRight: \"1px lightgrey solid\", padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>via npm</h3>\n          <p>TypeScript is available as a <a href=\"https://www.npmjs.com/package/typescript\">package on the npm registry</a> available as <code>\"typescript\"</code>.</p>\n          <p>You will need a copy of <a title=\"Link to the node.js project\" href=\"https://nodejs.org/en/\">Node.js</a> as an environment to run the package. Then you use a dependency manager like <a title=\"Link to the npm package manager\" href='https://www.npmjs.com/'>npm</a>, <a title=\"Link to the yarn package manager\" href='https://yarnpkg.com/'>yarn</a> or <a title=\"Link to the pnpm package manager\" href='https://pnpm.js.org/'>pnpm</a> to download TypeScript into your project.</p>\n          <div>\n            <code id='code-example'>npm install typescript --save-dev</code><br /><br />\n            <button onClick={() => changeExample(\"npm install typescript --save-dev\")}>npm</button> <button onClick={() => changeExample(\"yarn add typescript --dev\")}>yarn</button> <button onClick={() => changeExample(\"pnpm add typescript -D\")}>pnpm</button>\n          </div>\n          <p>All of these dependency managers support lockfiles, ensuring that everyone on your team is using the same version of the language. You can then run the TypeScript compiler using one of the following commands:</p>\n          <div>\n            <code id='code-run'>npx tsc</code><br /><br />\n            <button onClick={() => changeExample2(\"npx tsc\")}>npm</button> <button onClick={() => changeExample2(\"yarn tsc\")}>yarn</button> <button onClick={() => changeExample2(\"pnpm tsc\")}>pnpm</button>\n          </div>\n        </div>\n\n        <div style={{ padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>with Visual Studio</h3>\n          <p>For most project types, you can get TypeScript as a package in Nuget for your MSBuild projects, for example an ASP.NET Core app.</p>\n          <p>When using Nuget, you can <a href=\"https://learn.microsoft.com/visualstudio/javascript/tutorial-aspnet-with-typescript\">install TypeScript through Visual Studio</a> using:</p>\n          <ul>\n            <li>\n              The Manage NuGet Packages window (which you can get to by right-clicking on a project node)\n            </li>\n            <li style={{ marginTop: \"20px\" }}>\n              The Nuget Package Manager Console (found in Tools &gt; NuGet Package Manager &gt; Package Manager Console) and then running:<br /><code style={{ fontSize: \"14px\" }}>Install-Package Microsoft.TypeScript.MSBuild</code>\n            </li>\n          </ul>\n          <p>For project types which don't support Nuget, you can use the <a href={releaseInfo.vs.stable.vs2019_download}> TypeScript Visual Studio extension</a>. You can <a href=\"https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions\">install the extension</a> using <code>Extensions &gt; Manage Extensions</code> in Visual Studio.</p>\n        </div>\n      </section>\n    </div >\n\n    <div className=\"main-content-block\" style={{ textAlign: \"center\" }}>\n      <p>The examples below are for more advanced use cases.</p>\n    </div>\n\n    <div className=\"raised main-content-block\">\n      <h2>Globally Installing TypeScript</h2>\n      <p>It can be handy to have TypeScript available across all projects, often to test one-off ideas. Long-term, codebases should prefer a project-wide installation over a global install so that they can benefit from reproducible builds across different machines.</p>\n\n      <section style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <div style={{ borderRight: \"1px lightgrey solid\", padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>via npm</h3>\n          <p>You can use npm to install TypeScript globally, this means that you can use the <code>tsc</code> command anywhere in your terminal.</p>\n          <p>To do this, run <code>npm install -g typescript</code>. This will install the latest version (currently {releaseInfo.tags.stableMajMin}).</p>\n        </div>\n\n        <div style={{ padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>via Visual Studio Marketplace</h3>\n          <p>You can install TypeScript as a Visual Studio extension, which will allow you to use TypeScript across many MSBuild projects in Visual Studio.</p>\n          <p>The latest version is available <a href={releaseInfo.vs.stable.vs2019_download} title=\"Link to the Visual Studio Marketplace for the TypeScript MSBuild extension\">in the Visual Studio Marketplace</a>.</p>\n        </div>\n      </section>\n    </div>\n\n\n    <div className=\"raised main-content-block\">\n      <h2>Working with TypeScript-compatible transpilers</h2>\n      <p>There are other tools which convert TypeScript files to JavaScript files. You might use these tools for speed or consistency with your existing build tooling.</p>\n      <p>Each of these projects handle the file conversion, but do not handle the type-checking aspects of the TypeScript compiler. So it's likely that you will still need to keep the above TypeScript dependency around, and you will want to enable <Link to=\"/tsconfig#isolatedModules\"><code>isolatedModules</code></Link>.</p>\n\n      <section style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <div style={{ borderRight: \"1px lightgrey solid\", padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>Babel</h3>\n          <p><a href='https://babeljs.io/'>Babel</a> is a very popular JavaScript transpiler which supports TypeScript files via the plugin <a href='https://babeljs.io/docs/en/babel-preset-typescript#docsNav'>@babel/plugin-transform-typescript</a>.</p>\n        </div>\n\n        <div style={{ borderRight: \"1px lightgrey solid\", padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>swc</h3>\n          <p><a href='https://swc-project.github.io/docs/installation/'>swc</a> is a fast transpiler created in Rust which supports many of Babel's features including TypeScript.</p>\n        </div>\n\n        <div style={{ padding: \"1rem\", flex: 1, minWidth: \"240px\" }}>\n          <h3>Sucrase</h3>\n          <p><a href='https://github.com/alangpierce/sucrase#sucrase/'>Sucrase</a> is a Babel fork focused on speed for using in development mode. Sucrase supports TypeScript natively.</p>\n        </div>\n      </section>\n    </div>\n\n    <QuickJump title=\"Next Steps\" lang={props.pageContext.lang} />\n  </Layout>\n}\n\nexport default (props: Props) => <Intl locale={props.pageContext.lang}><Index {...props} /></Intl>\n"],"names":["QuickJump","props","intl","useIntl","releaseURL","createInternational","withPrefix","releaseInfo","betaURL","IntlLink","createIntlLink","lang","React","className","style","textAlign","title","to","marginTop","href","changeExample","code","document","getElementById","textContent","changeExample2","Index","Link","pageContext","Layout","description","display","flexWrap","borderRight","padding","flex","minWidth","id","onClick","fontSize","Intl","locale"],"sourceRoot":""}
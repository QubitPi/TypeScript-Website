{"version":3,"file":"component---src-pages-dev-typescript-vfs-tsx-c0e869d1a2c68bba6b38.js","mappings":"qLAOO,MAAMA,EAAUC,IACrB,MAAMC,EAAYC,GAChBF,EAAMG,QAAUH,EAAMG,OAAOC,gBAAkBF,EAAM,SAAW,GAElE,OAAOG,EAAAA,cAAA,OAAK,aAAW,kBAAkBC,UAAU,wBACjDD,EAAAA,cAAA,MAAIC,UAAU,OACZD,EAAAA,cAAA,MAAIC,UAAU,QAAOD,EAAAA,cAAA,UAAI,oBACzBA,EAAAA,cAAA,MAAIE,MAAO,CAAEC,QAAS,SACpBH,EAAAA,cAAA,KAAGC,UAAWL,EAAS,gBAAiBQ,MAAMC,EAAAA,EAAAA,YAAW,kBAAkB,iBAE7EL,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAGC,UAAWL,EAAS,WAAYQ,MAAMC,EAAAA,EAAAA,YAAW,iBAAiB,YAEvEL,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAGC,UAAWL,EAAS,YAAaQ,MAAMC,EAAAA,EAAAA,YAAW,kBAAkB,aAEzEL,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAGC,UAAWL,EAAS,kBAAmBQ,MAAMC,EAAAA,EAAAA,YAAW,wBAAwB,mBAErFL,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAGC,UAAWL,EAAS,sBAAuBQ,MAAMC,EAAAA,EAAAA,YAAW,4BAA4B,uBAE7FL,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAGC,UAAWL,EAAS,iBAAkBQ,MAAMC,EAAAA,EAAAA,YAAW,uBAAuB,mBAGhF,C,oFCvBT,MAAMC,EAA0BX,GAE5BK,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACO,EAAAA,EAAM,CAACC,MAAM,8BAA8BC,YAAY,2EAA2EC,KAAK,MACtIV,EAAAA,cAAA,OAAKW,GAAG,OACNX,EAAAA,cAACN,EAAAA,EAAM,CAACI,OAAO,mBACfE,EAAAA,cAAA,OAAKC,UAAU,qCACbD,EAAAA,cAAA,OAAKC,UAAU,qBACbD,EAAAA,cAAA,MAAIE,MAAO,CAAEU,UAAW,SAAU,mCAClCZ,EAAAA,cAAA,SAAG,6LAA0LA,EAAAA,cAACa,EAAAA,KAAI,CAACC,GAAG,iBAAgB,YAAe,kBACrOd,EAAAA,cAAA,SAAG,6CACHA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,uEACJA,EAAAA,cAAA,UAAI,yCAAsCA,EAAAA,cAAA,YAAM,QAAa,KAAAA,EAAAA,cAAA,YAAM,UAAa,OAAIA,EAAAA,cAAA,YAAM,UAC1FA,EAAAA,cAAA,UAAI,oFAENA,EAAAA,cAAA,SAAG,6BAA0BA,EAAAA,cAAA,KAAGI,KAAK,oFAAmF,2BAG1HJ,EAAAA,cAAA,OAAKC,UAAU,cAAcC,MAAO,CAAEa,WAAY,iBAAkBC,QAAS,SAC3EhB,EAAAA,cAAA,UAAI,2CACJA,EAAAA,cAAA,OAAKiB,SAAU,GAAGjB,EAAAA,cAAA,QAAMC,UAAU,aAAc,kPAShDD,EAAAA,cAAA,UAAI,qDACJA,EAAAA,cAAA,OAAKiB,SAAU,GAAGjB,EAAAA,cAAA,QAAMC,UAAU,aAAc,8qBA8B9D,UAAgBN,GAAiBK,EAAAA,cAACkB,EAAAA,EAAI,CAACC,OAAO,MAAKnB,EAAAA,cAACM,EAAUX,G","sources":["webpack://typescriptlang-org/./src/components/devNav.tsx","webpack://typescriptlang-org/./src/pages/dev/typescript-vfs.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\ninterface DevNavProps {\n  active?: string\n}\n\nexport const DevNav = (props: DevNavProps) => {\n  const isActive = (str) =>\n    props.active && props.active.toLowerCase() === str ? \"active\" : \"\"\n\n  return <nav aria-label=\"Developer tools\" className=\"navbar-sub dev-tools\">\n    <ul className=\"nav\">\n      <li className=\"name\"><h3>Developer Tools</h3></li>\n      <li style={{ display: \"none\" }}>\n        <a className={isActive(\"compiler api\")} href={withPrefix(\"/dev/compiler\")}>Compiler API</a>\n      </li>\n      <li>\n        <a className={isActive(\"sandbox\")} href={withPrefix(\"/dev/sandbox\")}>Sandbox</a>\n      </li>\n      <li>\n        <a className={isActive(\"twoslash\")} href={withPrefix(\"/dev/twoslash\")}>Twoslash</a>\n      </li>\n      <li>\n        <a className={isActive(\"typescript vfs\")} href={withPrefix(\"/dev/typescript-vfs\")}>TypeScript VFS</a>\n      </li>\n      <li>\n        <a className={isActive(\"playground plugins\")} href={withPrefix(\"/dev/playground-plugins\")}>Playground Plugins</a>\n      </li>\n      <li>\n        <a className={isActive(\"bug workbench\")} href={withPrefix(\"/dev/bug-workbench\")}>Bug Workbench</a>\n      </li>\n    </ul>\n  </nav >\n}\n","import * as React from \"react\"\nimport { Layout } from \"../../components/layout\"\nimport { withPrefix, graphql, Link } from \"gatsby\"\n\nimport \"./dev.scss\"\nimport { Intl } from \"../../components/Intl\"\nimport { DevNav } from \"../../components/devNav\"\n\ntype Props = {}\n\nconst Index: React.FC<Props> = (props) => {\n  return (\n    <>\n      <Layout title=\"Developers - TypeScript VFS\" description=\"Run TypeScript in the browser, or anywhere - using a virtual file-system\" lang=\"en\">\n        <div id=\"dev\">\n          <DevNav active=\"typescript vfs\" />\n          <div className=\"raised content main-content-block\">\n            <div className=\"split-fivehundred\">\n              <h1 style={{ marginTop: \"20px\" }}>Easy access to the compiler API</h1>\n              <p>TypeScript VFS lets you create a self-contained TypeScript environment entirely under your control. This library is used to power the Playground, and provides the underlying tooling for <Link to=\"/dev/twoslash\">twoslash</Link> code samples.</p>\n              <p>There are 3 main uses for TypeScript VFS:</p>\n              <ul>\n                <li>Creating a TypeScript Program as an entry-point to the compiler API</li>\n                <li>Running TypeScript to emit files like <code>*.js</code>, <code>*.d.ts</code> or <code>*.map</code></li>\n                <li>Using TypeScript's language service to make the same calls an editor would make</li>\n              </ul>\n              <p>You can learn more in the <a href=\"https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescript-vfs/\">TypeScript VFS README</a></p>\n            </div>\n\n            <div className=\"fivehundred\" style={{ borderLeft: \"1px solid gray\", padding: \"20px\" }}>\n              <h3>Setup with TypeScript from node_modules</h3>\n              <pre tabIndex={0}><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from '@typescript/vfs'\n\nconst fsMap = tsvfs.createDefaultMapFromNodeModules({ target: ts.ScriptTarget.ES2015 })\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\n// ....\n              `}</code></pre>\n\n              <h3>Use the TypeScript CDN to get your lib.d.ts files</h3>\n              <pre tabIndex={0}><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from '@typescript/vfs'\n\nconst fsMap = await tsvfs.createDefaultMapFromCDN(compilerOptions, ts.version, true, ts)\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\nconst system = tsvfs.createSystem(fsMap)\nconst host = tsvfs.createVirtualCompilerHost(system, compilerOptions, ts)\n\nconst program = ts.createProgram({\n  rootNames: [...fsMap.keys()],\n  options: compilerOptions,\n  host: host.compilerHost,\n})\n\n// This will update the fsMap with new files\n// for the .d.ts and .js files\nprogram.emit()\n\n// Now I can look at the AST for the .ts file too\nconst index = program.getSourceFile('index.ts')\n              `}</code></pre>\n            </div>\n          </div>\n        </div>\n      </Layout >\n    </>\n  )\n}\n\nexport default (props: Props) => <Intl locale=\"en\"><Index {...props} /></Intl>\n"],"names":["DevNav","props","isActive","str","active","toLowerCase","React","className","style","display","href","withPrefix","Index","Layout","title","description","lang","id","marginTop","Link","to","borderLeft","padding","tabIndex","Intl","locale"],"sourceRoot":""}
{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-6.html","result":{"data":{"markdownRemark":{"id":"e66db3b3-6d9d-5b8b-a675-ba8b2407b772","excerpt":"Disallowed Nullish and Truthy Checks Maybe you’ve written a regex and forgotten to call .test(...) on it: or maybe you’ve accidentally written => (which creates…","html":"<h2 id=\"disallowed-nullish-and-truthy-checks\" style=\"position:relative;\"><a href=\"#disallowed-nullish-and-truthy-checks\" aria-label=\"disallowed nullish and truthy checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disallowed Nullish and Truthy Checks</h2>\n<p>Maybe you’ve written a regex and forgotten to call <code>.test(...)</code> on it:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #811F3F\">/0x</span><span style=\"color: #D16969\">[</span><span style=\"color: #811F3F\">0-9a-f</span><span style=\"color: #D16969\">]</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Oops! This block always runs.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>or maybe you’ve accidentally written <code>=></code> (which creates an arrow function) instead of <code>>=</code> (the greater-than-or-equal-to operator):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Oops! This block always runs.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>or maybe you’ve tried to use a default value with <code>??</code>, but mixed up the precedence of <code>??</code> and a comparison operator like <code>&#x3C;</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">strictness</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">strictness</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = +</span><span style=\"color: #001080\">value</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">max</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Oops! This is parsed as (value &lt; options.max) ?? 100</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div></code></div></pre>\n<p>or maybe you’ve misplaced a parenthesis in a complex expression:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\">) || </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">secondaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\">) ||</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\"> || </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">secondaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//                           ^^^^ 👀 Did we forget a closing ')'?</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>None of these examples do what the author intended, but they’re all valid JavaScript code.\r\nPreviously TypeScript also quietly accepted these examples.</p>\n<p>But with a little bit of experimentation, we found that many <em>many</em> bugs could be caught from flagging down suspicious examples like above.\r\nIn TypeScript 5.6, the compiler now errors when it can syntactically determine a truthy or nullish check will always evaluate in a specific way.\r\nSo in the above examples, you’ll start to see errors:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #811F3F\">/0x</span><span style=\"color: #D16969\">[</span><span style=\"color: #811F3F\">0-9a-f</span><span style=\"color: #D16969\">]</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error: This kind of expression is always truthy.</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error: This kind of expression is always truthy.</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">strictness</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">strictness</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = +</span><span style=\"color: #001080\">value</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">max</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//     ~~~~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error: Right operand of ?? is unreachable because the left operand is never nullish.</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\">) || </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">secondaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"strict\"</span><span style=\"color: #000000\">) ||</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\"> || </span><span style=\"color: #795E26\">isValid</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">secondaryValue</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"loose\"</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//                    ~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error: This kind of expression is always truthy.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Similar results can be achieved by enabling the ESLint <code>no-constant-binary-expression</code> rule, and you can <a href=\"https://eslint.org/blog/2022/07/interesting-bugs-caught-by-no-constant-binary-expression/\">see some of the results they achieved in their blog post</a>;\r\nbut the new checks TypeScript performs does not have perfect overlap with the ESLint rule, and we also believe there is a lot of value in having these checks built into TypeScript itself.</p>\n<p>Note that certain expressions are still allowed, even if they are always truthy or nullish.\r\nSpecifically, <code>true</code>, <code>false</code>, <code>0</code>, and <code>1</code> are all still allowed despite always being truthy or falsy, since code like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doStuff</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">something</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doOtherStuff</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>is still idiomatic and useful, and code like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> || </span><span style=\"color: #795E26\">inDebuggingOrDevelopmentEnvironment</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>is useful while iterating/debugging code.</p>\n<p>If you’re curious about the implementation or the sorts of bugs it catches, take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/59217\">the pull request that implemented this feature</a>.</p>\n<h2 id=\"iterator-helper-methods\" style=\"position:relative;\"><a href=\"#iterator-helper-methods\" aria-label=\"iterator helper methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterator Helper Methods</h2>\n<p>JavaScript has a notion of <em>iterables</em> (things which we can iterate over by calling a <code>[Symbol.iterator]()</code> and getting an iterator) and <em>iterators</em> (things which have a <code>next()</code> method which we can call to try to get the next value as we iterate).\r\nBy and large, you don’t typically have to think about these things when you toss them into a <code>for</code>/<code>of</code> loop, or <code>[...spread]</code> them into a new array.\r\nBut TypeScript does model these with the types <code>Iterable</code> and <code>Iterator</code> (and even <code>IterableIterator</code> which acts as both!), and these types describe the minimal set of members you need for constructs like <code>for</code>/<code>of</code> to work on them.</p>\n<p><code>Iterable</code>s (and <code>IterableIterator</code>s) are nice because they can be used in all sorts of places in JavaScript - but a lot of people found themselves missing methods on <code>Array</code>s like <code>map</code>, <code>filter</code>, and for some reason <code>reduce</code>.\r\nThat’s why <a href=\"https://github.com/tc39/proposal-iterator-helpers\">a recent proposal was brought forward in ECMAScript</a> to add many methods (and more) from <code>Array</code> onto most of the <code>IterableIterator</code>s that are produced in JavaScript.</p>\n<p>For example, every generator now produces an object that also has a <code>map</code> method and a <code>take</code> method.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">positiveIntegers</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">evenNumbers</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">positiveIntegers</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Output:</span></div><div class='line'><span style=\"color: #008000\">//    2</span></div><div class='line'><span style=\"color: #008000\">//    4</span></div><div class='line'><span style=\"color: #008000\">//    6</span></div><div class='line'><span style=\"color: #008000\">//    8</span></div><div class='line'><span style=\"color: #008000\">//   10</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">evenNumbers</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">take</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The same is true for methods like <code>keys()</code>, <code>values()</code>, and <code>entries()</code> on <code>Map</code>s and <code>Set</code>s.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">invertKeysAndValues</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">&gt;): </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">entries</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(([</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">])</span></div><div class='line'><span style=\"color: #000000\">    );</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>You can also extend the new <code>Iterator</code> object:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Provides an endless stream of `0`s.</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Zeroes</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Iterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">zeroes</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Zeroes</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Transform into an endless stream of `1`s.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">ones</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">zeroes</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>And you can adapt any existing <code>Iterable</code>s or <code>Iterator</code>s into this new type with <code>Iterator.from</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #001080\">Iterator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">from</span><span style=\"color: #000000\">(...).</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">someFunction</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Now, we have to talk about naming.</p>\n<p>Earlier we mentioned that TypeScript has types for <code>Iterable</code> and <code>Iterator</code>;\r\nhowever, like we mentioned, these act sort of like “protocols” to ensure certain operations work.\r\n<em>That means that not every value that is declared <code>Iterable</code> or <code>Iterator</code> in TypeScript will have those methods we mentioned above.</em></p>\n<p>But there is still a new <strong>runtime value</strong> called <code>Iterator</code>.\r\nYou can reference <code>Iterator</code>, as well as <code>Iterator.prototype</code>, as actual values in JavaScript.\r\nThis is a bit awkward since TypeScript already defines its own thing called <code>Iterator</code> purely for type-checking.\r\nSo due to this unfortunate name clash, TypeScript needs to introduce a separate type to describe these native/built-in iterable iterators.</p>\n<p>TypeScript 5.6 introduces a new type called <code>IteratorObject</code>.\r\nIt is defined as follows:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IteratorObject</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TNext</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt; </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Iterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TNext</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">](): </span><span style=\"color: #1C6277\">IteratorObject</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TNext</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Lots of built-in collections and methods produce subtypes of <code>IteratorObject</code>s (like <code>ArrayIterator</code>, <code>SetIterator</code>, <code>MapIterator</code>, and more), and both the core JavaScript and DOM types in <code>lib.d.ts</code>, along with <code>@types/node</code>, have been updated to use this new type.</p>\n<p>Similarly, there is a <code>AsyncIteratorObject</code> type for parity.\r\n<code>AsyncIterator</code> does not yet exist as a runtime value in JavaScript that brings the same methods for <code>AsyncIterable</code>s, <a href=\"https://github.com/tc39/proposal-async-iterator-helpers\">but it is an active proposal</a> and this new type prepares for it.</p>\n<p>We’d like to thank <a href=\"https://github.com/bakkot\">Kevin Gibbons</a> who contributed <a href=\"https://github.com/microsoft/TypeScript/pull/58222\">the changes for these types</a>, and who is one of the co-authors of <a href=\"https://github.com/tc39/proposal-iterator-helpers\">the proposal</a>.</p>\n<h2 id=\"strict-builtin-iterator-checks-and---strictbuiltiniteratorreturn\" style=\"position:relative;\"><a href=\"#strict-builtin-iterator-checks-and---strictbuiltiniteratorreturn\" aria-label=\"strict builtin iterator checks and   strictbuiltiniteratorreturn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict Builtin Iterator Checks (and <code>--strictBuiltinIteratorReturn</code>)</h2>\n<p>When you call the <code>next()</code> method on an <code>Iterator&#x3C;T, TReturn></code>, it returns an object with a <code>value</code> and a <code>done</code> property.\r\nThis is modeled with the type <code>IteratorResult</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IteratorResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">IteratorYieldResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #1C6277\">IteratorReturnResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IteratorYieldResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">TYield</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TYield</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IteratorReturnResult</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TReturn</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The naming here is inspired by the way a generator function works.\r\nGenerator functions can <code>yield</code> values, and then <code>return</code> a final value - but the types between the two can be unrelated.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">abc123</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">iter</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">abc123</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// { value: \"a\", done: false }</span></div><div class='line'><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// { value: \"b\", done: false }</span></div><div class='line'><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// { value: \"c\", done: false }</span></div><div class='line'><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// { value: 123, done: true }</span></div></code></div></pre>\n<p>With the new <code>IteratorObject</code> type, we discovered some difficulties in allowing safe implementations of <code>IteratorObject</code>s.\r\nAt the same time, there’s been a long standing unsafety with <code>IteratorResult</code> in cases where <code>TReturn</code> was <code>any</code> (the default!).\r\nFor example, let’s say we have an <code>IteratorResult&#x3C;string, any></code>.\r\nIf we end up reaching for the <code>value</code> of this type, we’ll end up with <code>string | any</code>, which is just <code>any</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">uppercase</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Iterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #0070C1\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">done</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUppercase</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// oops! forgot to check for `done` first and misspelled `toUpperCase`</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>It would be hard to fix this on every <code>Iterator</code> today without introducing a lot of breaks, but we can at least fix it with most <code>IteratorObject</code>s that get created.</p>\n<p>TypeScript 5.6 introduces a new intrinsic type called <code>BuiltinIteratorReturn</code> and a new <code>--strict</code>-mode flag called <code>--strictBuiltinIteratorReturn</code>.\r\nWhenever <code>IteratorObject</code>s are used in places like <code>lib.d.ts</code>, they are always written with <code>BuiltinIteratorReturn</code> type for <code>TReturn</code> (though you’ll see the more-specific <code>MapIterator</code>, <code>ArrayIterator</code>, <code>SetIterator</code> more often).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MapIterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IteratorObject</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">BuiltinIteratorReturn</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">](): </span><span style=\"color: #1C6277\">MapIterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">     * Returns an iterable of key, value pairs for every entry in the map.</span></div><div class='line'><span style=\"color: #008000\">     */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">entries</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">MapIterator</span><span style=\"color: #000000\">&lt;[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">]&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">     * Returns an iterable of keys in the map</span></div><div class='line'><span style=\"color: #008000\">     */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">keys</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">MapIterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">     * Returns an iterable of values in the map</span></div><div class='line'><span style=\"color: #008000\">     */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">values</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">MapIterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">V</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>By default, <code>BuiltinIteratorReturn</code> is <code>any</code>, but when <code>--strictBuiltinIteratorReturn</code> is enabled (possibly via <code>--strict</code>), it is <code>undefined</code>.\r\nUnder this new mode, if we use <code>BuiltinIteratorReturn</code>, our earlier example now correctly errors:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function*</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">uppercase</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Iterator</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">BuiltinIteratorReturn</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #0070C1\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">done</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">iter</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">yield</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUppercase</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//    ~~~~~ ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// error! ┃      ┃</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//        ┃      ┗━ Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//        ┃</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//        ┗━ 'value' is possibly 'undefined'.</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>You’ll typically see <code>BuiltinIteratorReturn</code> paired up with <code>IteratorObject</code> throughout <code>lib.d.ts</code>.\r\nIn general, we recommend being more explicit around the <code>TReturn</code> in your own code when possible.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/58243\">read up on the feature here</a>.</p>\n<h2 id=\"support-for-arbitrary-module-identifiers\" style=\"position:relative;\"><a href=\"#support-for-arbitrary-module-identifiers\" aria-label=\"support for arbitrary module identifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for Arbitrary Module Identifiers</h2>\n<p>JavaScript allows modules to export bindings with invalid identifier names as string literals:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">banana</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"🍌\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">banana</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">as</span><span style=\"color: #000000\"> \"🍌\" };</span></div></code></div></pre>\n<p>Likewise, it allows modules to grab imports with these arbitrary names and bind them to valid identifiers:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { \"🍌\" </span><span style=\"color: #001080\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">banana</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * om nom nom</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">eat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">food</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Eating\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">food</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">eat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">banana</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>This seems like a cute party trick (if you’re as fun as we are at parties), but it has its uses for interoperability with other languages (typically via JavaScript/WebAssembly boundaries), since other languages may have different rules for what constitutes a valid identifier.\r\nIt can also be useful for tools that generate code, like esbuild <a href=\"https://esbuild.github.io/api/#inject\">with its <code>inject</code> feature</a>.</p>\n<p>TypeScript 5.6 now allows you to use these arbitrary module identifiers in your code!\r\nWe’d like to thank <a href=\"https://github.com/evanw\">Evan Wallace</a> who <a href=\"https://github.com/microsoft/TypeScript/pull/58640\">contributed this change to TypeScript</a>!</p>\n<h2 id=\"the---nouncheckedsideeffectimports-option\" style=\"position:relative;\"><a href=\"#the---nouncheckedsideeffectimports-option\" aria-label=\"the   nouncheckedsideeffectimports option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>--noUncheckedSideEffectImports</code> Option</h2>\n<p>In JavaScript it’s possible to <code>import</code> a module without actually importing any values from it.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-module\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>These imports are often called <em>side effect imports</em> because the only useful behavior they can provide is by executing some side effect (like registering a global variable, or adding a polyfill to a prototype).</p>\n<p>In TypeScript, this syntax has had a pretty strange quirk: if the <code>import</code> could be resolved to a valid source file, then TypeScript would load and check the file.\r\nOn the other hand, if no source file could be found, TypeScript would silently ignore the <code>import</code>!</p>\n<p>This is surprising behavior, but it partially stems from modeling patterns in the JavaScript ecosystem.\r\nFor example, this syntax has also been used with special loaders in bundlers to load CSS or other assets.\r\nYour bundler might be configured in such a way where you can include specific <code>.css</code> files by writing something like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./button-component.css\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Button</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Still, this masks potential typos on side effect imports.\r\nThat’s why TypeScript 5.6 introduces a new compiler option called <code>--noUncheckedSideEffectImports</code>, to catch these cases.\r\nWhen <code>--noUncheckedSideEffectImports</code> is enabled, TypeScript will now error if it can’t find a source file for a side effect import.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"oops-this-module-does-not-exist\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding type declarations.</span></div></code></div></pre>\n<p>When enabling this option, some working code may now receive an error, like in the CSS example above.\r\nTo work around this, users who want to just write side effect <code>import</code>s for assets might be better served by writing what’s called an <em>ambient module declaration</em> with a wildcard specifier.\r\nIt would go in a global file and look something like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// ./src/globals.d.ts</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Recognize all CSS files as module imports.</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"*.css\"</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p>In fact, you might already have a file like this in your project!\r\nFor example, running something like <code>vite init</code> might create a similar <code>vite-env.d.ts</code>.</p>\n<p>While this option is currently off by default, we encourage users to give it a try!</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/58941\">check out the implementation here</a>.</p>\n<h2 id=\"the---nocheck-option\" style=\"position:relative;\"><a href=\"#the---nocheck-option\" aria-label=\"the   nocheck option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>--noCheck</code> Option</h2>\n<p>TypeScript 5.6 introduces a new compiler option, <code>--noCheck</code>, which allows you to skip type checking for all input files.\r\nThis avoids unnecessary type-checking when performing any semantic analysis necessary for emitting output files.</p>\n<p>One scenario for this is to separate JavaScript file generation from type-checking so that the two can be run as separate phases.\r\nFor example, you could run <code>tsc --noCheck</code> while iterating, and then <code>tsc --noEmit</code> for a thorough type check.\r\nYou could also run the two tasks in parallel, even in <code>--watch</code> mode, though note you’d probably want to specify a separate <code>--tsBuildInfoFile</code> path if you’re truly running them at the same time.</p>\n<p><code>--noCheck</code> is also useful for emitting declaration files in a similar fashion.\r\nIn a project where <code>--noCheck</code> is specified on a project that conforms to <code>--isolatedDeclarations</code>, TypeScript can quickly generate declaration files without  a type-checking pass.\r\nThe generated declaration files will rely purely on quick syntactic transformations.</p>\n<p>Note that in cases where <code>--noCheck</code> is specified, but a project does <em>not</em> use <code>--isolatedDeclarations</code>, TypeScript may still perform as much type-checking as necessary to generate <code>.d.ts</code> files.\r\nIn this sense, <code>--noCheck</code> is a bit of a misnomer; however, the process will be lazier than a full type-check, only calculating the types of unannotated declarations.\r\nThis should be much faster than a full type-check.</p>\n<p><code>noCheck</code> is also available via the TypeScript API as a standard option.\r\nInternally, <code>transpileModule</code> and <code>transpileDeclaration</code> already used <code>noCheck</code> to speed things up (at least as of TypeScript 5.5).\r\nNow any build tool should be able to leverage the flag, taking a variety of custom strategies to coordinate and speed up builds.</p>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/58364\">the work done in TypeScript 5.5 to power up <code>noCheck</code> internally</a>, along with the relevant work to make it publicly available <a href=\"https://github.com/microsoft/TypeScript/pull/58839\">on the command line</a> and</p>\n<h2 id=\"allow---build-with-intermediate-errors\" style=\"position:relative;\"><a href=\"#allow---build-with-intermediate-errors\" aria-label=\"allow   build with intermediate errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allow <code>--build</code> with Intermediate Errors</h2>\n<p>TypeScript’s concept of <em>project references</em> allows you to organize your codebase into multiple projects and create dependencies between them.\r\nRunning the TypeScript compiler in <code>--build</code> mode (or <code>tsc -b</code> for short) is the built-in way of actually conducting that build across projects and figuring out which projects and files need to be compiled.</p>\n<p>Previously, using <code>--build</code> mode would assume <code>--noEmitOnError</code> and immediately stop the build if any errors were encountered.\r\nThis meant that “downstream” projects could never be checked and built if any of their “upstream” dependencies had build errors.\r\nIn theory, this is a very cromulent approach - if a project has errors, it is not necessarily in a coherent state for its dependencies.</p>\n<p>In reality, this sort of rigidity made things like upgrades a pain.\r\nFor example, if <code>projectB</code> depends on <code>projectA</code>, then people more familiar with <code>projectB</code> can’t proactively upgrade their code until their dependencies are upgraded.\r\nThey are blocked by work on upgrading <code>projectA</code> first.</p>\n<p>As of TypeScript 5.6, <code>--build</code> mode will continue to build projects even if there are intermediate errors in dependencies.\r\nIn the face of intermediate errors, they will be reported consistently and output files will be generated on a best-effort basis;\r\nhowever, the build will continue to completion on the specified project.</p>\n<p>If you want to stop the build on the first project with errors, you can use a new flag called <code>--stopOnBuildErrors</code>.\r\nThis can be useful when running in a CI environment, or when iterating on a project that’s heavily depended upon by other projects.</p>\n<p>Note that to accomplish this, TypeScript now always emits a <code>.tsbuildinfo</code> file for any project in a <code>--build</code> invocation (even if <code>--incremental</code>/<code>--composite</code> is not specified).\r\nThis is to keep track of the state of how <code>--build</code> was invoked and what work needs to be performed in the future.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/58838\">read more about this change here on the implementation</a>.</p>\n<h2 id=\"region-prioritized-diagnostics-in-editors\" style=\"position:relative;\"><a href=\"#region-prioritized-diagnostics-in-editors\" aria-label=\"region prioritized diagnostics in editors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Region-Prioritized Diagnostics in Editors</h2>\n<p>When TypeScript’s language service is asked for the <em>diagnostics</em> for a file (things like errors, suggestions, and deprecations), it would typically require checking the <em>entire file</em>.\r\nMost of the time this is fine, but in extremely large files it can incur a delay.\r\nThat can be frustrating because fixing a typo should feel like a quick operation, but can take <em>seconds</em> in a big-enough file.</p>\n<p>To address this, TypeScript 5.6 introduces a new feature called <em>region-prioritized diagnostics</em> or <em>region-prioritized checking</em>.\r\nInstead of just requesting diagnostics for a set of files, editors can now also provide a relevant region of a given file - and the intent is that this will typically be the region of the file that is currently visible to a user.\r\nThe TypeScript language server can then choose to provide two sets of diagnostics: one for the region, and one for the file in its entirety.\r\nThis allows editing to feel <em>way</em> more responsive in large files so you’re not waiting as long for thoes red squiggles to disappear.</p>\n<p>For some specific numbers, in our testing <a href=\"https://github.com/microsoft/TypeScript/blob/7319968e90600102892a79142fb804bcbe384160/src/compiler/checker.ts\">on TypeScript’s own <code>checker.ts</code></a>, a full semantic diagnostics response took 3330ms.\r\nIn contrast, the response for the first region-based diagnostics response took 143ms!\r\nWhile the remaining whole-file response took about 3200ms, this can make a huge difference for quick edits.</p>\n<p>This feature also includes quite a bit of work to also make diagnostics report more consistently throughout your experience.\r\nDue the way our type-checker leverages caching to avoid work, subsequent checks between the same types could often have a different (typically shorter) error message.\r\nTechnically, lazy out-of-order checking could cause diagnostics to report differently between two locations in an editor - even before this feature - but we didn’t want to exacerbate the issue.\r\nWith recent work, we’ve ironed out many of these error inconsistencies.</p>\n<p>Currently, this functionality is available in Visual Studio Code for TypeScript 5.6 and later.</p>\n<p>For more detailed information, <a href=\"https://github.com/microsoft/TypeScript/pull/57842\">take a look at the implementation and write-up here</a>.</p>\n<h2 id=\"granular-commit-characters\" style=\"position:relative;\"><a href=\"#granular-commit-characters\" aria-label=\"granular commit characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Granular Commit Characters</h2>\n<p>TypeScript’s language service now provides its own <em>commit characters</em> for each completion item.\r\nCommit characters are specific characters that, when typed, will automatically commit the currently-suggested completion item.</p>\n<p>What this means is that over time your editor will now more frequently commit to the currently-suggested completion item when you type certain characters.\r\nFor example, take the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">food</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">eat</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">foo</span><span style=\"color: #008000\">/**/</span></div></code></div></pre>\n<p>If our cursor is at <code>/**/</code>, it’s unclear if the code we’re writing is going to be something like <code>let f = (food.eat())</code> or <code>let f = (foo, bar) => foo + bar</code>.\r\nYou could imagine that the editor might be able to auto-complete differently depending on which character we type out next.\r\nFor instance, if we type in the period/dot character (<code>.</code>), we probably want the editor to complete with the variable <code>food</code>;\r\nbut if we type the comma character (<code>,</code>), we might be writing out a parameter in an arrow function.</p>\n<p>Unfortunately, previously TypeScript just signaled to editors that the current text might define a new parameter name so that <em>no</em> commit characters were safe.\r\nSo hitting a <code>.</code> wouldn’t do anything even if it was “obvious” that the editor should auto-complete with the word <code>food</code>.</p>\n<p>TypeScript now explicitly lists which characters are safe to commit for each completion item.\r\nWhile this won’t <em>immediately</em> change your day-to-day experience, editors that support these commit characters should see behavioral improvements over time.\r\nTo see those improvements right now, you can now <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">use the TypeScript nightly extension</a> with <a href=\"https://code.visualstudio.com/insiders/\">Visual Studio Code Insiders</a>.\r\nHitting <code>.</code> in the code above correctly auto-completes with <code>food</code>.</p>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/59339\">the pull request that added commit characters</a> along with our <a href=\"https://github.com/microsoft/TypeScript/pull/59523\">adjustments to commit characters depending on context</a>.</p>\n<h2 id=\"exclude-patterns-for-auto-imports\" style=\"position:relative;\"><a href=\"#exclude-patterns-for-auto-imports\" aria-label=\"exclude patterns for auto imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exclude Patterns for Auto-Imports</h2>\n<p>TypeScript’s language service now allows you to specify a list of regular expression patterns which will filter away auto-import suggestions from certain specifiers.\r\nFor example, if you want to exclude all “deep” imports from a package like <code>lodash</code>, you could configure the following preference in Visual Studio Code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typescript.preferences.autoImportSpecifierExcludeRegexes\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"^lodash/.*$\"</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Or going the other way, you might want to disallow importing from the entry-point of a package:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typescript.preferences.autoImportSpecifierExcludeRegexes\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"^lodash$\"</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One could even avoid <code>node:</code> imports by using the following setting:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typescript.preferences.autoImportSpecifierExcludeRegexes\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"^node:\"</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note that if you want to specify certain flags like <code>i</code> or <code>u</code>, you will need to surround your regular expression with slashes.\r\nWhen providing surrounding slashes, you’ll need to escape other inner slashes.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typescript.preferences.autoImportSpecifierExcludeRegexes\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"^./lib/internal\"</span><span style=\"color: #000000\">,        </span><span style=\"color: #008000\">// no escaping needed</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"/^.</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">/lib</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">/internal/\"</span><span style=\"color: #000000\">,  </span><span style=\"color: #008000\">// escaping needed - note the leading and trailing slashes</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #A31515\">\"/^.</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">/lib</span><span style=\"color: #EE0000\">\\\\</span><span style=\"color: #A31515\">/internal/i\"</span><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// escaping needed - we needed slashes to provide the 'i' regex flag</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In Visual Studio Code, the same settings can be applied for JavaScript through <code>javascript.preferences.autoImportSpecifierExcludeRegexes</code>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/59543\">see the implementation here</a>.</p>\n<h2 id=\"notable-behavioral-changes\" style=\"position:relative;\"><a href=\"#notable-behavioral-changes\" aria-label=\"notable behavioral changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notable Behavioral Changes</h2>\n<p>This section highlights a set of noteworthy changes that should be acknowledged and understood as part of any upgrade.\r\nSometimes it will highlight deprecations, removals, and new restrictions.\r\nIt can also contain bug fixes that are functionally improvements, but which can also affect an existing build by introducing new errors.</p>\n<h3 id=\"libdts\" style=\"position:relative;\"><a href=\"#libdts\" aria-label=\"libdts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code></h3>\n<p>Types generated for the DOM may have an impact on type-checking your codebase.\r\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/issues/58764\">see linked issues related to DOM and <code>lib.d.ts</code> updates for this version of TypeScript</a>.</p>\n<h3 id=\"tsbuildinfo-is-always-written\" style=\"position:relative;\"><a href=\"#tsbuildinfo-is-always-written\" aria-label=\"tsbuildinfo is always written permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>.tsbuildinfo</code> is Always Written</h3>\n<p>To enable <code>--build</code> to continue building projects even if there are intermediate errors in dependencies, and to support <code>--noCheck</code> on the command line, TypeScript now always emits a <code>.tsbuildinfo</code> file for any project in a <code>--build</code> invocation.\r\nThis happens regardless of whether <code>--incremental</code> is actually on.\r\n<a href=\"https://github.com/microsoft/TypeScript/pull/58626\">See more information here</a>.</p>\n<h3 id=\"respecting-file-extensions-and-packagejson-from-within-node_modules\" style=\"position:relative;\"><a href=\"#respecting-file-extensions-and-packagejson-from-within-node_modules\" aria-label=\"respecting file extensions and packagejson from within node_modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Respecting File Extensions and <code>package.json</code> from within <code>node_modules</code></h3>\n<p>Before Node.js implemented support for ECMAScript modules in v12, there was never a good way for TypeScript to know whether <code>.d.ts</code> files it found in <code>node_modules</code> represented JavaScript files authored as CommonJS or ECMAScript modules.\r\nWhen the vast majority of npm was CommonJS-only, this didn’t cause many problems - if in doubt, TypeScript could just assume that everything behaved like CommonJS.\r\nUnfortunately, if that assumption was wrong it could allow unsafe imports:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// node_modules/dep/index.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// index.ts</span></div><div class='line'><span style=\"color: #008000\">// Okay if \"dep\" is a CommonJS module, but fails if</span></div><div class='line'><span style=\"color: #008000\">// it's an ECMAScript module - even in bundlers!</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dep</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"dep\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">dep</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>In practice, this didn’t come up very often.\r\nBut in the years since Node.js started supporting ECMAScript modules, the share of ESM on npm has grown.\r\nFortunately, Node.js also introduced a mechanism that can help TypeScript determine if a file is an ECMAScript module or a CommonJS module: the <code>.mjs</code> and <code>.cjs</code> file extensions and the <code>package.json</code> <code>\"type\"</code> field.\r\nTypeScript 4.7 added support for understanding these indicators, as well as authoring <code>.mts</code> and <code>.cts</code> files;\r\nhowever, TypeScript would <em>only</em> read those indicators under <code>--module node16</code> and <code>--module nodenext</code>, so the unsafe import above was still a problem for anyone using <code>--module esnext</code> and <code>--moduleResolution bundler</code>, for example.</p>\n<p>To solve this, TypeScript 5.6 collects module format information and uses it to resolve ambiguities like the one in the example above in <em>all</em> <code>module</code> modes (except <code>amd</code>, <code>umd</code>, and <code>system</code>).\r\nFormat-specific file extensions (<code>.mts</code> and <code>.cts</code>) are respected anywhere they’re found, and the <code>package.json</code> <code>\"type\"</code> field is consulted inside <code>node_modules</code> dependencies, regardless of the <code>module</code> setting.\r\nPreviously, it was technically possible to produce CommonJS output into a <code>.mjs</code> file or vice versa:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// main.mts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// $ tsc --module commonjs main.mts</span></div><div class='line'><span style=\"color: #008000\">// main.mjs</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Now, <code>.mts</code> files never emit CommonJS output, and <code>.cts</code> files never emit ESM output.</p>\n<p>Note that much of this behavior was provided in pre-release versions of TypeScript 5.5 (<a href=\"https://github.com/microsoft/TypeScript/pull/57896\">implementation details here</a>), but in 5.6 this behavior is only extended to files within <code>node_modules</code>.</p>\n<p>More details are available <a href=\"https://github.com/microsoft/TypeScript/pull/58825\">on the change here</a>.</p>\n<h3 id=\"correct-override-checks-on-computed-properties\" style=\"position:relative;\"><a href=\"#correct-override-checks-on-computed-properties\" aria-label=\"correct override checks on computed properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Correct <code>override</code> Checks on Computed Properties</h3>\n<p>Previously, computed properties marked with <code>override</code> did not correctly check for the existence of a base class member.\r\nSimilarly, if you used <code>noImplicitOverride</code>, you would not get an error if you <em>forgot</em> to add an <code>override</code> modifier to a computed property.</p>\n<p>TypeScript 5.6 now correctly checks computed properties in both cases.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">]() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">override</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">]() {}</span></div><div class='line'><span style=\"color: #008000\">//           ~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error: This member cannot have an 'override' modifier because it is not declared in the base class 'Base'.</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">]() {}</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error under noImplicitOverride: This member must have an 'override' modifier because it overrides a member in the base class 'Base'.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This fix was contributed thanks to <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a> in <a href=\"https://github.com/microsoft/TypeScript/pull/57146\">this pull request</a>.</p>","headings":[{"value":"Disallowed Nullish and Truthy Checks","depth":2},{"value":"Iterator Helper Methods","depth":2},{"value":"Strict Builtin Iterator Checks (and --strictBuiltinIteratorReturn)","depth":2},{"value":"Support for Arbitrary Module Identifiers","depth":2},{"value":"The --noUncheckedSideEffectImports Option","depth":2},{"value":"The --noCheck Option","depth":2},{"value":"Allow --build with Intermediate Errors","depth":2},{"value":"Region-Prioritized Diagnostics in Editors","depth":2},{"value":"Granular Commit Characters","depth":2},{"value":"Exclude Patterns for Auto-Imports","depth":2},{"value":"Notable Behavioral Changes","depth":2},{"value":"lib.d.ts","depth":3},{"value":".tsbuildinfo is Always Written","depth":3},{"value":"Respecting File Extensions and package.json from within node_modules","depth":3},{"value":"Correct override Checks on Computed Properties","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-6.html","title":"TypeScript 5.6","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.6 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.6","slug":"/docs/handbook/release-notes/typescript-5-6.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.6.md","previousID":null,"nextID":null,"lang":"en","modifiedTime":"2025-02-04T05:30:48.051Z"}},"staticQueryHashes":[],"slicesMap":{}}
{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-4.html","result":{"data":{"markdownRemark":{"id":"87d34ff9-750e-5501-a2d2-d6d3c99a9bf9","excerpt":"Preserved Narrowing in Closures Following Last Assignments TypeScript can usually figure out a more specific type for a variable based on checks that you might…","html":"<h2 id=\"preserved-narrowing-in-closures-following-last-assignments\" style=\"position:relative;\"><a href=\"#preserved-narrowing-in-closures-following-last-assignments\" aria-label=\"preserved narrowing in closures following last assignments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preserved Narrowing in Closures Following Last Assignments</h2>\n<p>TypeScript can usually figure out a more specific type for a variable based on checks that you might perform.\nThis process is called narrowing.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">uppercaseStrings</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// TypeScript knows 'x' is a 'string' here.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One common pain point was that these narrowed types weren’t always preserved within function closures.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getUrls</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">URL</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">names</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">url</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">url</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">URL</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">names</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">searchParams</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//  ~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Property 'searchParams' does not exist on type 'string | URL'.</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toString</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here, TypeScript decided that it wasn’t “safe” to assume that <code>url</code> was <em>actually</em> a <code>URL</code> object in our callback function because it was mutated elsewhere;\nhowever, in this instance, that arrow function is <em>always</em> created after that assignment to <code>url</code>, and it’s also the <em>last</em> assignment to <code>url</code>.</p>\n<p>TypeScript 5.4 takes advantage of this to make narrowing a little smarter.\nWhen parameters and <code>let</code> variables are used in non-<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">hoisted</a> functions, the type-checker will look for a last assignment point.\nIf one is found, TypeScript can safely narrow from outside the containing function.\nWhat that means is the above example just works now.</p>\n<p>Note that narrowing analysis doesn’t kick in if the variable is assigned anywhere in a nested function.\nThis is because there’s no way to know for sure whether the function will be called later.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">printValueLater</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"missing!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Modifying 'value', even in a way that shouldn't affect</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// its type, will invalidate type refinements in closures.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }, </span><span style=\"color: #098658\">500</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//          ~~~~~</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// error! 'value' is possibly 'undefined'.</span></div><div class='line'><span style=\"color: #000000\">    }, </span><span style=\"color: #098658\">1000</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This should make lots of typical JavaScript code easier to express.\nYou can <a href=\"https://github.com/microsoft/TypeScript/pull/56908\">read more about the change on GitHub</a>.</p>\n<h2 id=\"the-noinfer-utility-type\" style=\"position:relative;\"><a href=\"#the-noinfer-utility-type\" aria-label=\"the noinfer utility type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>NoInfer</code> Utility Type</h2>\n<p>When calling generic functions, TypeScript is able to infer type arguments from whatever you pass in.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// We can explicitly say that 'T' should be 'string'.</span></div><div class='line'><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// We can also just let the type of 'T' get inferred.</span></div><div class='line'><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>One challenge, however, is that it is not always clear what the “best” type is to infer.\nThis might lead to TypeScript rejecting valid calls, accepting questionable calls, or just reporting worse error messages when it catches a bug.</p>\n<p>For example, let’s imagine a <code>createStreetLight</code> function that takes a list of color names, along with an optional default color.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">colors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">defaultColor</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">], </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>What happens when we pass in a <code>defaultColor</code> that wasn’t in the original <code>colors</code> array?\nIn this function, <code>colors</code> is supposed to be the “source of truth” and describe what can be passed to <code>defaultColor</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// Oops! This is undesirable, but is allowed!</span></div><div class='line'><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">], </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>In this call, type inference decided that <code>\"blue\"</code> was just as valid of a type as <code>\"red\"</code> or <code>\"yellow\"</code> or <code>\"green\"</code>.\nSo instead of rejecting the call, TypeScript infers the type of <code>C</code> as <code>\"red\" | \"yellow\" | \"green\" | \"blue\"</code>.\nYou might say that inference just blue up in our faces!</p>\n<p>One way people currently deal with this is to add a separate type parameter that’s bounded by the existing type parameter.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">colors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">defaultColor</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">], </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//                                            ~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Argument of type '\"blue\"' is not assignable to parameter of type '\"red\" | \"yellow\" | \"green\" | undefined'.</span></div></code></div></pre>\n<p>This works, but is a little bit awkward because <code>D</code> probably won’t be used anywhere else in the signature for <code>createStreetLight</code>.\nWhile not bad <em>in this case</em>, using a type parameter only once in a signature is often a code smell.</p>\n<p>That’s why TypeScript 5.4 introduces a new <code>NoInfer&#x3C;T></code> utility type.\nSurrounding a type in <code>NoInfer&#x3C;...></code> gives a signal to TypeScript not to dig in and match against the inner types to find candidates for type inference.</p>\n<p>Using <code>NoInfer</code>, we can rewrite <code>createStreetLight</code> as something like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">colors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">defaultColor</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">NoInfer</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">createStreetLight</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">], </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//                                            ~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Argument of type '\"blue\"' is not assignable to parameter of type '\"red\" | \"yellow\" | \"green\" | undefined'.</span></div></code></div></pre>\n<p>Excluding the type of <code>defaultColor</code> from being explored for inference means that <code>\"blue\"</code> never ends up as an inference candidate, and the type-checker can reject it.</p>\n<p>You can see the specific changes in <a href=\"https://github.com/microsoft/TypeScript/pull/56794\">the implementing pull request</a>, along with <a href=\"https://github.com/microsoft/TypeScript/pull/52968\">the initial implementation</a> provided thanks to <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a>!</p>\n<h2 id=\"objectgroupby-and-mapgroupby\" style=\"position:relative;\"><a href=\"#objectgroupby-and-mapgroupby\" aria-label=\"objectgroupby and mapgroupby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Object.groupBy</code> and <code>Map.groupBy</code></h2>\n<p>TypeScript 5.4 adds declarations for JavaScript’s new <code>Object.groupBy</code> and <code>Map.groupBy</code> static methods.</p>\n<p><code>Object.groupBy</code> takes an iterable, and a function that decides which “group” each element should be placed in.\nThe function needs to make a “key” for each distinct group, and <code>Object.groupBy</code> uses that key to make an object where every key maps to an array with the original element in it.</p>\n<p>So the following JavaScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">array</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myObj</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">groupBy</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">array</span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> % </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>is basically equivalent to writing this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myObj</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">even:</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">odd:</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p><code>Map.groupBy</code> is similar, but produces a <code>Map</code> instead of a plain object.\nThis might be more desirable if you need the guarantees of <code>Map</code>s, you’re dealing with APIs that expect <code>Map</code>s, or you need to use any kind of key for grouping - not just keys that can be used as property names in JavaScript.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myObj</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">groupBy</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">array</span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> % </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>and just as before, you could have created <code>myObj</code> in an equivalent way:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myObj</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">myObj</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #001080\">myObj</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">]);</span></div></code></div></pre>\n<p>Note that in the above example of <code>Object.groupBy</code>, the object produced uses all optional properties.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">EvenOdds</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">even</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">odd</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myObj</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">EvenOdds</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">groupBy</span><span style=\"color: #000000\">(...);</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">myObj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">even</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//    ~~~~</span></div><div class='line'><span style=\"color: #008000\">// Error to access this under 'strictNullChecks'.</span></div></code></div></pre>\n<p>This is because there’s no way to guarantee in a general way that <em>all</em> the keys were produced by <code>groupBy</code>.</p>\n<p>Note also that these methods are only accessible by configuring your <code>target</code> to <code>esnext</code> or adjusting your <code>lib</code> settings.\nWe expect they will eventually be available under a stable <code>es2024</code> target.</p>\n<p>We’d like to extend a thanks to <a href=\"https://github.com/bakkot\">Kevin Gibbons</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/56805\">adding the declarations to these <code>groupBy</code> methods</a>.</p>\n<h2 id=\"support-for-require-calls-in---moduleresolution-bundler-and---module-preserve\" style=\"position:relative;\"><a href=\"#support-for-require-calls-in---moduleresolution-bundler-and---module-preserve\" aria-label=\"support for require calls in   moduleresolution bundler and   module preserve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>require()</code> calls in <code>--moduleResolution bundler</code> and <code>--module preserve</code></h2>\n<p>TypeScript has a <code>moduleResolution</code> option called <code>bundler</code> that is meant to model the way modern bundlers figure out which file an import path refers to.\nOne of the limitations of the option is that it had to be paired with <code>--module esnext</code>, making it impossible to use the <code>import ... = require(...)</code> syntax.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// previously errored</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myModule</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"module/path\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>That might not seem like a big deal if you’re planning on just writing standard ECMAScript <code>import</code>s, but there’s a difference when using a package with <a href=\"https://nodejs.org/api/packages.html#conditional-exports\">conditional exports</a>.</p>\n<p>In TypeScript 5.4, <code>require()</code> can now be used when setting the <code>module</code> setting to a new option called <code>preserve</code>.</p>\n<p>Between <code>--module preserve</code> and <code>--moduleResolution bundler</code>, the two more accurately model what bundlers and runtimes like Bun will allow, and how they’ll perform module lookups.\nIn fact, when using <code>--module preserve</code>, the <code>bundler</code> option will be implicitly set for <code>--moduleResolution</code> (along with <code>--esModuleInterop</code> and <code>--resolveJsonModule</code>)</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"preserve\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ^ also implies:</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// \"moduleResolution\": \"bundler\",</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// \"esModuleInterop\": true,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// \"resolveJsonModule\": true,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Under <code>--module preserve</code>, an ECMAScript <code>import</code> will always be emitted as-is, and <code>import ... = require(...)</code> will be emitted as a <code>require()</code> call (though in practice you may not even use TypeScript for emit, since it’s likely you’ll be using a bundler for your code).\nThis holds true regardless of the file extension of the containing file.\nSo the output of this code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-package/foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"some-package/bar\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>should look something like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-package/foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"some-package/bar\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>What this also means is that the syntax you choose directs how <a href=\"https://nodejs.org/api/packages.html#conditional-exports\">conditional exports</a> are matched.\nSo in the above example, if the <code>package.json</code> of <code>some-package</code> looks like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"some-package\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"0.0.1\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./foo\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./esm/foo-from-import.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./cjs/foo-from-require.cjs\"</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./bar\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./esm/bar-from-import.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./cjs/bar-from-require.cjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript will resolve these paths to <code>[...]/some-package/esm/foo-from-import.mjs</code> and <code>[...]/some-package/cjs/bar-from-require.cjs</code>.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/56785\">read up on these new settings here</a>.</p>\n<h2 id=\"checked-import-attributes-and-assertions\" style=\"position:relative;\"><a href=\"#checked-import-attributes-and-assertions\" aria-label=\"checked import attributes and assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checked Import Attributes and Assertions</h2>\n<p>Import attributes and assertions are now checked against the global <code>ImportAttributes</code> type.\nThis means that runtimes can now more accurately describe the import attributes</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// In some global file.</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ImportAttributes</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"json\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// In some other module</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ns</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">with</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: \"</span><span style=\"color: #001080\">not</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">json</span><span style=\"color: #000000\">\" };</span></div><div class='line'><span style=\"color: #008000\">//                                     ~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #008000\">// Type '{ type: \"not-json\"; }' is not assignable to type 'ImportAttributes'.</span></div><div class='line'><span style=\"color: #008000\">//  Types of property 'type' are incompatible.</span></div><div class='line'><span style=\"color: #008000\">//    Type '\"not-json\"' is not assignable to type '\"json\"'.</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56034\">This change</a> was provided thanks to <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a>.</p>\n<h2 id=\"quick-fix-for-adding-missing-parameters\" style=\"position:relative;\"><a href=\"#quick-fix-for-adding-missing-parameters\" aria-label=\"quick fix for adding missing parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick Fix for Adding Missing Parameters</h2>\n<p>TypeScript now has a quick fix to add a new parameter to functions that are called with too many arguments.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2024/01/add-missing-params-5-4-beta-before.png\" alt=\"A quick fix being offered when someFunction calls someHelperFunction with 2 more arguments than are expected.\"></p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2024/01/add-missing-params-5-4-beta-after.png\" alt=\"The missing arguments have been added to someHelperFunction after the quick fix was applied.\"></p>\n<p>This can be useful when threading a new argument through several existing functions, which can be cumbersome today.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56411\">This quick fix</a> was provided courtsey of <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a>.</p>\n<h2 id=\"upcoming-changes-from-typescript-50-deprecations\" style=\"position:relative;\"><a href=\"#upcoming-changes-from-typescript-50-deprecations\" aria-label=\"upcoming changes from typescript 50 deprecations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upcoming Changes from TypeScript 5.0 Deprecations</h2>\n<p>TypeScript 5.0 deprecated the following options and behaviors:</p>\n<ul>\n<li><code>charset</code></li>\n<li><code>target: ES3</code></li>\n<li><code>importsNotUsedAsValues</code></li>\n<li><code>noImplicitUseStrict</code></li>\n<li><code>noStrictGenericChecks</code></li>\n<li><code>keyofStringsOnly</code></li>\n<li><code>suppressExcessPropertyErrors</code></li>\n<li><code>suppressImplicitAnyIndexErrors</code></li>\n<li><code>out</code></li>\n<li><code>preserveValueImports</code></li>\n<li><code>prepend</code> in project references</li>\n<li>implicitly OS-specific <code>newLine</code></li>\n</ul>\n<p>To continue using them, developers using TypeScript 5.0 and other more recent versions have had to specify a new option called <code>ignoreDeprecations</code> with the value <code>\"5.0\"</code>.</p>\n<p>However, TypScript 5.4 will be the last version in which these will continue to function as normal.\nBy TypeScript 5.5 (likely June 2024), these will become hard errors, and code using them will need to be migrated away.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/issues/51909\">read up on this plan on GitHub</a>, which contains suggestions in how to best adapt your codebase.</p>\n<h2 id=\"notable-behavioral-changes\" style=\"position:relative;\"><a href=\"#notable-behavioral-changes\" aria-label=\"notable behavioral changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notable Behavioral Changes</h2>\n<p>This section highlights a set of noteworthy changes that should be acknowledged and understood as part of any upgrade.\nSometimes it will highlight deprecations, removals, and new restrictions.\nIt can also contain bug fixes that are functionally improvements, but which can also affect an existing build by introducing new errors.</p>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Types generated for the DOM may have an impact on type-checking your codebase.\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/57027\">see the DOM updates for TypeScript 5.4</a>.</p>\n<h3 id=\"more-accurate-conditional-type-constraints\" style=\"position:relative;\"><a href=\"#more-accurate-conditional-type-constraints\" aria-label=\"more accurate conditional type constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More Accurate Conditional Type Constraints</h3>\n<p>The following code no longer allows the second variable declaration in the function <code>foo</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IsArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">IsArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;    </span><span style=\"color: #008000\">// Error</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;  </span><span style=\"color: #008000\">// Error, but previously wasn't</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Previously, when TypeScript checked the initializer for <code>second</code>, it needed to determine whether <code>IsArray&#x3C;U></code> was assignable to the unit type <code>false</code>.\nWhile <code>IsArray&#x3C;U></code> isn’t compatible any obvious way, TypeScript looks at the <em>constraint</em> of that type as well.\nIn a conditional type like <code>T extends Foo ? TrueBranch : FalseBranch</code>, where <code>T</code> is generic, the type system would look at the constraint of <code>T</code>, substitute it in for <code>T</code> itself, and decide on either the true or false branch.</p>\n<p>But this behavior was inaccurate because it was overly eager.\nEven if the constraint of <code>T</code> isn’t assignable to <code>Foo</code>, that doesn’t mean that it won’t be instantiated with something that is.\nAnd so the more correct behavior is to produce a union type for the constraint of the conditional type in cases where it can’t be proven that <code>T</code> <em>never</em> or <em>always</em> extends <code>Foo.</code></p>\n<p>TypeScript 5.4 adopts this more accurate behavior.\nWhat this means in practice is that you may begin to find that some conditional type instances are no longer compatible with their branches.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56004\">You can read about the specific changes here</a>.</p>\n<h3 id=\"more-aggressive-reduction-of-intersections-between-type-variables-and-primitive-types\" style=\"position:relative;\"><a href=\"#more-aggressive-reduction-of-intersections-between-type-variables-and-primitive-types\" aria-label=\"more aggressive reduction of intersections between type variables and primitive types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More Aggressive Reduction of Intersections Between Type Variables and Primitive Types</h3>\n<p>TypeScript now reduces intersections with type variables and primitives more aggressively, depending on how the type variable’s constraint overlaps with those primitives.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">intersect</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"abc\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"def\"</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Was 'T & string', now is just 'T'</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">intersect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Was 'T & number', now is just 'never'</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">intersect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">)</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Was '(T & \"abc\") | (T & \"def\")', now is just 'T'</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">random</span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ?</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">intersect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"abc\"</span><span style=\"color: #000000\">) :</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">intersect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"def\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/56515\">see the change here</a>.</p>\n<h3 id=\"improved-checking-against-template-strings-with-interpolations\" style=\"position:relative;\"><a href=\"#improved-checking-against-template-strings-with-interpolations\" aria-label=\"improved checking against template strings with interpolations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved Checking Against Template Strings with Interpolations</h3>\n<p>TypeScript now more accurately checks whether or not strings are assignable to the placeholder slots of a template string type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> {</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">}&gt;() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">`-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000FF\"> </span><span style=\"color: #000000\">&</span><span style=\"color: #000000FF\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Used to error, now doesn't.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"-id\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This behavior is more desirable, but may cause breaks in code using constructs like conditional types, where these rule changes are easy to witness.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56598\">See this change</a> for more details.</p>\n<h3 id=\"errors-when-type-only-imports-conflict-with-local-values\" style=\"position:relative;\"><a href=\"#errors-when-type-only-imports-conflict-with-local-values\" aria-label=\"errors when type only imports conflict with local values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors When Type-Only Imports Conflict with Local Values</h3>\n<p>Previously, TypeScript would permit the following code under <code>isolatedModules</code> if the import to <code>Something</code> only referred to a type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Something</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some/path\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Something</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>However, it’s not safe for single-file compilers to assume whether it’s “safe” to drop the <code>import</code>, even if the code is guaranteed to fail at runtime.\nIn TypeScript 5.4, this code will trigger an error like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: undefined\">Import 'Something' conflicts with local value, so must be declared with a type-only import when 'isolatedModules' is enabled.</span></div></code></div></pre>\n<p>The fix should be to either make a local rename, or, as the error states, add the <code>type</code> modifier to the import:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Something</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some/path\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// or</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Something</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some/path\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56354\">See more information on the change itself</a>.</p>\n<h3 id=\"new-enum-assignability-restrictions\" style=\"position:relative;\"><a href=\"#new-enum-assignability-restrictions\" aria-label=\"new enum assignability restrictions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New Enum Assignability Restrictions</h3>\n<p>When two enums have the same declared names and enum member names, they were previously always considered compatible;\nhowever, when the values were known, TypeScript would silently allow them to have differing values.</p>\n<p>TypeScript 5.4 tightens this restriction by requiring the values to be identical when they are known.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">First</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Second</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">First</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Second</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Both used to be compatible - no longer the case,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// TypeScript errors with something like:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//  Each declaration of 'SomeEnum.B' differs in its value, where '1' was expected but '2' was given.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Additionally, there are new restrictions for when one of the enum members does not have a statically known value.\nIn these cases, the other enum must at least be implicitly numeric (e.g. it has no statically resolved initializer), or it is explicitly numeric (meaning TypeScript could resolve the value to something numeric).\nPractically speaking, what this means is that string enum members are only ever compatible with other string enums of the same value.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">First</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Second</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">A</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0070C1\">B</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"some known string\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">First</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Second</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeEnum</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Both used to be compatible - no longer the case,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// TypeScript errors with something like:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//  One value of 'SomeEnum.B' is the string '\"some known string\"', and the other is assumed to be an unknown numeric value.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/55924\">see the pull request that introduced this change</a>.</p>\n<h3 id=\"name-restrictions-on-enum-members\" style=\"position:relative;\"><a href=\"#name-restrictions-on-enum-members\" aria-label=\"name restrictions on enum members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Name Restrictions on Enum Members</h3>\n<p>TypeScript no longer allows enum members to use the names <code>Infinity</code>, <code>-Infinity</code>, or <code>NaN</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// Errors on all of these:</span></div><div class='line'><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #008000\">//  An enum member cannot have a numeric name.</span></div><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">Infinity</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"-Infinity\"</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">NaN</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56161\">See more details here</a>.</p>\n<h3 id=\"better-mapped-type-preservation-over-tuples-with-any-rest-elements\" style=\"position:relative;\"><a href=\"#better-mapped-type-preservation-over-tuples-with-any-rest-elements\" aria-label=\"better mapped type preservation over tuples with any rest elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better Mapped Type Preservation Over Tuples with <code>any</code> Rest Elements</h3>\n<p>Previously, applying a mapped type with <code>any</code> into a tuple would create an <code>any</code> element type.\nThis is undesirable and is now fixed.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">, ...([] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">)])</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">head</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];       </span><span style=\"color: #008000\">// 5.3: any, 5.4: string</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">tail</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">slice</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 5.3 any, 5.4: any[]</span></div><div class='line'><span style=\"color: #000000\">    });</span></div></code></div></pre>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/pull/57031\">the fix</a> along with <a href=\"https://github.com/microsoft/TypeScript/issues/57389\">the follow-on discussion around behavioral changes</a> and <a href=\"https://github.com/microsoft/TypeScript/issues/57389\">further tweaks</a>.</p>\n<h3 id=\"emit-changes\" style=\"position:relative;\"><a href=\"#emit-changes\" aria-label=\"emit changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Emit Changes</h3>\n<p>While not a breaking change per se, developers may have implicitly taken dependencies on TypeScript’s JavaScript or declaration emit outputs.\nThe following are notable changes.</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/55820\">Preserve type parameter names more often when shadowed</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/56296\">Move complex parameter lists of async function into downlevel generator body</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/57020\">Do not remove binding alias in function declarations</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/56395\">ImportAttributes should go through the same emit phases when in an ImportTypeNode</a></li>\n</ul>","headings":[{"value":"Preserved Narrowing in Closures Following Last Assignments","depth":2},{"value":"The NoInfer Utility Type","depth":2},{"value":"Object.groupBy and Map.groupBy","depth":2},{"value":"Support for require() calls in --moduleResolution bundler and --module preserve","depth":2},{"value":"Checked Import Attributes and Assertions","depth":2},{"value":"Quick Fix for Adding Missing Parameters","depth":2},{"value":"Upcoming Changes from TypeScript 5.0 Deprecations","depth":2},{"value":"Notable Behavioral Changes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"More Accurate Conditional Type Constraints","depth":3},{"value":"More Aggressive Reduction of Intersections Between Type Variables and Primitive Types","depth":3},{"value":"Improved Checking Against Template Strings with Interpolations","depth":3},{"value":"Errors When Type-Only Imports Conflict with Local Values","depth":3},{"value":"New Enum Assignability Restrictions","depth":3},{"value":"Name Restrictions on Enum Members","depth":3},{"value":"Better Mapped Type Preservation Over Tuples with any Rest Elements","depth":3},{"value":"Emit Changes","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-4.html","title":"TypeScript 5.4","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.4 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.4","slug":"/docs/handbook/release-notes/typescript-5-4.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.4.md","previousID":null,"nextID":null,"lang":"en","modifiedTime":"2025-02-04T15:00:58.031Z"}},"staticQueryHashes":[],"slicesMap":{}}
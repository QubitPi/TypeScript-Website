{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-5.html","result":{"data":{"markdownRemark":{"id":"fc238bd6-d661-54a5-857a-6493511153b5","excerpt":"Inferred Type Predicates This section was written by Dan Vanderkam, who implemented this feature in TypeScript 5.5. Thanks Dan! TypeScript’s control flow…","html":"<h2 id=\"inferred-type-predicates\" style=\"position:relative;\"><a href=\"#inferred-type-predicates\" aria-label=\"inferred type predicates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inferred Type Predicates</h2>\n<p><em>This section was written by <a href=\"https://github.com/danvk\">Dan Vanderkam</a>, who <a href=\"https://github.com/microsoft/TypeScript/pull/57465\">implemented this feature in TypeScript 5.5</a>. Thanks Dan!</em></p>\n<p>TypeScript’s control flow analysis does a great job of tracking how the type of a variable changes as it moves through your code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bird</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">commonName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">scientificName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">sing</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Maps country names -&gt; national bird.</span></div><div class='line'><span style=\"color: #008000\">// Not all nations have official birds (looking at you, Canada!)</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">nationalBirds</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Bird</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeNationalBirdCall</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">bird</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">nationalBirds</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// bird has a declared type of Bird | undefined</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sing</span><span style=\"color: #000000\">();  </span><span style=\"color: #008000\">// bird has type Bird inside the if statement</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// bird has type undefined here.</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>By making you handle the <code>undefined</code> case, TypeScript pushes you to write more robust code.</p>\n<p>In the past, this sort of type refinement was more difficult to apply to arrays. This would have been an error in all previous versions of TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeBirdCalls</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// birds: (Bird | undefined)[]</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">birds</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">countries</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nationalBirds</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">bird</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">birds</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sing</span><span style=\"color: #000000\">();  </span><span style=\"color: #008000\">// error: 'bird' is possibly 'undefined'.</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This code is perfectly fine: we’ve filtered all the <code>undefined</code> values out of the list.\r\nBut TypeScript hasn’t been able to follow along.</p>\n<p>With TypeScript 5.5, the type checker is fine with this code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">makeBirdCalls</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">countries</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// birds: Bird[]</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">birds</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">countries</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nationalBirds</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">country</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">bird</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">birds</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sing</span><span style=\"color: #000000\">();  </span><span style=\"color: #008000\">// ok!</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note the more precise type for <code>birds</code>.</p>\n<p>This works because TypeScript now infers a <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">type predicate</a> for the <code>filter</code> function.\r\nYou can see what’s going on more clearly by pulling it out into a standalone function:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// function isBirdReal(bird: Bird | undefined): bird is Bird</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isBirdReal</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Bird</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bird</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>bird is Bird</code> is the type predicate.\r\nIt means that, if the function returns <code>true</code>, then it’s a <code>Bird</code> (if the function returns <code>false</code> then it’s <code>undefined</code>).\r\nThe type declarations for <code>Array.prototype.filter</code> know about type predicates, so the net result is that you get a more precise type and the code passes the type checker.</p>\n<p>TypeScript will infer that a function returns a type predicate if these conditions hold:</p>\n<ol>\n<li>The function does not have an explicit return type or type predicate annotation.</li>\n<li>The function has a single <code>return</code> statement and no implicit returns.</li>\n<li>The function does not mutate its parameter.</li>\n<li>The function returns a <code>boolean</code> expression that’s tied to a refinement on the parameter.</li>\n</ol>\n<p>Generally this works how you’d expect.\r\nHere’s a few more examples of inferred type predicates:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// const isNumber: (x: unknown) =&gt; x is number</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isNumber</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">'number'</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// const isNonNullish: &lt;T&gt;(x: T) =&gt; x is NonNullable&lt;T&gt;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isNonNullish</span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">,&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> != </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Previously, TypeScript would have just inferred that these functions return <code>boolean</code>.\r\nIt now infers signatures with type predicates like <code>x is number</code> or <code>x is NonNullable&#x3C;T></code>.</p>\n<p>Type predicates have “if and only if” semantics.\r\nIf a function returns <code>x is T</code>, then it means that:</p>\n<ol>\n<li>If the function returns <code>true</code> then <code>x</code> has the type <code>T</code>.</li>\n<li>If the function returns <code>false</code> then <code>x</code> does <em>not</em> have type <code>T</code>.</li>\n</ol>\n<p>If you’re expecting a type predicate to be inferred but it’s not, then you may be running afoul of the second rule. This often comes up with “truthiness” checks:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getClassroomAverage</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">students</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">allScores</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">studentScores</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">students</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">student</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">allScores</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">student</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">score</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> !!</span><span style=\"color: #001080\">score</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">studentScores</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">reduce</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) / </span><span style=\"color: #001080\">studentScores</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error: Object is possibly 'undefined'.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript did not infer a type predicate for <code>score => !!score</code>, and rightly so: if this returns <code>true</code> then <code>score</code> is a <code>number</code>.\r\nBut if it returns <code>false</code>, then <code>score</code> could be either <code>undefined</code> or a <code>number</code> (specifically, <code>0</code>).\r\nThis is a real bug: if any student got a zero on the test, then filtering out their score will skew the average upwards.\r\nFewer will be above average and more will be sad!</p>\n<p>As with the first example, it’s better to explicitly filter out <code>undefined</code> values:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getClassroomAverage</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">students</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">allScores</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">studentScores</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">students</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">student</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">allScores</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">student</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">score</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">score</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">studentScores</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">reduce</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) / </span><span style=\"color: #001080\">studentScores</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;  </span><span style=\"color: #008000\">// ok!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>A truthiness check <em>will</em> infer a type predicate for object types, where there’s no ambiguity.\r\nRemember that functions must return a <code>boolean</code> to be a candidate for an inferred type predicate: <code>x => !!x</code> might infer a type predicate, but <code>x => x</code> definitely won’t.</p>\n<p>Explicit type predicates continue to work exactly as before.\r\nTypeScript will not check whether it would infer the same type predicate.\r\nExplicit type predicates (“is”) are no safer than a type assertion (“as”).</p>\n<p>It’s possible that this feature will break existing code if TypeScript now infers a more precise type than you want. For example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// Previously, nums: (number | null)[]</span></div><div class='line'><span style=\"color: #008000\">// Now, nums: number[]</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">nums</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">nums</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// ok in TS 5.4, error in TS 5.5</span></div></code></div></pre>\n<p>The fix is to tell TypeScript the type that you want using an explicit type annotation:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">nums</span><span style=\"color: #000000\">: (</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">)[] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">nums</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// ok in all versions</span></div></code></div></pre>\n<p>For more information, check out the <a href=\"https://github.com/microsoft/TypeScript/pull/57465\">implementing pull request</a> and <a href=\"https://effectivetypescript.com/2024/04/16/inferring-a-type-predicate/\">Dan’s blog post about implementing this feature</a>.</p>\n<h2 id=\"control-flow-narrowing-for-constant-indexed-accesses\" style=\"position:relative;\"><a href=\"#control-flow-narrowing-for-constant-indexed-accesses\" aria-label=\"control flow narrowing for constant indexed accesses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow Narrowing for Constant Indexed Accesses</h2>\n<p>TypeScript is now able to narrow expressions of the form <code>obj[key]</code> when both <code>obj</code> and <code>key</code> are effectively constant.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Record</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt;, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">] === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Now okay, previously was error</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In the above, neither <code>obj</code> nor <code>key</code> are ever mutated, so TypeScript can narrow the type of <code>obj[key]</code> to <code>string</code> after the <code>typeof</code> check.\r\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/57847\">see the implementing pull request here</a>.</p>\n<h2 id=\"the-jsdoc-import-tag\" style=\"position:relative;\"><a href=\"#the-jsdoc-import-tag\" aria-label=\"the jsdoc import tag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The JSDoc <code>@import</code> Tag</h2>\n<p>Today, if you want to import something only for type-checking in a JavaScript file, it is cumbersome.\r\nJavaScript developers can’t simply import a type named <code>SomeType</code> if it’s not there at runtime.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// ./some-module.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ./index.js</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ❌ runtime error!</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>SomeType</code> won’t exist at runtime, so the import will fail.\r\nDevelopers can instead use a namespace import instead.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">someModule</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-module\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{someModule.SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>But <code>./some-module</code> is still imported at runtime - which might also not be desirable.</p>\n<p>To avoid this, developers typically had to use <code>import(...)</code> types in JSDoc comments.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{import(\"./some-module\").SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>If you wanted to reuse the same type in multiple places, you could use a <code>typedef</code> to avoid repeating the import.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{import(\"./some-module\").SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SomeType</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This helps with local uses of <code>SomeType</code>, but it gets repetitive for many imports and can be a bit verbose.</p>\n<p>That’s why TypeScript now supports a new <code>@import</code> comment tag that has the same syntax as ECMAScript imports.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@import</span><span style=\"color: #008000\"> { SomeType } from \"some-module\" */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here, we used named imports.\r\nWe could also have written our import as a namespace import.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@import</span><span style=\"color: #008000\"> * as someModule from \"some-module\" */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{someModule.SomeType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">myValue</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomething</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Because these are just JSDoc comments, they don’t affect runtime behavior at all.</p>\n<p>We would like to extend a big thanks to <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a> who contributed <a href=\"https://github.com/microsoft/TypeScript/pull/57207\">this change</a>!</p>\n<h2 id=\"regular-expression-syntax-checking\" style=\"position:relative;\"><a href=\"#regular-expression-syntax-checking\" aria-label=\"regular expression syntax checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regular Expression Syntax Checking</h2>\n<p>Until now, TypeScript has typically skipped over most regular expressions in code.\r\nThis is because regular expressions technically have an extensible grammar and TypeScript never made any effort to compile regular expressions to earlier versions of JavaScript.\r\nStill, this meant that lots of common problems would go undiscovered in regular expressions, and they would either turn into errors at runtime, or silently fail.</p>\n<p>But TypeScript now does basic syntax checking on regular expressions!</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myRegex</span><span style=\"color: #000000\"> = </span><span style=\"color: #811F3F\">/@robot</span><span style=\"color: #D16969\">(</span><span style=\"color: #811F3F\">\\s</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">(</span><span style=\"color: #811F3F\">please</span><span style=\"color: #EE0000\">|</span><span style=\"color: #811F3F\">immediately</span><span style=\"color: #D16969\">))</span><span style=\"color: #811F3F\">)</span><span style=\"color: #000000\">?</span><span style=\"color: #811F3F\"> do some task/</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                                            ~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Unexpected ')'. Did you mean to escape it with backslash?</span></div></code></div></pre>\n<p>This is a simple example, but this checking can catch a lot of common mistakes.\r\nIn fact, TypeScript’s checking goes slightly beyond syntactic checks.\r\nFor instance, TypeScript can now catch issues around backreferences that don’t exist.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myRegex</span><span style=\"color: #000000\"> =</span><span style=\"color: #811F3F\"> /@typedef </span><span style=\"color: #EE0000\">\\{</span><span style=\"color: #811F3F\">import</span><span style=\"color: #EE0000\">\\(</span><span style=\"color: #D16969\">(</span><span style=\"color: #811F3F\">.</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\)\\.</span><span style=\"color: #D16969\">([</span><span style=\"color: #811F3F\">a-zA-Z_</span><span style=\"color: #D16969\">]</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\}</span><span style=\"color: #811F3F\"> </span><span style=\"color: #0000FF\">\\3</span><span style=\"color: #811F3F\">/</span><span style=\"color: #0000FF\">u</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                                                        ~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// This backreference refers to a group that does not exist.</span></div><div class='line'><span style=\"color: #008000\">// There are only 2 capturing groups in this regular expression.</span></div></code></div></pre>\n<p>The same applies to named capturing groups.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myRegex</span><span style=\"color: #000000\"> =</span><span style=\"color: #811F3F\"> /@typedef </span><span style=\"color: #EE0000\">\\{</span><span style=\"color: #811F3F\">import</span><span style=\"color: #EE0000\">\\(</span><span style=\"color: #D16969\">(?&lt;</span><span style=\"color: #001080\">importPath</span><span style=\"color: #D16969\">&gt;</span><span style=\"color: #811F3F\">.</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\)\\.</span><span style=\"color: #D16969\">(?&lt;</span><span style=\"color: #001080\">importedEntity</span><span style=\"color: #D16969\">&gt;[</span><span style=\"color: #811F3F\">a-zA-Z_</span><span style=\"color: #D16969\">]</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\}</span><span style=\"color: #811F3F\"> </span><span style=\"color: #0000FF\">\\k&lt;</span><span style=\"color: #001080\">namedImport</span><span style=\"color: #0000FF\">&gt;</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                                                                                        ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// There is no capturing group named 'namedImport' in this regular expression.</span></div></code></div></pre>\n<p>TypeScript’s checking is now also aware of when certain RegExp features are used when newer than your target version of ECMAScript.\r\nFor example, if we use named capturing groups like the above in an ES5 target, we’ll get an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myRegex</span><span style=\"color: #000000\"> =</span><span style=\"color: #811F3F\"> /@typedef </span><span style=\"color: #EE0000\">\\{</span><span style=\"color: #811F3F\">import</span><span style=\"color: #EE0000\">\\(</span><span style=\"color: #D16969\">(?&lt;</span><span style=\"color: #001080\">importPath</span><span style=\"color: #D16969\">&gt;</span><span style=\"color: #811F3F\">.</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\)\\.</span><span style=\"color: #D16969\">(?&lt;</span><span style=\"color: #001080\">importedEntity</span><span style=\"color: #D16969\">&gt;[</span><span style=\"color: #811F3F\">a-zA-Z_</span><span style=\"color: #D16969\">]</span><span style=\"color: #000000\">+</span><span style=\"color: #D16969\">)</span><span style=\"color: #EE0000\">\\}</span><span style=\"color: #811F3F\"> </span><span style=\"color: #0000FF\">\\k&lt;</span><span style=\"color: #001080\">importedEntity</span><span style=\"color: #0000FF\">&gt;</span><span style=\"color: #811F3F\">/</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//                                  ~~~~~~~~~~~~         ~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// error!</span></div><div class='line'><span style=\"color: #008000\">// Named capturing groups are only available when targeting 'ES2018' or later.</span></div></code></div></pre>\n<p>The same is true for certain regular expression flags as well.</p>\n<p>Note that TypeScript’s regular expression support is limited to regular expression <em>literals</em>.\r\nIf you try calling <code>new RegExp</code> with a string literal, TypeScript will not check the provided string.</p>\n<p>We would like to thank <a href=\"https://github.com/graphemecluster/\">GitHub user graphemecluster</a> who iterated a ton with us <a href=\"https://github.com/microsoft/TypeScript/pull/55600\">to get this feature into TypeScript</a>.</p>\n<h2 id=\"support-for-new-ecmascript-set-methods\" style=\"position:relative;\"><a href=\"#support-for-new-ecmascript-set-methods\" aria-label=\"support for new ecmascript set methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for New ECMAScript <code>Set</code> Methods</h2>\n<p>TypeScript 5.5 declares <a href=\"https://github.com/tc39/proposal-set-methods\">new proposed methods for the ECMAScript <code>Set</code> type</a>.</p>\n<p>Some of these methods, like <code>union</code>, <code>intersection</code>, <code>difference</code>, and <code>symmetricDifference</code>, take another <code>Set</code> and return a new <code>Set</code> as the result.\r\nThe other methods, <code>isSubsetOf</code>, <code>isSupersetOf</code>, and <code>isDisjointFrom</code>, take another <code>Set</code> and return a <code>boolean</code>.\r\nNone of these methods mutate the original <code>Set</code>s.</p>\n<p>Here’s a quick example of how you might use these methods and how they behave:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"apples\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"bananas\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"pears\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"oranges\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"apples\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"bananas\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">applesAndOranges</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"apples\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"oranges\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"oranges\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// union</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(4) {'apples', 'bananas', 'pears', 'oranges'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">union</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(3) {'apples', 'bananas', 'oranges'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">union</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// intersection</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(2) {'apples', 'bananas'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">intersection</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(0) {}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">intersection</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(1) {'apples'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">intersection</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndOranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// difference</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(3) {'apples', 'bananas', 'pears'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">difference</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(2) {'pears', 'oranges'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">difference</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(1) {'bananas'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">difference</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndOranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// symmetricDifference</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Set(2) {'bananas', 'oranges'}</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">symmetricDifference</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndOranges</span><span style=\"color: #000000\">)); </span><span style=\"color: #008000\">// no apples</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// isDisjointFrom</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isDisjointFrom</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isDisjointFrom</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndOranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isDisjointFrom</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isDisjointFrom</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// isSubsetOf</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSubsetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSubsetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSubsetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSubsetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSubsetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'><span style=\"color: #008000\">// isSupersetOf</span></div><div class='line'><span style=\"color: #008000\">////</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSupersetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSupersetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">applesAndBananas</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSupersetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">oranges</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSupersetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">emptySet</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isSupersetOf</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fruits</span><span style=\"color: #000000\">));</span></div></code></div></pre>\n<p>We’d like to thank <a href=\"https://github.com/bakkot\">Kevin Gibbons</a> who not only co-championed the feature in ECMAScript, but <a href=\"https://github.com/microsoft/TypeScript/pull/57230\">also provided the declarations for <code>Set</code>, <code>ReadonlySet</code>, and <code>ReadonlySetLike</code> in TypeScript</a>!</p>\n<h2 id=\"isolated-declarations\" style=\"position:relative;\"><a href=\"#isolated-declarations\" aria-label=\"isolated declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolated Declarations</h2>\n<p><em>This section was co-authored by <a href=\"https://github.com/robpalme\">Rob Palmer</a> who supported the design of isolated declarations.</em></p>\n<p>Declaration files (a.k.a. <code>.d.ts</code> files) describe the shape of existing libraries and modules to TypeScript.\r\nThis lightweight description includes the library’s type signatures and excludes implementation details such as the function bodies.\r\nThey are published so that TypeScript can efficiently check your usage of a library without needing to analyse the library itself.\r\nWhilst it is possible to handwrite declaration files, if you are authoring typed code, it’s much safer and simpler to let TypeScript generate them automatically from source files using <code>--declaration</code>.</p>\n<p>The TypeScript compiler and its APIs have always had the job of generating declaration files;\r\nhowever, there are some use-cases where you might want to use other tools, or where the traditional build process doesn’t scale.</p>\n<h3 id=\"use-case-faster-declaration-emit-tools\" style=\"position:relative;\"><a href=\"#use-case-faster-declaration-emit-tools\" aria-label=\"use case faster declaration emit tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use-case: Faster Declaration Emit Tools</h3>\n<p>Imagine if you wanted to create a faster tool to generate declaration files, perhaps as part of a publishing service or a new bundler.\r\nWhilst there is a thriving ecosystem of blazing fast tools that can turn TypeScript into JavaScript, the same is not true for turning TypeScript into declaration files.\r\nThe reason is that TypeScript’s inference allows us to write code without explicitly declaring types, meaning declaration emit can be complex.</p>\n<p>Let’s consider a simple example of a function that adds two imported variables.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// util.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">one</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"2\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// add.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">one</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./util\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">one</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">two</span><span style=\"color: #000000\">; }</span></div></code></div></pre>\n<p>Even if the only thing we want to do is generate <code>add.d.ts</code>, TypeScript needs to crawl into another imported file (<code>util.ts</code>), infer that the type of <code>one</code> and <code>two</code> are strings, and then calculate that the <code>+</code> operator on two strings will lead to a <code>string</code> return type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// add.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>While this inference is important for the developer experience, it means that tools that want to generate declaration files would need to replicate parts of the type-checker including inference and the ability to resolve module specifiers to follow the imports.</p>\n<h3 id=\"use-case-parallel-declaration-emit-and-parallel-checking\" style=\"position:relative;\"><a href=\"#use-case-parallel-declaration-emit-and-parallel-checking\" aria-label=\"use case parallel declaration emit and parallel checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use-case: Parallel Declaration Emit and Parallel Checking</h3>\n<p>Imagine if you had a monorepo containing many projects and a multi-core CPU that just wished it could help you check your code faster.\r\nWouldn’t it be great if we could check all those projects at the same time by running each project on a different core?</p>\n<p>Unfortunately we don’t have the freedom to do all the work in parallel.\r\nThe reason is that we have to build those projects in dependency order, because each project is checking against the declaration files of their dependencies.\r\nSo we must build the dependency first to generate the declaration files.\r\nTypeScript’s project references feature works the same way, building the set of projects in “topological” dependency order.</p>\n<p>As an example, if we have two projects called <code>backend</code> and <code>frontend</code>, and they both depend on a project called <code>core</code>, TypeScript can’t start type-checking either <code>frontend</code> or <code>backend</code> until <code>core</code> has been built and its declaration files have been generated.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2024/04/5-5-beta-isolated-declarations-deps.png\" alt=\"frontend and backend point to core, other stuff might point to each of those\"></p>\n<p>In the above graph, you can see that we have a bottleneck.\r\nWhilst we can build <code>frontend</code> and <code>backend</code> in parallel, we need to first wait for <code>core</code> to finish building before either can start.</p>\n<p>How could we improve upon this?\r\nWell, if a fast tool could generate all those declaration files for <code>core</code> <em>in parallel</em>, TypeScript then could immediately follow that by type-checking <code>core</code>, <code>frontend</code>, and <code>backend</code> also <em>in parallel</em>.</p>\n<h3 id=\"solution-explicit-types\" style=\"position:relative;\"><a href=\"#solution-explicit-types\" aria-label=\"solution explicit types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution: Explicit Types!</h3>\n<p>The common requirement in both use-cases is that we need a cross-file type-checker to generate declaration files.\r\nWhich is a lot to ask from the tooling community.</p>\n<p>As a more complex example, if we want a declaration file for the following code…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">add</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./add\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>…we would need to generate a signature for <code>foo</code>.\r\nWell that requires looking at the implementation of <code>foo</code>.\r\n<code>foo</code> just returns <code>x</code>, so getting the type of <code>x</code>  requires looking at the implementation of <code>add</code>.\r\nBut that might require looking at the implementation of <code>add</code>’s dependencies, and so on.\r\nWhat we’re seeing here is that generating declaration files requires a whole lot of logic to figure out the types of different places that might not even be local to the current file.</p>\n<p>Still, for developers looking for fast iteration time and fully parallel builds, there is another way of thinking about this problem.\r\nA declaration file only requires the types of the public API of a module - in other words, the types of the things that are exported.\r\nIf, controversially, developers are willing to explicitly write out the types of the things they export, tools could generate declaration files without needing to look at the implementation of the module - and without reimplementing a full type-checker.</p>\n<p>This is where the new <code>--isolatedDeclarations</code> option comes in.\r\n<code>--isolatedDeclarations</code> reports errors when a module can’t be reliably transformed without a type-checker.\r\nMore plainly, it makes TypeScript report errors if you have a file that isn’t sufficiently annotated on its exports.</p>\n<p>That means in the above example, we would see an error like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #008000\">//              ~~~</span></div><div class='line'><span style=\"color: #008000\">// error! Function must have an explicit</span></div><div class='line'><span style=\"color: #008000\">// return type annotation with --isolatedDeclarations.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"why-are-errors-desirable\" style=\"position:relative;\"><a href=\"#why-are-errors-desirable\" aria-label=\"why are errors desirable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why are errors desirable?</h3>\n<p>Because it means that TypeScript can</p>\n<ol>\n<li>Tell us up-front whether other tools will have issues with generating declaration files</li>\n<li>Provide a quick fix to help add these missing annotations.</li>\n</ol>\n<p>This mode doesn’t require annotations <em>everywhere</em> though.\r\nFor locals, these can be ignored, since they don’t affect the public API.\r\nFor example, the following code would <strong>not</strong> produce an error:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">add</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./add\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">add</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"2\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// no error on 'x', it's not exported.</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>There are also certain expressions where the type is “trivial” to calculate.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// No error on 'x'.</span></div><div class='line'><span style=\"color: #008000\">// It's trivial to calculate the type is 'number'</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// No error on 'y'.</span></div><div class='line'><span style=\"color: #008000\">// We can get the type from the return expression.</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">y</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// No error on 'z'.</span></div><div class='line'><span style=\"color: #008000\">// The type assertion makes it clear what the type is.</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">z</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">max</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">y</span><span style=\"color: #000000\">()) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"using-isolateddeclarations\" style=\"position:relative;\"><a href=\"#using-isolateddeclarations\" aria-label=\"using isolateddeclarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using <code>isolatedDeclarations</code></h3>\n<p><code>isolatedDeclarations</code> requires that either the <code>declaration</code> or <code>composite</code> flags are also set.</p>\n<p>Note that <code>isolatedDeclarations</code> does not change how TypeScript performs emit - just how it reports errors.\r\nImportantly, and similar to <code>isolatedModules</code>, enabling the feature in TypeScript won’t immediately bring about the potential benefits discussed here.\r\nSo please be patient and look forward to future developments in this space.\r\nKeeping tool authors in mind, we should also recognize that today, not all of TypeScript’s declaration emit can be easily replicated by other tools wanting to use it as a guide.\r\nThat’s something we’re actively working on improving.</p>\n<p>On top of this, isolated declarations are still a new feature, and we’re actively working on improving the experience.\r\nSome scenarios, like using computed property declarations in classes and object literals, are not <em>yet</em> supported under <code>isolatedDeclarations</code>.\r\nKeep an eye on this space, and feel free to provide us with feedback.</p>\n<p>We also feel it is worth calling out that <code>isolatedDeclarations</code> should be adopted on a case-by-case basis.\r\nThere are some developer ergonomics that are lost when using <code>isolatedDeclarations</code>, and thus it may not be the right choice if your setup is not leveraging the two scenarios mentioned earlier.\r\nFor others, the work on <code>isolatedDeclarations</code> has already uncovered many optimizations and opportunities to unlock different parallel build strategies.\r\nIn the meantime, if you’re willing to make the trade-offs, we believe <code>isolatedDeclarations</code> can be a powerful tool to speed up your build process as external tooling becomes more widely available.</p>\n<p>For more information, read up on the <a href=\"https://github.com/microsoft/TypeScript/issues/58944\">Isolated Declarations: State of the Feature</a> discussion on the TypeScript issue tracker.</p>\n<h3 id=\"credit\" style=\"position:relative;\"><a href=\"#credit\" aria-label=\"credit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Credit</h3>\n<p>Work on <code>isolatedDeclarations</code> has been a long-time collaborative effort between the TypeScript team and the infrastructure and tooling teams within Bloomberg and Google.\r\nIndividuals like Hana Joo from Google who implemented <a href=\"https://github.com/microsoft/TypeScript/pull/58260\">the quick fix for isolated declaration errors</a> (more on that soon), as well as Ashley Claymore, Jan Kühle, Lisa Velden, Rob Palmer, and Thomas Chetwin have been involved in discussion, specification, and implementation for many months.\r\nBut we feel it is specifically worth calling out the tremendous amount of work provided by <a href=\"https://github.com/dragomirtitian\">Titian Cernicova-Dragomir</a> from Bloomberg.\r\nTitian has been instrumental in driving the implementation of <code>isolatedDeclarations</code> and has been a contributor to the TypeScript project for years prior.</p>\n<p>While the feature involved many changes, you can see <a href=\"https://github.com/microsoft/TypeScript/pull/58201\">the core work for Isolated Declarations here</a>.</p>\n<h2 id=\"the-configdir-template-variable-for-configuration-files\" style=\"position:relative;\"><a href=\"#the-configdir-template-variable-for-configuration-files\" aria-label=\"the configdir template variable for configuration files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>${configDir}</code> Template Variable for Configuration Files</h2>\n<p>It’s common in many codebases to reuse a shared <code>tsconfig.json</code> file that acts as a “base” for other configuration files.\r\nThis is done by using the <code>extends</code> field in a <code>tsconfig.json</code> file.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"extends\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"../../tsconfig.base.json\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One of the issues with this is that all paths in the <code>tsconfig.json</code> file are relative to the location of the file itself.\r\nThis means that if you have a shared <code>tsconfig.base.json</code> file that is used by multiple projects, relative paths often won’t be useful in the derived projects.\r\nFor example, imagine the following <code>tsconfig.base.json</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"./node_modules/@types\"</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"./custom-types\"</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>If author’s intent was that every <code>tsconfig.json</code> that extends this file should</p>\n<ol>\n<li>output to a <code>dist</code> directory relative to the derived <code>tsconfig.json</code> , and</li>\n<li>have a <code>custom-types</code> directory relative to the derived <code>tsconfig.json</code>,</li>\n</ol>\n<p>then this would not work.\r\nThe <code>typeRoots</code> paths would be relative to the location of the shared <code>tsconfig.base.json</code> file, not the project that extends it.\r\nEach project that extends this shared file would need to declare its own <code>outDir</code> and <code>typeRoots</code> with identical contents.\r\nThis could be frustrating and hard to keep in sync between projects, and while the example above is using <code>typeRoots</code>, this is a common problem for <code>paths</code> and other options.</p>\n<p>To solve this, TypeScript 5.5 introduces a new template variable <code>${configDir}</code>.\r\nWhen <code>${configDir}</code> is written in certain path fields of a <code>tsconfig.json</code> or <code>jsconfig.json</code> files, this variable is substituted with the containing directory of the configuration file in a given compilation.\r\nThis means that the above <code>tsconfig.base.json</code> could be rewritten as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"${configDir}/node_modules/@types\"</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"${configDir}/custom-types\"</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"${configDir}/dist\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Now, when a project extends this file, the paths will be relative to the derived <code>tsconfig.json</code>, not the shared <code>tsconfig.base.json</code> file.\r\nThis makes it easier to share configuration files across projects and ensures that the configuration files are more portable.</p>\n<p>If you intend to make a <code>tsconfig.json</code> file extendable, consider if a <code>./</code> should instead be written with <code>${configDir}</code>.</p>\n<p>For more information, see <a href=\"https://github.com/microsoft/TypeScript/issues/57485\">the proposal issue</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/58042\">the implementing pull request</a>.</p>\n<h2 id=\"consulting-packagejson-dependencies-for-declaration-file-generation\" style=\"position:relative;\"><a href=\"#consulting-packagejson-dependencies-for-declaration-file-generation\" aria-label=\"consulting packagejson dependencies for declaration file generation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consulting <code>package.json</code> Dependencies for Declaration File Generation</h2>\n<p>Previously, TypeScript would often issue an error message like</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: undefined\">The inferred type of \"X\" cannot be named without a reference to \"Y\". This is likely not portable. A type annotation is necessary.</span></div></code></div></pre>\n<p>This was often due to TypeScript’s declaration file generation finding itself in the contents of files that were never explicitly imported in a program.\r\nGenerating an import to such a file could be risky if the path ended up being relative.\r\nStill, for codebases with explicit dependencies in the <code>dependencies</code> (or <code>peerDependencies</code> and <code>optionalDependencies</code>) of a <code>package.json</code>, generating such an import should be safe under certain resolution modes.\r\nSo in TypeScript 5.5, we’re more lenient when that’s the case, and many occurrences of this error should disappear.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/issues/42873\">See this pull request</a> for more details on the change.</p>\n<h2 id=\"editor-and-watch-mode-reliability-improvements\" style=\"position:relative;\"><a href=\"#editor-and-watch-mode-reliability-improvements\" aria-label=\"editor and watch mode reliability improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editor and Watch-Mode Reliability Improvements</h2>\n<p>TypeScript has either added some new functionality or fixed existing logic that makes <code>--watch</code> mode and TypeScript’s editor integration feel more reliable.\r\nThat should hopefully translate to fewer TSServer/editor restarts.</p>\n<h3 id=\"correctly-refresh-editor-errors-in-configuration-files\" style=\"position:relative;\"><a href=\"#correctly-refresh-editor-errors-in-configuration-files\" aria-label=\"correctly refresh editor errors in configuration files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Correctly Refresh Editor Errors in Configuration Files</h3>\n<p>TypeScript can generate errors for <code>tsconfig.json</code> files;\r\nhowever, those errors are actually generated from loading a project, and editors typically don’t directly request those errors for <code>tsconfig.json</code> files.\r\nWhile this sounds like a technical detail, it means that when all errors issued in a <code>tsconfig.json</code> are fixed, TypeScript doesn’t issue a new fresh empty set of errors, and users are left with stale errors unless they reload their editor.</p>\n<p>TypeScript 5.5 now intentionally issues an event to clear these out.\r\n<a href=\"https://github.com/microsoft/TypeScript/pull/58120\">See more here</a>.</p>\n<h3 id=\"better-handling-for-deletes-followed-by-immediate-writes\" style=\"position:relative;\"><a href=\"#better-handling-for-deletes-followed-by-immediate-writes\" aria-label=\"better handling for deletes followed by immediate writes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better Handling for Deletes Followed by Immediate Writes</h3>\n<p>Instead of overwriting files, some tools will opt to delete them and then create new files from scratch.\r\nThis is the case when running <code>npm ci</code>, for instance.</p>\n<p>While this can be efficient for those tools, it can be problematic for TypeScript’s editor scenarios where deleting a watched might dispose of it and all of its transitive dependencies.\r\nDeleting and creating a file in quick succession could lead to TypeScript tearing down an entire project and then rebuilding it from scratch.</p>\n<p>TypeScript 5.5 now has a more nuanced approach by keeping parts of a deleted project around until it picks up on a new creation event.\r\nThis should make operations like <code>npm ci</code> work a lot better with TypeScript.\r\nSee <a href=\"https://github.com/microsoft/TypeScript/pull/57492\">more information on the approach here</a>.</p>\n<h3 id=\"symlinks-are-tracked-in-failed-resolutions\" style=\"position:relative;\"><a href=\"#symlinks-are-tracked-in-failed-resolutions\" aria-label=\"symlinks are tracked in failed resolutions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symlinks are Tracked in Failed Resolutions</h3>\n<p>When TypeScript fails to resolve a module, it will still need to watch for any failed lookup paths in case the module is added later.\r\nPreviously this was not done for symlinked directories, which could cause reliability issues in monorepo-like scenarios when a build occurred in one project but was not witnessed in the other.\r\nThis should be fixed in TypeScript 5.5, and means you won’t need to restart your editor as often.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/58139\">See more information here</a>.</p>\n<h3 id=\"project-references-contribute-to-auto-imports\" style=\"position:relative;\"><a href=\"#project-references-contribute-to-auto-imports\" aria-label=\"project references contribute to auto imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project References Contribute to Auto-Imports</h3>\n<p>Auto-imports no longer requires at least one explicit import to dependent projects in a project reference setup.\r\nInstead, auto-import completions should just work across anything you’ve listed in the <code>references</code> field of your <code>tsconfig.json</code>.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/55955\">See more on the implementing pull request</a>.</p>\n<h2 id=\"performance-and-size-optimizations\" style=\"position:relative;\"><a href=\"#performance-and-size-optimizations\" aria-label=\"performance and size optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance and Size Optimizations</h2>\n<h3 id=\"monomorphized-objects-in-language-service-and-public-api\" style=\"position:relative;\"><a href=\"#monomorphized-objects-in-language-service-and-public-api\" aria-label=\"monomorphized objects in language service and public api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monomorphized Objects in Language Service and Public API</h3>\n<p>In TypeScript 5.0, we ensured that our <a href=\"https://github.com/microsoft/TypeScript/pull/51682\"><code>Node</code></a> and <a href=\"https://github.com/microsoft/TypeScript/pull/51880\"><code>Symbol</code></a> objects had a consistent set of properties with a consistent initialization order.\r\nDoing so helps reduce polymorphism in different operations, which allows runtimes to fetch properties more quickly.</p>\n<p>By making this change, we witnessed impressive speed wins in the compiler;\r\nhowever, most of these changes were performed on internal allocators for our data structures.\r\nThe language service, along with TypeScript’s public API, uses a different set of allocators for certain objects.\r\nThis allowed the TypeScript compiler to be a bit leaner, as data used only for the language service would never be used in the compiler.</p>\n<p>In TypeScript 5.5, the same monomorphization work has been done for the language service and public API.\r\nWhat this means is that your editor experience, and any build tools that use the TypeScript API, will get a decent amount faster.\r\nIn fact, in our benchmarks, we’ve seen a <strong>5-8% speedup in build times</strong> when using the public TypeScript API’s allocators, and <strong>language service operations getting 10-20% faster</strong>.\r\nWhile this does imply an increase in memory, we believe that tradeoff is worth it and hope to find ways to reduce that memory overhead.\r\nThings should feel a lot snappier now.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/58045\">see the change here</a>.</p>\n<h3 id=\"monomorphized-control-flow-nodes\" style=\"position:relative;\"><a href=\"#monomorphized-control-flow-nodes\" aria-label=\"monomorphized control flow nodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monomorphized Control Flow Nodes</h3>\n<p>In TypeScript 5.5, nodes of the control flow graph have been monomorphized so that they always hold a consistent shape.\r\nBy doing so, check times will often be reduced by about 1%.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/57977\">See this change here</a>.</p>\n<h3 id=\"optimizations-on-our-control-flow-graph\" style=\"position:relative;\"><a href=\"#optimizations-on-our-control-flow-graph\" aria-label=\"optimizations on our control flow graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizations on our Control Flow Graph</h3>\n<p>In many cases, control flow analysis will traverse nodes that don’t provide any new information.\r\nWe observed that in the absence of any early termination or effects in the antecedents (or “dominators”) of certain nodes meant that those nodes could always be skipped over.\r\nAs such, TypeScript now constructs its control flow graphs to take advantage of this by linking to an earlier node that <em>does</em> provide interesting information for control flow analysis.\r\nThis yields a flatter control flow graph, which can be more efficient to traverse.\r\nThis optimization has yielded modest gains, but with up to 2% reductions in build time on certain codebases.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/58013\">read more here</a>.</p>\n<h3 id=\"skipped-checking-in-transpilemodule-and-transpiledeclaration\" style=\"position:relative;\"><a href=\"#skipped-checking-in-transpilemodule-and-transpiledeclaration\" aria-label=\"skipped checking in transpilemodule and transpiledeclaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Skipped Checking in <code>transpileModule</code> and <code>transpileDeclaration</code></h3>\n<p>TypeScript’s <code>transpileModule</code> API can be used for compiling a single TypeScript file’s contents into JavaScript.\r\nSimilarly, the <code>transpileDeclaration</code> API (see below) can be used to generate a declaration file for a single TypeScript file.\r\nOne of the issues with these APIs is that TypeScript internally would perform a full type-checking pass over the entire contents of the file before emitting the output.\r\nThis was necessary to collect certain information which would later be used for the emit phase.</p>\n<p>In TypeScript 5.5, we’ve found a way to avoid performing a full check, only lazily collecting this information as necessary, and <code>transpileModule</code> and <code>transpileDeclaration</code> both enable this functionality by default.\r\nAs a result, tools that integrate with these APIs, like <a href=\"https://www.npmjs.com/package/ts-loader\">ts-loader</a> with <code>transpileOnly</code> and <a href=\"https://www.npmjs.com/package/ts-jest\">ts-jest</a>, should see a noticeable speedup.\r\nIn our testing, <a href=\"https://github.com/microsoft/TypeScript/pull/58364#issuecomment-2138580690\">we generally witness around a 2x speed-up in build time using <code>transpileModule</code></a>.</p>\n<h3 id=\"typescript-package-size-reduction\" style=\"position:relative;\"><a href=\"#typescript-package-size-reduction\" aria-label=\"typescript package size reduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Package Size Reduction</h3>\n<p>Further leveraging <a href=\"https://devblogs.microsoft.com/typescript/typescripts-migration-to-modules/\">our transition to modules in 5.0</a>, we’ve significantly reduced TypeScript’s overall package size <a href=\"https://github.com/microsoft/TypeScript/pull/55326\">by making <code>tsserver.js</code> and <code>typingsInstaller.js</code> import from a common API library instead of having each of them produce standalone bundles</a>.</p>\n<p>This reduces TypeScript’s size on disk from 30.2 MB to 20.4 MB, and reduces its packed size from 5.5 MB to 3.7 MB!</p>\n<h3 id=\"node-reuse-in-declaration-emit\" style=\"position:relative;\"><a href=\"#node-reuse-in-declaration-emit\" aria-label=\"node reuse in declaration emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Reuse in Declaration Emit</h3>\n<p>As part of the work to enable <code>isolatedDeclarations</code>, we’ve substantially improved how often TypeScript can directly copy your input source code when producing declaration files.</p>\n<p>For example, let’s say you wrote</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strBool</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">boolStr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Note that the union types are equivalent, but the order of the union is different.\r\nWhen emitting the declaration file, TypeScript has two equivalent output possibilities.</p>\n<p>The first is to use a consistent canonical representation for each type:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strBool</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">boolStr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The second is to re-use the type annotations exactly as written:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strBool</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">boolStr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The second approach is generally preferable for a few reasons:</p>\n<ul>\n<li>Many equivalent representations still encode some level of intent that is better to preserve in the declaration file</li>\n<li>Producing a fresh representation of a type can be somewhat expensive, so avoiding is better</li>\n<li>User-written types are usually shorter than generated type representations</li>\n</ul>\n<p>In 5.5, we’ve greatly improved the number of places where TypeScript can correctly identify places where it’s safe and correct to print back types exactly as they were written in the input file.\r\nMany of these cases are invisible performance improvements - TypeScript would generate fresh sets of syntax nodes and serialize them into a string.\r\nInstead, TypeScript can now operate over the original syntax nodes directly, which is much cheaper and faster.</p>\n<h3 id=\"caching-contextual-types-from-discriminated-unions\" style=\"position:relative;\"><a href=\"#caching-contextual-types-from-discriminated-unions\" aria-label=\"caching contextual types from discriminated unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching Contextual Types from Discriminated Unions</h3>\n<p>When TypeScript asks for the contextual type of an expression like an object literal, it will often encounter a union type.\r\nIn those cases, TypeScript tries to filter out members of the union based on known properties with well known values (i.e. discriminant properties).\r\nThis work can be fairly expensive, especially if you end up with an object consisting of many many properties.\r\nIn TypeScript 5.5, <a href=\"https://github.com/microsoft/TypeScript/pull/58372\">much of the computation is cached once so that TypeScript doesn’t need to recompute it for every property in the object literal</a>.\r\nPerforming this optimization shaved 250ms off of compiling the TypeScript compiler itself.</p>\n<h2 id=\"easier-api-consumption-from-ecmascript-modules\" style=\"position:relative;\"><a href=\"#easier-api-consumption-from-ecmascript-modules\" aria-label=\"easier api consumption from ecmascript modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easier API Consumption from ECMAScript Modules</h2>\n<p>Previously, if you were writing an ECMAScript module in Node.js, named imports were not available from the <code>typescript</code> package.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">createSourceFile</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ❌ error</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">ts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">createSourceFile</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// ❌ undefined???</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">ts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">createSourceFile</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// ✅ works - but ugh!</span></div></code></div></pre>\n<p>This is because <a href=\"https://github.com/nodejs/cjs-module-lexer\">cjs-module-lexer</a> did not recognize the pattern of TypeScript’s generated CommonJS code.\r\nThis has been fixed, and users can now use named imports from the TypeScript npm package with ECMAScript modules in Node.js.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">createSourceFile</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ✅ works now!</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ts</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">ts</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">createSourceFile</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// ✅ works now!</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/57133\">see the change here</a>.</p>\n<h2 id=\"the-transpiledeclaration-api\" style=\"position:relative;\"><a href=\"#the-transpiledeclaration-api\" aria-label=\"the transpiledeclaration api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>transpileDeclaration</code> API</h2>\n<p>TypeScript’s API exposes a function called <code>transpileModule</code>.\r\nIt’s intended to make it easy to compile a single file of TypeScript code.\r\nBecause it doesn’t have access to an entire <em>program</em>, the caveat is that it may not produce the right output if the code violates any errors under the <code>isolatedModules</code> option.</p>\n<p>In TypeScript 5.5, we’ve added a new similar API called <code>transpileDeclaration</code>.\r\nThis API is similar to <code>transpileModule</code>, but it’s specifically designed to generate a single <em>declaration file</em> based on some input source text.\r\nJust like <code>transpileModule</code>, it doesn’t have access to a full program, and a similar caveat applies: it only generates an accurate declaration file if the input code is free of errors under the new <code>isolatedDeclarations</code> option.</p>\n<p>If desired, this function can be used to parallelize declaration emit across all files under <code>isolatedDeclarations</code> mode.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/58261\">see the implementation here</a>.</p>\n<h2 id=\"notable-behavioral-changes\" style=\"position:relative;\"><a href=\"#notable-behavioral-changes\" aria-label=\"notable behavioral changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notable Behavioral Changes</h2>\n<p>This section highlights a set of noteworthy changes that should be acknowledged and understood as part of any upgrade.\r\nSometimes it will highlight deprecations, removals, and new restrictions.\r\nIt can also contain bug fixes that are functionally improvements, but which can also affect an existing build by introducing new errors.</p>\n<h3 id=\"disabling-features-deprecated-in-typescript-50\" style=\"position:relative;\"><a href=\"#disabling-features-deprecated-in-typescript-50\" aria-label=\"disabling features deprecated in typescript 50 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disabling Features Deprecated in TypeScript 5.0</h3>\n<p>TypeScript 5.0 deprecated the following options and behaviors:</p>\n<ul>\n<li><code>charset</code></li>\n<li><code>target: ES3</code></li>\n<li><code>importsNotUsedAsValues</code></li>\n<li><code>noImplicitUseStrict</code></li>\n<li><code>noStrictGenericChecks</code></li>\n<li><code>keyofStringsOnly</code></li>\n<li><code>suppressExcessPropertyErrors</code></li>\n<li><code>suppressImplicitAnyIndexErrors</code></li>\n<li><code>out</code></li>\n<li><code>preserveValueImports</code></li>\n<li><code>prepend</code> in project references</li>\n<li>implicitly OS-specific <code>newLine</code></li>\n</ul>\n<p>To continue using the deprecated options above, developers using TypeScript 5.0 and other more recent versions have had to specify a new option called <code>ignoreDeprecations</code> with the value <code>\"5.0\"</code>.</p>\n<p>In TypeScript 5.5, these options no longer have any effect.\r\nTo help with a smooth upgrade path, you may still specify them in your tsconfig, but these will be an error to specify in TypeScript 6.0.\r\nSee also the <a href=\"https://github.com/microsoft/TypeScript/issues/51000\">Flag Deprecation Plan</a> which outlines our deprecation strategy.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/issues/51909\">More information around these deprecation plans is available on GitHub</a>, which contains suggestions in how to best adapt your codebase.</p>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Types generated for the DOM may have an impact on type-checking your codebase.\r\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/58211\">see the DOM updates for TypeScript 5.5</a>.</p>\n<h3 id=\"stricter-parsing-for-decorators\" style=\"position:relative;\"><a href=\"#stricter-parsing-for-decorators\" aria-label=\"stricter parsing for decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stricter Parsing for Decorators</h3>\n<p>Since TypeScript originally introduced support for decorators, the specified grammar for the proposal has been tightened up.\r\nTypeScript is now stricter about what forms it allows.\r\nWhile rare, existing decorators may need to be parenthesized to avoid errors.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">DecoratorProvider</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) { }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">DecoratorProvider</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            @</span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// ❌ error</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">method1</span><span style=\"color: #000000\">() { }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">            @(</span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\">) </span><span style=\"color: #008000\">// ✅ okay</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">method2</span><span style=\"color: #000000\">() { }</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>See <a href=\"https://github.com/microsoft/TypeScript/pull/57749\">more information on the change here</a>.</p>\n<h3 id=\"undefined-is-no-longer-a-definable-type-name\" style=\"position:relative;\"><a href=\"#undefined-is-no-longer-a-definable-type-name\" aria-label=\"undefined is no longer a definable type name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>undefined</code> is No Longer a Definable Type Name</h3>\n<p>TypeScript has always disallowed type alias names that conflict with built-in types:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// Illegal</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Illegal</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Illegal</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Illegal</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Due to a bug, this logic didn’t also apply to the built-in type <code>undefined</code>.\r\nIn 5.5, this is now correctly identified as an error:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// Now also illegal</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Bare references to type aliases named <code>undefined</code> never actually worked in the first place.\r\nYou could define them, but you couldn’t use them as an unqualified type name.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">m</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//           ^</span></div><div class='line'><span style=\"color: #008000\">// Errors in 5.4 and earlier - the local definition of 'undefined' was not even consulted.</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/57575\">see the change here</a>.</p>\n<h3 id=\"simplified-reference-directive-declaration-emit\" style=\"position:relative;\"><a href=\"#simplified-reference-directive-declaration-emit\" aria-label=\"simplified reference directive declaration emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplified Reference Directive Declaration Emit</h3>\n<p>When producing a declaration file, TypeScript would synthesize a reference directive when it believed one was required.\r\nFor example, all Node.js modules are declared ambiently, so cannot be loaded by module resolution alone.\r\nA file like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">parse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">__filename</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Would emit a declaration file like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">types</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">ParsedPath</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Even though the reference directive never appeared in the original source.</p>\n<p>Similarly, TypeScript also <em>removed</em> reference directives that it did not believe needed to be a part of the output.\r\nFor example, let’s imagine we had a reference directive to <code>jest</code>;\r\nhowever, imagine the reference directive isn’t necessary to generate the declaration file.\r\nTypeScript would simply drop it.\r\nSo in the following example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">types</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">parse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">__filename</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>TypeScript would still emit:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">types</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">ParsedPath</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>In the course of working on <code>isolatedDeclarations</code>, we realized that this logic was untenable for anyone attempting to implement a declaration emitter without type checking or using more than a single file’s context.\r\nThis behavior is also hard to understand from a user’s perspective; whether or not a reference directive appeared in the emitted file seems inconsistent and difficult to predict unless you understand exactly what’s going on during typechecking.\r\nTo prevent declaration emit from being different when <code>isolatedDeclarations</code> was enabled, we knew that our emit needed to change.</p>\n<p>Through <a href=\"https://github.com/microsoft/TypeScript/pull/57569\">experimentation</a>, we found that nearly all cases where TypeScript synthesized reference directives were just to pull in <code>node</code> or <code>react</code>.\r\nThese are cases where the expectation is that a downstream user already references those types through tsconfig.json <code>\"types\"</code> or library imports, so no longer synthesizing these reference directives would be unlikely to break anyone.\r\nIt’s worth noting that this is already how it works for <code>lib.d.ts</code>; TypeScript doesn’t synthesize a reference to <code>lib=\"es2015\"</code> when a module exports a <code>WeakMap</code>, instead assuming that a downstream user will have included that as part of their environment.</p>\n<p>For reference directives that had been written by library authors (not synthesized), <a href=\"https://github.com/microsoft/TypeScript/pull/57656\">further experimentation</a> showed that nearly all were removed, never showing up in the output.\r\nMost reference directives that were preserved were broken and likely not intended to be preserved.</p>\n<p>Given those results, we decided to greatly simplfy reference directives in declaration emit in TypeScript 5.5.\r\nA more consistent strategy will help library authors and consumers have better control of their declaration files.</p>\n<p>Reference directives are no longer synthesized.\r\nUser-written reference directives are no longer preserved, unless annotated with a new <code>preserve=\"true\"</code> attribute.\r\nConcretely, an input file like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/// &lt;reference types=\"some-lib\" preserve=\"true\" /&gt;</span></div><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">types</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">parse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">__filename</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>will emit:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">/// &lt;reference types=\"some-lib\" preserve=\"true\" /&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myPath</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">path</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">ParsedPath</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Adding <code>preserve=\"true\"</code> is backwards compatible with older versions of TypeScript as unknown attributes are ignored.</p>\n<p>This change also improved performance; in our benchmarks, the emit stage saw a 1-4% improvement in projects with declaration emit enabled.</p>","headings":[{"value":"Inferred Type Predicates","depth":2},{"value":"Control Flow Narrowing for Constant Indexed Accesses","depth":2},{"value":"The JSDoc @import Tag","depth":2},{"value":"Regular Expression Syntax Checking","depth":2},{"value":"Support for New ECMAScript Set Methods","depth":2},{"value":"Isolated Declarations","depth":2},{"value":"Use-case: Faster Declaration Emit Tools","depth":3},{"value":"Use-case: Parallel Declaration Emit and Parallel Checking","depth":3},{"value":"Solution: Explicit Types!","depth":3},{"value":"Why are errors desirable?","depth":3},{"value":"Using isolatedDeclarations","depth":3},{"value":"Credit","depth":3},{"value":"The ${configDir} Template Variable for Configuration Files","depth":2},{"value":"Consulting package.json Dependencies for Declaration File Generation","depth":2},{"value":"Editor and Watch-Mode Reliability Improvements","depth":2},{"value":"Correctly Refresh Editor Errors in Configuration Files","depth":3},{"value":"Better Handling for Deletes Followed by Immediate Writes","depth":3},{"value":"Symlinks are Tracked in Failed Resolutions","depth":3},{"value":"Project References Contribute to Auto-Imports","depth":3},{"value":"Performance and Size Optimizations","depth":2},{"value":"Monomorphized Objects in Language Service and Public API","depth":3},{"value":"Monomorphized Control Flow Nodes","depth":3},{"value":"Optimizations on our Control Flow Graph","depth":3},{"value":"Skipped Checking in transpileModule and transpileDeclaration","depth":3},{"value":"TypeScript Package Size Reduction","depth":3},{"value":"Node Reuse in Declaration Emit","depth":3},{"value":"Caching Contextual Types from Discriminated Unions","depth":3},{"value":"Easier API Consumption from ECMAScript Modules","depth":2},{"value":"The transpileDeclaration API","depth":2},{"value":"Notable Behavioral Changes","depth":2},{"value":"Disabling Features Deprecated in TypeScript 5.0","depth":3},{"value":"lib.d.ts Changes","depth":3},{"value":"Stricter Parsing for Decorators","depth":3},{"value":"undefined is No Longer a Definable Type Name","depth":3},{"value":"Simplified Reference Directive Declaration Emit","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-5.html","title":"TypeScript 5.5","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.5 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.5","slug":"/docs/handbook/release-notes/typescript-5-5.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.5.md","previousID":null,"nextID":null,"lang":"en","modifiedTime":"2025-05-23T01:45:24.653Z"}},"staticQueryHashes":[],"slicesMap":{}}
{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-9.html","result":{"data":{"markdownRemark":{"id":"928a63e1-4569-5469-86dd-e8b9cb45399e","excerpt":"Minimal and Updated tsc --init For a while, the TypeScript compiler has supported an --init flag that can create a tsconfig.json within the current directory…","html":"<h2 id=\"minimal-and-updated-tsc---init\" style=\"position:relative;\"><a href=\"#minimal-and-updated-tsc---init\" aria-label=\"minimal and updated tsc   init permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimal and Updated <code>tsc --init</code></h2>\n<p>For a while, the TypeScript compiler has supported an <code>--init</code> flag that can create a <code>tsconfig.json</code> within the current directory.\nIn the last few years, running <code>tsc --init</code> created a very “full” <code>tsconfig.json</code>, filled with commented-out settings and their descriptions.\nWe designed this with the intent of making options discoverable and easy to toggle.</p>\n<p>However, given external feedback (and our own experience), we found it’s common to immediately delete most of the contents of these new <code>tsconfig.json</code> files.\nWhen users want to discover new options, we find they rely on auto-complete from their editor, or navigate to <a href=\"https://www.typescriptlang.org/tsconfig/\">the tsconfig reference on our website</a> (which the generated <code>tsconfig.json</code> links to!).\nWhat each setting does is also documented on that same page, and can be seen via editor hovers/tooltips/quick info.\nWhile surfacing some commented-out settings might be helpful, the generated <code>tsconfig.json</code> was often considered overkill.</p>\n<p>We also felt that it was time that <code>tsc --init</code> initialized with a few more prescriptive settings than we already enable.\nWe looked at some common pain points and papercuts users have when they create a new TypeScript project.\nFor example, most users write in modules (not global scripts), and <code>--moduleDetection</code> can force TypeScript to treat every implementation file as a module.\nDevelopers also often want to use the latest ECMAScript features directly in their runtime, so <code>--target</code> can typically be set to <code>esnext</code>.\nJSX users often find that going back to set <code>--jsx</code> is needless friction, and its options are slightly confusing.\nAnd often, projects end up loading more declaration files from <code>node_modules/@types</code> than TypeScript actually needs; but specifying an empty <code>types</code> array can help limit this.</p>\n<p>In TypeScript 5.9, a plain <code>tsc --init</code> with no other flags will generate the following <code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Visit https://aka.ms/tsconfig to read more about this file</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// File Layout</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"rootDir\": \"./src\",</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"outDir\": \"./dist\",</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Environment Settings</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// See also https://aka.ms/tsconfig_modules</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"nodenext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: [],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// For nodejs:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"lib\": [\"esnext\"],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"types\": [\"node\"],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// and npm install -D @types/node</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Other Outputs</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declarationMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Stricter Typechecking Options</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"noUncheckedIndexedAccess\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exactOptionalPropertyTypes\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Style Options</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noImplicitReturns\": true,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noImplicitOverride\": true,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noUnusedLocals\": true,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noUnusedParameters\": true,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noFallthroughCasesInSwitch\": true,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// \"noPropertyAccessFromIndexSignature\": true,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Recommended Options</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"strict\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsx\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"verbatimModuleSyntax\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"isolatedModules\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"noUncheckedSideEffectImports\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleDetection\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"force\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"skipLibCheck\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more details, see the <a href=\"https://github.com/microsoft/TypeScript/pull/61813\">implementing pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/issues/58420\">discussion issue</a>.</p>\n<h2 id=\"support-for-import-defer\" style=\"position:relative;\"><a href=\"#support-for-import-defer\" aria-label=\"support for import defer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>import defer</code></h2>\n<p>TypeScript 5.9 introduces support for <a href=\"https://github.com/tc39/proposal-defer-import-eval/\">ECMAScript’s deferred module evaluation proposal</a> using the new <code>import defer</code> syntax.\nThis feature allows you to import a module without immediately executing the module and its dependencies, providing better control over when work and side-effects occur.</p>\n<p>The syntax only permits namespace imports:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defer</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">feature</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-feature.js\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>The key benefit of <code>import defer</code> is that the module is only evaluated when one of its exports is first accessed.\nConsider this example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// ./some-feature.ts</span></div><div class='line'><span style=\"color: #795E26\">initializationWithSideEffects</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">initializationWithSideEffects</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">specialConstant</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Side effects have occurred!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">specialConstant</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>When using <code>import defer</code>, the <code>initializationWithSideEffects()</code> function will not be called until you actually access a property of the imported namespace:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defer</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">feature</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./some-feature.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// No side effects have occurred yet</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// As soon as `specialConstant` is accessed, the contents of the `feature`</span></div><div class='line'><span style=\"color: #008000\">// module are run and side effects have taken place.</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">feature</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">specialConstant</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 42</span></div></code></div></pre>\n<p>Because evaluation of the module is deferred until you access a member off of the module, you cannot use named imports or default imports with <code>import defer</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// ❌ Not allowed</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defer</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">doSomething</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-module\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ Not allowed  </span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defer</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defaultExport</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-module\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ✅ Only this syntax is supported</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defer</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">feature</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-module\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Note that when you write <code>import defer</code>, the module and its dependencies are fully loaded and ready for execution.\nThat means that the module will need to exist, and will be loaded from the file system or a network resource.\nThe key difference between a regular <code>import</code> and <code>import defer</code> is that <em>the execution of statements and declarations</em> is deferred until you access a property of the imported namespace.</p>\n<p>This feature is particularly useful for conditionally loading modules with expensive or platform-specific initialization. It can also improve startup performance by deferring module evaluation for app features until they are actually needed.</p>\n<p>Note that <code>import defer</code> is not transformed or “downleveled” at all by TypeScript.\nIt is intended to be used in runtimes that support the feature natively, or by tools such as bundlers that can apply the appropriate transformation.\nThat means that <code>import defer</code> will only work under the <code>--module</code> modes <code>preserve</code> and <code>esnext</code>.</p>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/nicolo-ribaudo\">Nicolò Ribaudo</a> who championed the proposal in TC39 and also provided <a href=\"https://github.com/microsoft/TypeScript/pull/60757\">the implementation for this feature</a>.</p>\n<h2 id=\"support-for---module-node20\" style=\"position:relative;\"><a href=\"#support-for---module-node20\" aria-label=\"support for   module node20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support for <code>--module node20</code></h2>\n<p>TypeScript provides several <code>node*</code> options for the <code>--module</code> and <code>--moduleResolution</code> settings.\nMost recently, <code>--module nodenext</code> has supported the ability to <code>require()</code> ECMAScript modules from CommonJS modules, and correctly rejects import assertions (in favor of the standards-bound <a href=\"https://github.com/tc39/proposal-import-attributes\">import attributes</a>).</p>\n<p>TypeScript 5.9 brings a stable option for these settings called <code>node20</code>, intended to model the behavior of Node.js v20.\nThis option is unlikely to have new behaviors in the future, unlike <code>--module nodenext</code> or <code>--moduleResolution nodenext</code>.\nAlso unlike <code>nodenext</code>, specifying <code>--module node20</code> will imply <code>--target es2023</code> unless otherwise configured.\n<code>--module nodenext</code>, on the other hand, implies the floating <code>--target esnext</code>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/61805\">take a look at the implementation here</a>.</p>\n<h2 id=\"summary-descriptions-in-dom-apis\" style=\"position:relative;\"><a href=\"#summary-descriptions-in-dom-apis\" aria-label=\"summary descriptions in dom apis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary Descriptions in DOM APIs</h2>\n<p>Previously, many of the DOM APIs in TypeScript only linked to the MDN documentation for the API.\nThese links were useful, but they didn’t provide a quick summary of what the API does.\nThanks to a few changes from <a href=\"https://github.com/Bashamega\">Adam Naji</a>, TypeScript now includes summary descriptions for many DOM APIs based on the MDN documentation.\nYou can see more of these changes <a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1993\">here</a> and <a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1940\">here</a>.</p>\n<h2 id=\"expandable-hovers-preview\" style=\"position:relative;\"><a href=\"#expandable-hovers-preview\" aria-label=\"expandable hovers preview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expandable Hovers (Preview)</h2>\n<p><em>Quick Info</em> (also called “editor tooltips” and “hovers”) can be very useful for peeking at variables to see their types, or at type aliases to see what they actually refer to.\nStill, it’s common for people to want to <em>go deeper</em> and get details from whatever’s displayed within the quick info tooltip.\nFor example, if we hover our mouse over the parameter <code>options</code> in the following example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drawButton</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span></div></code></div></pre>\n<p>We’re left with <code>(parameter) options: Options</code>.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2025/06/bare-hover-5.8-01.png\" alt=\"Tooltip for a parameter declared as options which just shows options: Options.\"></p>\n<p>Do we really need to jump to the definition of the type <code>Options</code> just to see what members this value has?</p>\n<p>Previously, that was actually the case.\nTo help here, TypeScript 5.9 is now previewing a feature called <em>expandable hovers</em>, or “quick info verbosity”.\nIf you use an editor like VS Code, you’ll now see a <code>+</code> and <code>-</code> button on the left of these hover tooltips.\nClicking on the <code>+</code> button will expand out types more deeply, while clicking on the <code>-</code> button will collapse to the last view.</p>\n<p><video autoplay loop style=\"width: 100%;\" src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2025/06/expandable-quick-info-1.mp4\" aria-label=\"Expanding quick info to see more about the type of `Options`.\"></video></p>\n<p>This feature is currently in preview, and we are seeking feedback for both TypeScript and our partners on Visual Studio Code.\nFor more details, see <a href=\"https://github.com/microsoft/TypeScript/pull/59940\">the PR for this feature here</a>.</p>\n<h2 id=\"configurable-maximum-hover-length\" style=\"position:relative;\"><a href=\"#configurable-maximum-hover-length\" aria-label=\"configurable maximum hover length permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurable Maximum Hover Length</h2>\n<p>Occasionally, quick info tooltips can become so long that TypeScript will truncate them to make them more readable.\nThe downside here is that often the most important information will be omitted from the hover tooltip, which can be frustrating.\nTo help with this, TypeScript 5.9’s language server supports a configurable hover length, which can be configured in VS Code via the <code>js/ts.hover.maximumLength</code> setting.</p>\n<p>Additionally, the new default hover length is substantially larger than the previous default.\nThis means that in TypeScript 5.9, you should see more information in your hover tooltips by default.\nFor more details, see <a href=\"https://github.com/microsoft/TypeScript/pull/61662\">the PR for this feature here</a> and <a href=\"https://github.com/microsoft/vscode/pull/248181\">the corresponding change to Visual Studio Code here</a>.</p>\n<h2 id=\"optimizations\" style=\"position:relative;\"><a href=\"#optimizations\" aria-label=\"optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizations</h2>\n<h3 id=\"cache-instantiations-on-mappers\" style=\"position:relative;\"><a href=\"#cache-instantiations-on-mappers\" aria-label=\"cache instantiations on mappers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache Instantiations on Mappers</h3>\n<p>When TypeScript replaces type parameters with specific type arguments, it can end up instantiating many of the same intermediate types over and over again.\nIn complex libraries like Zod and tRPC, this could lead to both performance issues and errors reported around excessive type instantiation depth.\nThanks to <a href=\"https://github.com/microsoft/TypeScript/pull/61505\">a change</a> from <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a>, TypeScript 5.9 is able to cache many intermediate instantiations when work has already begun on a specific type instantiation.\nThis in turn avoids lots of unnecessary work and allocations.</p>\n<h3 id=\"avoiding-closure-creation-in-fileordirectoryexistsusingsource\" style=\"position:relative;\"><a href=\"#avoiding-closure-creation-in-fileordirectoryexistsusingsource\" aria-label=\"avoiding closure creation in fileordirectoryexistsusingsource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoiding Closure Creation in <code>fileOrDirectoryExistsUsingSource</code></h3>\n<p>In JavaScript, a function expression will typically allocate a new function object, even if the wrapper function is just passing through arguments to another function with no captured variables.\nIn code paths around file existence checks, <a href=\"https://github.com/VincentBailly\">Vincent Bailly</a> found examples of these pass-through function calls, even though the underlying functions only took single arguments.\nGiven the number of existence checks that could take place in larger projects, he cited a speed-up of around 11%.\n<a href=\"https://github.com/microsoft/TypeScript/pull/61822/\">See more on this change here</a>.</p>\n<h2 id=\"notable-behavioral-changes\" style=\"position:relative;\"><a href=\"#notable-behavioral-changes\" aria-label=\"notable behavioral changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notable Behavioral Changes</h2>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Types generated for the DOM may have an impact on type-checking your codebase.</p>\n<p>Additionally, one notable change is that <code>ArrayBuffer</code> has been changed in such a way that it is no longer a supertype of several different <code>TypedArray</code> types.\nThis also includes subtypes of <code>UInt8Array</code>, such as <code>Buffer</code> from Node.js.\nAs a result, you’ll see new error messages such as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: undefined\">error TS2345: Argument of type 'ArrayBufferLike' is not assignable to parameter of type 'BufferSource'.</span></div><div class='line'><span style=\"color: undefined\">error TS2322: Type 'ArrayBufferLike' is not assignable to type 'ArrayBuffer'.</span></div><div class='line'><span style=\"color: undefined\">error TS2322: Type 'Buffer' is not assignable to type 'Uint8Array&lt;ArrayBufferLike&gt;'.</span></div><div class='line'><span style=\"color: undefined\">error TS2322: Type 'Buffer' is not assignable to type 'ArrayBuffer'.</span></div><div class='line'><span style=\"color: undefined\">error TS2345: Argument of type 'Buffer' is not assignable to parameter of type 'string | Uint8Array&lt;ArrayBufferLike&gt;'.</span></div></code></div></pre>\n<p>If you encounter issues with <code>Buffer</code>, you may first want to check that you are using the latest version of the <code>@types/node</code> package.\nThis might include running</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: undefined\">npm update @types/node --save-dev</span></div></code></div></pre>\n<p>Much of the time, the solution is to specify a more specific underlying buffer type instead of using the default <code>ArrayBufferLike</code> (i.e. explicitly writing out <code>Uint8Array&#x3C;ArrayBuffer></code> rather than a plain <code>Uint8Array</code>).\nIn instances where some <code>TypedArray</code> (like <code>Uint8Array</code>) is passed to a function expecting an <code>ArrayBuffer</code> or <code>SharedArrayBuffer</code>, you can also try accessing the <code>buffer</code> property of that <code>TypedArray</code> like in the following example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #000000\">  let data = new Uint8Array([0, 1, 2, 3, 4]);</span></div><div class='line'><span style=\"color: #A31515\">- someFunc(data)</span></div><div class='line'><span style=\"color: #098658\">+ someFunc(data.buffer)</span></div></code></div></pre>\n<h2 id=\"type-argument-inference-changes\" style=\"position:relative;\"><a href=\"#type-argument-inference-changes\" aria-label=\"type argument inference changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Argument Inference Changes</h2>\n<p>In an effort to fix “leaks” of type variables during inference, TypeScript 5.9 may introduce changes in types and possibly new errors in some codebases.\nThese are hard to predict, but can often be fixed by adding type arguments to generic functions calls.\n<a href=\"https://github.com/microsoft/TypeScript/pull/61668\">See more details here</a>.</p>","headings":[{"value":"Minimal and Updated tsc --init","depth":2},{"value":"Support for import defer","depth":2},{"value":"Support for --module node20","depth":2},{"value":"Summary Descriptions in DOM APIs","depth":2},{"value":"Expandable Hovers (Preview)","depth":2},{"value":"Configurable Maximum Hover Length","depth":2},{"value":"Optimizations","depth":2},{"value":"Cache Instantiations on Mappers","depth":3},{"value":"Avoiding Closure Creation in fileOrDirectoryExistsUsingSource","depth":3},{"value":"Notable Behavioral Changes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"Type Argument Inference Changes","depth":2}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-9.html","title":"TypeScript 5.9","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.9 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.9","slug":"/docs/handbook/release-notes/typescript-5-9.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.9.md","previousID":null,"nextID":null,"lang":"en","modifiedTime":"2025-08-08T16:41:23.053Z"}},"staticQueryHashes":[],"slicesMap":{}}
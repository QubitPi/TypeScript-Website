{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/dependency-injection-containers.html","result":{"data":{"markdownRemark":{"id":"5d3eb519-1943-587e-b821-22f8641f0609","excerpt":"To follow along with this article, one should be familiar with the following concepts: Inversion of Control: a design pattern that stipulates frameworks should…","html":"<p>To follow along with this article, one should be familiar with the following concepts:</p>\n<ul>\n<li><strong>Inversion of Control</strong>: a design pattern that stipulates frameworks should call userland code, instead of userland\ncode calling library code</li>\n<li><strong>Dependency injection</strong>: a variant of IoC in which objects receive other objects as dependencies instead of through\nconstructors or setters</li>\n<li><a href=\"/TypeScript-Website/docs/handbook/decorators.html\"><strong>Decorators</strong></a></li>\n<li><a href=\"/TypeScript-Website/docs/handbook/decorators.html#metadata\"><strong>Decorator metadata</strong></a>: a way to store configuration for language\nstructures in runtime by using decorators to define targets</li>\n</ul>\n<p>In our pursuit of choosing the best TypeScript DI library, we researched existing DI libraries. We found there are a\ncouple of TypeScripts DI options out there. In this article, we first outline which requirements the library must meet\nto satisfy our demands. Then we present contenders that made it to the final cut. We highlight their pros and cons</p>\n<h2 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h2>\n<p>We already know we will be using Open Source Solutions, so we will base most of our criteria upon their OS communities.</p>\n<h3 id=\"popularity-and-maintenance\" style=\"position:relative;\"><a href=\"#popularity-and-maintenance\" aria-label=\"popularity and maintenance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Popularity and maintenance</h3>\n<p>The library in question needs to be <strong>popular</strong> and <strong>maintained</strong>. This was a key requirement. The library should have\nofficial support from its original creators. We measured the popularity by <strong>GitHub stars</strong>, <strong>npm weekly downloads</strong>,\nand how long ago was the <strong>latest publish date</strong>.</p>\n<h3 id=\"ease-of-use\" style=\"position:relative;\"><a href=\"#ease-of-use\" aria-label=\"ease of use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ease of Use</h3>\n<p>Ideally, the library has to be easy to use to shorten our development time. To estimate this, we judged the contenders’ documentation on a subjective scale from 1 (Hardest to Read) to 5 (Easiest to Read).</p>\n<h3 id=\"minimum-ts-version-required\" style=\"position:relative;\"><a href=\"#minimum-ts-version-required\" aria-label=\"minimum ts version required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimum TS Version Required</h3>\n<p>The library needs to work with relatively a wide range of TypeScript versions, because out team might develop\napplication that requires a relatively old TS version.</p>\n<p>We’ve had experience in the past we are prototyping a new product on top of an existing framework but in the middle\nof the development, we found we were unable to bump our yarn version from 1 to 2 simply because the TypeScript version\nin the framework is too old to migrate from yarn 1 to 2. It was important to us that the library could easily work with\nvarying TS versions.</p>\n<h3 id=\"decorator-required\" style=\"position:relative;\"><a href=\"#decorator-required\" aria-label=\"decorator required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator Required</h3>\n<p>It would be prefect if the library goes without any uncertainty, but\n<a href=\"/TypeScript-Website/docs/handbook/decorators.html\">since decorators, which most DI libraries requires, are a stage 2 proposal for JavaScript and are available only as an\nexperimental feature of TypeScript</a>\nat the time of writing, we need to take the risk of loosing that feature in the future. Basically, to turn on the\ndecorator in TypeScript, we need to tune tsconfig file with the following two options:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES5\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"experimentalDecorators\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"emitDecoratorMetadata\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"typescript-dependency-injection-library-landscape-overview\" style=\"position:relative;\"><a href=\"#typescript-dependency-injection-library-landscape-overview\" aria-label=\"typescript dependency injection library landscape overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Dependency Injection Library Landscape Overview</h2>\n<p>We can get a high-level overview of the findings in the table below.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><strong>GitHub stars</strong></th>\n<th align=\"center\"><strong>Weekly downloads</strong> (<a href=\"https://npmtrends.com/inversify-vs-tsyringe-vs-typed-inject-vs-typedi\">Download Stats in the past 1 year</a> is also available)</th>\n<th align=\"center\"><strong>Latest version</strong></th>\n<th align=\"center\"><strong>latest publish date</strong></th>\n<th align=\"center\"><strong>Documentation</strong></th>\n<th align=\"center\"><strong>License</strong></th>\n<th align=\"center\"><strong>Minimum TS Version</strong></th>\n<th align=\"center\"><strong>reflect-metadata Required</strong></th>\n<th align=\"center\"><strong>TS Decorator Required</strong></th>\n<th align=\"center\"><strong>Decorate Metadata Required</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>InversifyJS</strong></td>\n<td align=\"center\">10k</td>\n<td align=\"center\">683,854</td>\n<td align=\"center\">6.0.1</td>\n<td align=\"center\">2 years ago</td>\n<td align=\"center\">4</td>\n<td align=\"center\">MIT</td>\n<td align=\"center\">4.4</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>TypeDI</strong></td>\n<td align=\"center\">3.6k</td>\n<td align=\"center\">232,767</td>\n<td align=\"center\">0.10.0</td>\n<td align=\"center\">2 years ago</td>\n<td align=\"center\">5</td>\n<td align=\"center\">MIT</td>\n<td align=\"center\">No Strict Requirement</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>TSyringe</strong></td>\n<td align=\"center\">4.1k</td>\n<td align=\"center\">242,953</td>\n<td align=\"center\">4.7.0</td>\n<td align=\"center\">1 year ago</td>\n<td align=\"center\">3</td>\n<td align=\"center\">MIT</td>\n<td align=\"center\">No Strict Requirement</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Typed Inject</strong></td>\n<td align=\"center\">341</td>\n<td align=\"center\">62,034</td>\n<td align=\"center\">4.0.0</td>\n<td align=\"center\">19 days ago</td>\n<td align=\"center\">3</td>\n<td align=\"center\">Apache 2.0</td>\n<td align=\"center\">3.0</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n</tr>\n</tbody>\n</table>\n<p>That is how we ended up with 2 main candidates - InversifyJS &#x26; Typed Inject.</p>\n<p>We also looked at <a href=\"https://npmtrends.com/inversify-vs-tsyringe-vs-typed-inject-vs-typedi\">NPM trends</a> to make sure that\nthe weekly downloads does reflect the overall popularity of those DI livraries:</p>\n<p><img src=\"/images/docs/DI-compare.png\" alt=\"Error loading DI-compare.png\"></p>\n<h2 id=\"inversifyjs\" style=\"position:relative;\"><a href=\"#inversifyjs\" aria-label=\"inversifyjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InversifyJS</h2>\n<p>A very popular, easy-to-use tool with descent-quality documentation that provides a lot of tools and extensions through\nits <a href=\"https://github.com/inversify/InversifyJS/blob/master/wiki/ecosystem.md\">ecosystem</a>, such as the\n<a href=\"https://github.com/oguimbal/inversify-graphql\">support to GraphQL</a>, which our team heavily uses. What we liked the\nmost was the powerful expressiveness on its binding options that the library provides.</p>\n<p>The <a href=\"https://github.com/inversify/InversifyJS\">InversifyJS</a> uses decorators and decorators’ metadata for injections.\nSome manual work, however, is still necessary for binding implementations to interfaces. For example</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Logger:</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">for</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Logger\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">FileSystem:</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">for</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"FileSystem\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">SettingsService:</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">for</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"SettingsService\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">InversifyLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">InversifyFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">InversifySettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">inject</span><span style=\"color: #000000\">(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Logger</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">inject</span><span style=\"color: #000000\">(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">FileSystem</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>A map called <em>TYPES</em> is created to contain all, what we call, tokens for injection later. The interface implementations\nare annotated with decorator <em>@injectable</em>. The parameters of the <em>InversifySettingsTxtService</em> constructor use the\n<code>@inject</code> decorator, helping the DI container to resolve dependencies in runtime.</p>\n<p>The code for the DI container/injector is seen in the code snippet below:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">container</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Container</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">bind</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Logger</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">to</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">InversifyLogger</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">inSingletonScope</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">bind</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">FileSystem</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">to</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">InversifyFileSystem</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">inSingletonScope</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">bind</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">SettingsService</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SettingsService</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">to</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">InversifySettingsTxtService</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">inSingletonScope</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>InversifyJS uses the fluent interface pattern. The IoC container achieves type binding between tokens and classes by\ndeclaring it explicitly in code. Getting instances of managed classes requires only one call with proper casting:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">InversifyLogger</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Logger</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">InversifyFileSystem</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">FileSystem</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #0070C1\">TYPES</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SettingsService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"typed-inject\" style=\"position:relative;\"><a href=\"#typed-inject\" aria-label=\"typed inject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typed Inject</h2>\n<p>The <a href=\"https://github.com/nicojs/typed-inject\">Typed Inject</a> project focuses on type safety and explicitness. It uses\nneither decorators nor decorator metadata, opting instead for manually declaring dependencies. It allows for multiple\nDI containers to exist, and dependencies are scoped either as singletons or as transient objects. For example</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypedInjectLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypedInjectFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypedInjectSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">inject</span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The <em>TypedInjectLogger</em> and <em>TypedInjectFileSystem</em> classes serve as concrete implementations of the required interfaces. Type bindings are defined on the class-level by listing object dependencies using <em>inject</em>, a static variable.</p>\n<p>The following code snippet demonstrates all major container operations within the Typed Inject environment:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">appInjector</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">createInjector</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">provideClass</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">TypedInjectLogger</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Scope</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Singleton</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    .</span><span style=\"color: #795E26\">provideClass</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">TypedInjectFileSystem</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Scope</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Singleton</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>The container is instantiated using the <em>createInjector</em> functions, with token-to-class bindings declared explicitly.</p>\n<p>Developers can access instances of provided classes using the <em>resolve</em> function. Injectable classes can be obtained\nusing the <em>injectClass</em> method.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">appInjector</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">appInjector</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">appInjector</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">injectClass</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TypedInjectSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"others\" style=\"position:relative;\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h2>\n<h3 id=\"typedi\" style=\"position:relative;\"><a href=\"#typedi\" aria-label=\"typedi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeDI</h3>\n<p>The <a href=\"https://github.com/typestack/typedi\">TypeDI</a> project aims for simplicity by leveraging decorators and decorator\nmetadata. It supports dependency scoping with singletons and transient objects and allows for multiple DI containers to\nexist. We have two options for working with TypeDI:</p>\n<ol>\n<li><a href=\"#class-based-injections-with-typedi\">class-based injections</a></li>\n<li><a href=\"#token-based-injections-with-typedi\">token-based injections</a></li>\n</ol>\n<h4 id=\"class-based-injections-with-typedi\" style=\"position:relative;\"><a href=\"#class-based-injections-with-typedi\" aria-label=\"class based injections with typedi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class-Based Injections with TypeDI</h4>\n<p>Class-based injections allow for the insertion of classes by passing interface-class relationships:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeDiLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeDiFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeDiSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TypeDiLogger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TypeDiFileSystem</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Every class uses the class-level <em>@Service</em> decorator. The <strong>global</strong> option means all classes will be instantiated as\nsingletons in the global scope. The constructor parameters of the <em>TypeDiSettingsTxtService</em> class explicitly state that\nit requires one instance of the <em>TypeDiLogger</em> class and one of the <em>TypeDiFileSystem</em> class.</p>\n<p>Once we have declared all dependencies, we can use TypeDI containers as follows:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">container</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">of</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TypeDiLogger</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TypeDiFileSystem</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TypeDiSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h4 id=\"token-based-injections-with-typedi\" style=\"position:relative;\"><a href=\"#token-based-injections-with-typedi\" aria-label=\"token based injections with typedi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Token-Based Injections with TypeDI</h4>\n<p>Token-based injections bind interfaces to their implementations using a <strong>token</strong> as an intermediary. The only change\nin comparison to class-based injections is declaring the appropriate token for each construction parameter using the\n<em>@Inject</em> decorator:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeDiLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FakeLogger</span><span style=\"color: #000000\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeDiFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FakeFileSystem</span><span style=\"color: #000000\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Service</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">global:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ServiceNamedTypeDiSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">Inject</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">Inject</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In addition, we have to construct the instances of the classes we need and <strong>connect</strong> them to the container:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">container</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">of</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TypeDiLogger</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TypeDiFileSystem</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ServiceNamedTypeDiSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h3 id=\"tsyringe\" style=\"position:relative;\"><a href=\"#tsyringe\" aria-label=\"tsyringe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TSyringe</h3>\n<p>The <a href=\"https://github.com/microsoft/tsyringe\">TSyringe</a> project is a DI container maintained by Microsoft. It is a\nversatile container that supports virtually all standard DI container features, including resolving circular\ndependencies. Similar to TypeDI, TSyringe supports <a href=\"#class-based-injections-with-tsyringe\">class-based</a> and\n<a href=\"#token-based-injections-with-tsyringe\">token-based</a> injections.</p>\n<h4 id=\"class-based-injections-with-tsyringe\" style=\"position:relative;\"><a href=\"#class-based-injections-with-tsyringe\" aria-label=\"class based injections with tsyringe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class-Based Injections with TSyringe</h4>\n<p>Developers must mark the target classes with TSyringe’s class-level decorators. In the code snippet below, we use the\n<strong>@singleton</strong> decorator:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TsyringeLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TsyringeFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TsyringeSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TsyringeLogger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">TsyringeFileSystem</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The TSyringe containers can then resolve dependencies <em>automatically</em>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">childContainer</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">createChildContainer</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TsyringeLogger</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TsyringeFileSystem</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TsyringeSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h4 id=\"token-based-injections-with-tsyringe\" style=\"position:relative;\"><a href=\"#token-based-injections-with-tsyringe\" aria-label=\"token based injections with tsyringe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Token-Based Injections with TSyringe</h4>\n<p>Similar to other libraries, TSyringe requires programmers to use constructor parameter decorators for <strong>token-based</strong>\ninjections:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TsyringeLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TsyringeFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">singleton</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TokenedTsyringeSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">inject</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        @</span><span style=\"color: #795E26\">inject</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>After declaring target classes, we register token-class tuples with the associated lifecycles. In the code snippet\nbelow, we are using a singleton:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">childContainer</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">createChildContainer</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">TsyringeLogger</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">lifecycle:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Lifecycle</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Singleton</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">TsyringeFileSystem</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">lifecycle:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Lifecycle</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Singleton</span><span style=\"color: #000000\"> });</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">FakeLogger</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #A31515\">\"logger\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">FakeFileSystem</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #A31515\">\"fileSystem\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">childContainer</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">TokenedTsyringeSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h3 id=\"nestjs-server-sided\" style=\"position:relative;\"><a href=\"#nestjs-server-sided\" aria-label=\"nestjs server sided permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS (Server Sided)</h3>\n<p><a href=\"https://nestjs.com/\">NestJS</a> is a framework that uses a custom DI container under the hood. It is possible to run\nNestJS as a standalone application as a wrapper over its DI container. It uses decorators and their metadata for\ninjections. Scoping is allowed, and we can choose from singletons, transient objects, or request-bound objects.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NestLogger</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Logger</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NestFileSystem</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FileSystem</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Injectable</span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NestSettingsTxtService</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SettingsTxtService</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">logger</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">NestLogger</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">protected</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fileSystem</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">NestFileSystem</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    ) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Next, we defined the <strong>AppModule</strong>, the core class of the application, and specified its dependencies, <strong>providers</strong>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #795E26\">Module</span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">providers:</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">NestLogger</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">NestFileSystem</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">NestSettingsTxtService</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">})</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">AppModule</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p>Finally, we can create the application context and get the instances of the aforementioned classes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">applicationContext</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">NestFactory</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">createApplicationContext</span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">AppModule</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    { </span><span style=\"color: #001080\">logger:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">logger</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">applicationContext</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">NestLogger</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fileSystem</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">applicationContext</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">NestFileSystem</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">settingsService</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">applicationContext</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">NestSettingsTxtService</span><span style=\"color: #000000\">);</span></div></code></div></pre>","headings":[{"value":"Requirements","depth":2},{"value":"Popularity and maintenance","depth":3},{"value":"Ease of Use","depth":3},{"value":"Minimum TS Version Required","depth":3},{"value":"Decorator Required","depth":3},{"value":"TypeScript Dependency Injection Library Landscape Overview","depth":2},{"value":"InversifyJS","depth":2},{"value":"Typed Inject","depth":2},{"value":"Others","depth":2},{"value":"TypeDI","depth":3},{"value":"Class-Based Injections with TypeDI","depth":4},{"value":"Token-Based Injections with TypeDI","depth":4},{"value":"TSyringe","depth":3},{"value":"Class-Based Injections with TSyringe","depth":4},{"value":"Token-Based Injections with TSyringe","depth":4},{"value":"NestJS (Server Sided)","depth":3}],"frontmatter":{"permalink":"/docs/handbook/dependency-injection-containers.html","title":"Choosing the Best Dependency Injection Containers","disable_toc":null,"handbook":null,"oneline":"Comparison of dependency injection containers in TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-choosing-the-best-dependency-injection-containers","slug":"/docs/handbook/dependency-injection-containers.html","repoPath":"/packages/documentation/copy/en/reference/Dependency Injection Containers.md","lang":"en","modifiedTime":"2023-06-09T12:35:28.733Z"}},"staticQueryHashes":[]}
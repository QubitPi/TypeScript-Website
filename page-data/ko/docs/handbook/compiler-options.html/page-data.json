{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/compiler-options.html","result":{"data":{"markdownRemark":{"id":"78674b50-290c-5d5d-a141-08917acf7bcd","excerpt":"CLI로 사용하기 (Using the CLI) 로컬에서 tsc를 실행하면 tsconfig.json가 정의한 가장 가까운 프로젝트를 컴파일하고, 원하는 파일 glob을 전달하여\nTypeScript 파일 집합을 컴파일할 수 있습니다. 컴파일러 옵션 (Compiler Options…","html":"<h2 id=\"cli로-사용하기-using-the-cli\" style=\"position:relative;\"><a href=\"#cli%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-using-the-cli\" aria-label=\"cli로 사용하기 using the cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI로 사용하기 (Using the CLI)</h2>\n<p>로컬에서 <code>tsc</code>를 실행하면 <code>tsconfig.json</code>가 정의한 가장 가까운 프로젝트를 컴파일하고, 원하는 파일 glob을 전달하여\nTypeScript 파일 집합을 컴파일할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\"># tsconfig.json에 대한 fs를 역방향으로 검토하여 컴파일 실행</span></div><div class='line'><span style=\"color: #000000\">tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\"># 컴파일러 기본값으로 index.ts만 트랜스파일</span></div><div class='line'><span style=\"color: #000000\">tsc index.ts</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\"># 기본 설정으로 src 폴더 안에 모든 .ts 파일을 트랜스파일</span></div><div class='line'><span style=\"color: #000000\">tsc src/*.ts</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\"># tsconfig.json의 컴파일러 설정으로 src 폴더 안에 모든 .ts 파일을 트랜스파일</span></div><div class='line'><span style=\"color: #000000\">tsc --project tsconfig.json src/*.ts</span></div></code></div></pre>\n<h2 id=\"컴파일러-옵션-compiler-options\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%98%B5%EC%85%98-compiler-options\" aria-label=\"컴파일러 옵션 compiler options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러 옵션 (Compiler Options)</h2>\n<p>tsconfig의 컴파일러 옵션에 대한 더 많은 정보를 찾는다면, 베타 TSConfig 레퍼런스를\n<a href=\"https://www.typescriptlang.org/v2/en/tsconfig\">v2 사이트</a>에서 확인하세요.</p>\n<table>\n<thead>\n<tr>\n<th>옵션</th>\n<th>타입</th>\n<th>기본값</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--allowJs</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>JavaScript 파일의 컴파일을 허용합니다</td>\n</tr>\n<tr>\n<td><code>--allowSyntheticDefaultImports</code></td>\n<td><code>boolean</code></td>\n<td><code>module === \"system\"</code> 또는 <code>--esModuleInterop</code></td>\n<td>default export가 없는 모듈에서 default imports를 허용합니다. 코드 방출에는 영향을 주지 않으며, 타입 검사만 수행합니다.</td>\n</tr>\n<tr>\n<td><code>--allowUmdGlobalAccess</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>모듈에서 전역 UMD 접근을 허용합니다.</td>\n</tr>\n<tr>\n<td><code>--allowUnreachableCode</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>도달할 수 없는 코드에 대한 오류를 보고하지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--allowUnusedLabels</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>사용되지 않는 레이블에 대한 오류를 보고하지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--alwaysStrict</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>strict mode에서 파싱하고 각 소스 파일에 대해 <code>\"use strict\"</code>를 내보냅니다.</td>\n</tr>\n<tr>\n<td><code>--assumeChangesOnlyAffectDirectDependencies</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>파일 안에서의 변경은 파일이 직접 의존하는 파일에만 영향을 미친다고 가정하고 ‘—incremental’ 및 ‘-watch’로 다시 컴파일 합니다.</td>\n</tr>\n<tr>\n<td><code>--baseUrl</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>비-상대적 모듈 이름을 해석하기 위한 기본 디렉터리. 자세한 내용은 <a href=\"./module-resolution.md#base-url\">모듈 해석 문서</a>을 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--build</code><br/><code>-b</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><a href=\"./project-references.md\">프로젝트 레퍼런스</a>에서 지정한 이 프로젝트와 프로젝트의 모든 의존성을 빌드 합니다. 이 플래그는 이 페이지의 다른 플래그들과는 호환되지 않음에 유의하세요 자세한 내용은 <a href=\"./project-references.md\">여기</a>를 보세요.</td>\n</tr>\n<tr>\n<td><code>--charset</code></td>\n<td><code>string</code></td>\n<td><code>\"utf8\"</code></td>\n<td>입력 파일의 문자 집합입니다.</td>\n</tr>\n<tr>\n<td><code>--checkJs</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>.js</code> 파일에 오류를 보고합니다. <code>--allowJs</code>와 함께 사용하세요.</td>\n</tr>\n<tr>\n<td><code>--composite</code></td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n<td>TypeScript가 프로젝트를 컴파일하기 위해 참조된 프로젝트의 출력을 찾을 위치를 결정할 수 있는지 확인합니다.</td>\n</tr>\n<tr>\n<td><code>--declaration</code><br/><code>-d</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>해당하는 <code>.d.ts</code> 파일을 생성합니다.</td>\n</tr>\n<tr>\n<td><code>--declarationDir</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>생성된 선언 파일의 출력 디렉토리입니다.</td>\n</tr>\n<tr>\n<td><code>--declarationMap</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>해당하는 ‘.d.ts’파일 각각에 대한 소스 맵을 생성합니다.</td>\n</tr>\n<tr>\n<td><code>--diagnostics</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>진단 정보를 보여줍니다.</td>\n</tr>\n<tr>\n<td><code>--disableSizeLimit</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>JavaScript 프로젝트의 사이즈 제한을 비활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--downlevelIteration</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>ES5 또는 ES3를 대상으로 할 때 <code>for..of</code>, 스프레드와 구조분해할당에서 이터러블을 완전히 지원합니다.</td>\n</tr>\n<tr>\n<td><code>--emitBOM</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>출력 파일의 시작 부분에 UTF-8 바이트 순서표(BOM)를 내보냅니다.</td>\n</tr>\n<tr>\n<td><code>--emitDeclarationOnly</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>‘.d.ts’ 선언 파일만 내보냅니다.</td>\n</tr>\n<tr>\n<td><code>--emitDecoratorMetadata</code><sup>[1]</sup></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>소스에 데코레이터 선언에 대한 설계-타입 메타 데이터를 내보냅니다. 자세한 내용은 <a href=\"https://github.com/Microsoft/TypeScript/issues/2577\">#2577 이슈</a>을 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--esModuleInterop</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>런타임 바벨 생태계 호환성을 위한 <code>__importStar</code>와 <code>__importDefault</code> 헬퍼를 내보내고 타입 시스템 호환성을 위해 <code>--allowSyntheticDefaultImports</code>를 활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--experimentalDecorators</code><sup>[1]</sup></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>ES 데코레이터에 대한 실험적인 지원을 사용하도록 활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--extendedDiagnostics</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>자세한 진단 정보를 표시합니다</td>\n</tr>\n<tr>\n<td><code>--forceConsistentCasingInFileNames</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>동일 파일 참조에 대해 일관성 없는 대소문자를 비활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--generateCpuProfile</code></td>\n<td><code>string</code></td>\n<td><code>profile.cpuprofile</code></td>\n<td>주어진 경로에 cpu 프로필을 생성합니다. 파일 경로 대신 존재하는 디렉터리 이름을 전달하면 타임스탬프 이름이 지정된 프로필이 그 디렉터리에 대신 생성됩니다.</td>\n</tr>\n<tr>\n<td><code>--help</code><br/><code>-h</code></td>\n<td></td>\n<td></td>\n<td>도움말을 출력합니다.</td>\n</tr>\n<tr>\n<td><code>--importHelpers</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><a href=\"https://www.npmjs.com/package/tslib\"><code>tslib</code></a>에서 방출된 헬퍼를 import 합니다.  (예. <code>__extends</code>, <code>__rest</code>, 등..)</td>\n</tr>\n<tr>\n<td><code>--importsNotUsedAsValues</code></td>\n<td><code>string</code></td>\n<td><code>remove</code></td>\n<td>타입을 위해서만 사용하는 import를 위한 내보내기/검사 동작을 지정합니다. <code>\"remove\"</code>와 <code>\"preserve\"</code>는 사이드 이펙트를 위해 사용하지 않는 import를 내보낼지 지정하고, <code>\"error\"</code>는 타입을 위해서만 사용하는 import는 <code>import type</code>으로 작성하게 강제합니다.</td>\n</tr>\n<tr>\n<td><code>--incremental</code></td>\n<td><code>boolean</code></td>\n<td><code>composite</code>이 켜져있으면 <code>true</code> 아니면 <code>false</code></td>\n<td>이전 컴파일에서 디스크의 파일로 정보를 읽거나/기록하여 증분 컴파일을 활성화합니다. 이 파일은 <code>--tsBuildInfoFile</code> 플래그로 컨트롤합니다.</td>\n</tr>\n<tr>\n<td><code>--inlineSourceMap</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>별도의 파일 대신 소스 맵으로 단일 파일을 내보냅니다.</td>\n</tr>\n<tr>\n<td><code>--inlineSources</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>단일 파일 내에서 소스 맵과 함께 소스를 내보냅니다. <code>--inlineSourceMap</code> 또는 <code>--sourceMap</code>을 설정해야 합니다.</td>\n</tr>\n<tr>\n<td><code>--init</code></td>\n<td></td>\n<td></td>\n<td>TypeScript 프로젝트를 초기화하고 <code>tsconfig.json</code> 파일을 생성합니다.</td>\n</tr>\n<tr>\n<td><code>--isolatedModules</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>추가 검사를 수행하여 별도의 컴파일 (예를 들어 <a href=\"https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#a-simple-transform-function\"><code>트랜스파일된 모듈</code></a> 혹은 <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-typescript\">@babel/plugin-transform-typescript</a>) 이 안전한지 확인합니다.</td>\n</tr>\n<tr>\n<td><code>--jsx</code></td>\n<td><code>string</code></td>\n<td><code>\"Preserve\"</code></td>\n<td><code>.tsx</code> 파일에서 JSX 지원: <code>\"React\"</code>, <code>\"Preserve\"</code>, <code>\"react-native\"</code>. <a href=\"./jsx.md\">JSX</a>를 확인하세요.</td>\n</tr>\n<tr>\n<td><code>--jsxFactory</code></td>\n<td><code>string</code></td>\n<td><code>\"React.createElement\"</code></td>\n<td>리액트 JSX 방출을 대상으로 할 때 사용할 JSX 팩토리 함수를 지정합니다. 예: <code>React.createElement</code> 또는 <code>h</code>.</td>\n</tr>\n<tr>\n<td><code>--keyofStringsOnly</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>keyof</code>를 문자열 값으로 된 프로퍼티 이름에만 적용합니다 (숫자나 심벌에서는 안됨).</td>\n</tr>\n<tr>\n<td><code>--useDefineForClassFields</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>클래스 필드를 ECMAScript-표준 시맨틱으로 내보냅니다.</td>\n</tr>\n<tr>\n<td><code>--lib</code></td>\n<td><code>string[]</code></td>\n<td></td>\n<td>컴파일에 포함될 라이브러리 파일 목록입니다.<br/>가능한 값은 다음과 같습니다:  <br/>► <code>ES5</code> <br/>► <code>ES6</code> <br/>► <code>ES2015</code> <br/>► <code>ES7</code> <br/>► <code>ES2016</code> <br/>► <code>ES2017</code> <br/>► <code>ES2018</code> <br/>► <code>ESNext</code> <br/>► <code>DOM</code> <br/>► <code>DOM.Iterable</code> <br/>► <code>WebWorker</code> <br/>► <code>ScriptHost</code> <br/>► <code>ES2015.Core</code> <br/>► <code>ES2015.Collection</code> <br/>► <code>ES2015.Generator</code> <br/>► <code>ES2015.Iterable</code> <br/>► <code>ES2015.Promise</code> <br/>► <code>ES2015.Proxy</code> <br/>► <code>ES2015.Reflect</code> <br/>► <code>ES2015.Symbol</code> <br/>► <code>ES2015.Symbol.WellKnown</code> <br/>► <code>ES2016.Array.Include</code> <br/>► <code>ES2017.object</code> <br/>► <code>ES2017.Intl</code> <br/>► <code>ES2017.SharedMemory</code> <br/>► <code>ES2017.String</code> <br/>► <code>ES2017.TypedArrays</code> <br/>► <code>ES2018.Intl</code> <br/>► <code>ES2018.Promise</code> <br/>► <code>ES2018.RegExp</code> <br/>► <code>ESNext.AsyncIterable</code> <br/>► <code>ESNext.Array</code> <br/>► <code>ESNext.Intl</code> <br/>► <code>ESNext.Symbol</code> <br/><br/> 주의사항: <code>--lib</code>가 지정되지 않으면 라이브러리의 기본 리스트가 삽입됩니다. 주입되는 기본 라이브러리는 다음과 같습니다:  <br/> ► <code>--target ES5</code>: <code>DOM,ES5,ScriptHost</code><br/>  ► <code>--target ES6</code>: <code>DOM,ES6,DOM.Iterable,ScriptHost</code></td>\n</tr>\n<tr>\n<td><code>--listEmittedFiles</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>컴파일의 일부로 생성된 파일의 이름을 출력합니다.</td>\n</tr>\n<tr>\n<td><code>--listFiles</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>컴파일에 포함된 파일의 이름을 출력합니다.</td>\n</tr>\n<tr>\n<td><code>--locale</code></td>\n<td><code>string</code></td>\n<td><em>(플랫폼 별)</em></td>\n<td>오류 메시지를 표시하는 데 사용할 지역화, 예: en-us. <br/>가능한 값은 다음과 같습니다:  <br/>► 영어 (US): <code>en</code> <br/>► 체코어: <code>cs</code> <br/>► 독일어: <code>de</code> <br/>► 스페인어: <code>es</code> <br/>► 프랑스어: <code>fr</code> <br/>► 이탈리아어: <code>it</code> <br/>► 일본어: <code>ja</code> <br/>► 한국어: <code>ko</code> <br/>► 폴란드어: <code>pl</code> <br/>► 포르투갈어(브라질): <code>pt-BR</code> <br/>► 러시아어: <code>ru</code> <br/>► 터키어: <code>tr</code> <br/>► 중국어 간체: <code>zh-CN</code>  <br/>► 중국어 번체: <code>zh-TW</code></td>\n</tr>\n<tr>\n<td><code>--mapRoot</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>디버거가 생성된 위치가 아닌 맵 파일의 위치를 지정합니다. .map 파일이 .js 파일과 다른 위치에 런타임 시 위치할 경우 이 옵션을 사용하세요. 지정된 위치는 sourceMap에 포함되어 맵 파일이 위치할 디버거를 지정합니다. 이 플래그는 지정된 경로를 작성하지 않고 해당 위치에 맵 파일을 생성합니다. 대신 파일을 지정된 경로로 이동하는 빌드 후 단계를 작성하십시오.</td>\n</tr>\n<tr>\n<td><code>--maxNodeModuleJsDepth</code></td>\n<td><code>number</code></td>\n<td><code>0</code></td>\n<td>node_modules 및 로드 JavaScript 파일 아래에서 검색할 최대 의존성 깊이. <code>--allowJs</code>에만 적용됩니다.</td>\n</tr>\n<tr>\n<td><code>--module</code><br/><code>-m</code></td>\n<td><code>string</code></td>\n<td><code>target === \"ES3\" or \"ES5\" ? \"CommonJS\" : \"ES6\"</code></td>\n<td>모듈 코드 생성 지정: <code>\"None\"</code>, <code>\"CommonJS\"</code>, <code>\"AMD\"</code>, <code>\"System\"</code>, <code>\"UMD\"</code>, <code>\"ES6\"</code>, <code>\"ES2015\"</code> 또는 <code>\"ESNext\"</code>.<br/>► <code>\"AMD\"</code>와 <code>\"System\"</code>만 <code>--outFile</code>과 함께 사용할 수 있습니다.<br/>► <code>\"ES6\"</code>와 <code>\"ES2015\"</code> 값은 <code>\"ES5\"</code> 또는 이하를 대상으로 할 때 사용할 수 있습니다.</td>\n</tr>\n<tr>\n<td><code>--moduleResolution</code></td>\n<td><code>string</code></td>\n<td><code>module === \"AMD\" or \"System\" or \"ES6\" ?  \"Classic\" : \"Node\"</code></td>\n<td>모듈 해석 방법 결정. Node.js/io.js 스타일 해석의 경우, <code>\"Node\"</code> 또는 <code>\"Classic\"</code> 중 하나입니다. 자세한 내용은 <a href=\"./module-resolution.md\">모듈 해석 문서</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--newLine</code></td>\n<td><code>string</code></td>\n<td><em>(플랫폼 별)</em></td>\n<td>파일을 내보낼 때 사용되는 지정된 라인 끝의 시퀀스 사용: <code>\"crlf\"</code> (윈도우) 또는 <code>\"lf\"</code> (유닉스).”</td>\n</tr>\n<tr>\n<td><code>--noEmit</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>출력을 내보내지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noEmitHelpers</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>컴파일된 출력에서는 <code>__extends</code>와 같은 커스텀 헬퍼 함수를 생성하지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noEmitOnError</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>오류가 보고된 경우 출력을 내보내지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noErrorTruncation</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>오류 메세지를 줄이지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noFallthroughCasesInSwitch</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>스위치 문에 fallthrough 케이스에 대한 오류를 보고합니다.</td>\n</tr>\n<tr>\n<td><code>--noImplicitAny</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>any</code> 타입으로 암시한 표현식과 선언에 오류를 발생시킵니다.</td>\n</tr>\n<tr>\n<td><code>--noImplicitReturns</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>함수의 모든 코드 경로에 반환값이 없을 때 오류를 보고합니다.</td>\n</tr>\n<tr>\n<td><code>--noImplicitThis</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>any</code> 타입으로 암시한 <code>this</code> 표현식에 오류를 보고합니다.</td>\n</tr>\n<tr>\n<td><code>--noImplicitUseStrict</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>모듈 출력에 <code>\"use strict\"</code> 지시자를 내보내지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noLib</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>기본 라이브러리 파일(<code>lib.d.ts</code>)은 포함하지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noResolve</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>컴파일된 파일 목록에 트리플-슬래시 참조 또는 모듈 임포트 대상을 추가하지 않습니다.</td>\n</tr>\n<tr>\n<td><code>--noStrictGenericChecks</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>함수 타입에서 제네릭 시그니처의 엄격한 검사를 비활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--noUnusedLocals</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>사용하지 않는 지역 변수에 대한 오류를 보고합니다.</td>\n</tr>\n<tr>\n<td><code>--noUnusedParameters</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>사용하지 않는 매개 변수에 대한 오류를 보고합니다.</td>\n</tr>\n<tr>\n<td><del><code>--out</code></del></td>\n<td><code>string</code></td>\n<td></td>\n<td>더 이상 사용하지 않습니다. <code>--outFile</code>을 대신 사용합니다.</td>\n</tr>\n<tr>\n<td><code>--outDir</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>출력 구조를 디렉토리로 리다이렉트합니다.</td>\n</tr>\n<tr>\n<td><code>--outFile</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>출력을 단일 파일로 연결하여 방출합니다. 연결의 순서는 컴파일러에 전달된 파일 목록과 트리플-슬래시 참조 그리고 import와 함께 결정됩니다. 자세한 내용은 <a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#how-do-i-control-file-ordering-in-combined-output---out-\">출력 파일 순서 문서</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>paths</code><sup>[2]</sup></td>\n<td><code>Object</code></td>\n<td></td>\n<td><code>baseUrl</code>을 기준으로 관련된 위치에 모듈 이름의 경로 매핑 목록을 나열합니다. 자세한 내용은 <a href=\"./module-resolution.md#path-mapping\">모듈 해석 문서</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--preserveConstEnums</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>생성된 코드에 const enum 선언을 지우지 않습니다. 자세한 내용은 <a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#94-constant-enum-declarations\">const 열거형 문서</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--preserveSymlinks</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>symlinks를 실제 경로로 해석하지 않습니다. symlinked된 파일을 실제 파일처럼 다룹니다.</td>\n</tr>\n<tr>\n<td><code>--preserveWatchOutput</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>스크린을 지우는 대신에 예전 콘솔 출력을 감시 모드로 남겨둡니다</td>\n</tr>\n<tr>\n<td><code>--pretty</code></td>\n<td><code>boolean</code></td>\n<td>다른 프로그램으로 파이프하거나 출력을 파일로 리다이렉션하지 않으면 <code>true</code></td>\n<td>에러와 메시지를 색과 컨텍스트를 사용해서 스타일 지정합니다.</td>\n</tr>\n<tr>\n<td><code>--project</code><br/><code>-p</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>유효한 설정 파일이 지정된 프로젝트를 컴파일하세요.<br/>이 인수는 유효한 JSON 설정 파일의 파일 경로일 수도 있고 <code>tsconfig.json</code> 파일이 포함된 디렉토리의 경로일 수도 있습니다.<br/>자세한 내용은 <a href=\"/TypeScript-Website/4d0ca8bfd95f86587ebed840833b3e52/tsconfig.json.md\">tsconfig.json</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--reactNamespace</code></td>\n<td><code>string</code></td>\n<td><code>\"React\"</code></td>\n<td>더 이상 사용하지 않습니다. <code>--jsxFactory</code>를 대신 사용합니다.<br/><code>\"react\"</code> JSX emit을 대상으로 할 때 <code>createElement</code>와 <code>__spread</code>에 호출된 객체를 지정합니다.</td>\n</tr>\n<tr>\n<td><code>--removeComments</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>/*!</code>로 시작하는 copy-right 헤더 주석을 제외한 모든 주석을 제거합니다.</td>\n</tr>\n<tr>\n<td><code>--resolveJsonModule</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td><code>.json</code> 확장자로 import된 모듈을 포함합니다.</td>\n</tr>\n<tr>\n<td><code>--rootDir</code></td>\n<td><code>string</code></td>\n<td><em>(공통 루트 디렉토리는 input files 리스트에서 처리됩니다)</em></td>\n<td>입력 파일의 루트 디렉토리를 지정합니다. <code>--outDir</code>로 출력 디렉토리 구조를 제어하기 위해서만 사용합니다.</td>\n</tr>\n<tr>\n<td><code>rootDirs</code><sup>[2]</sup></td>\n<td><code>string[]</code></td>\n<td></td>\n<td>런타임 시 결합된 컨텐츠가 프로젝트의 구조를 나타내는 <i>루트</i> 폴더 목록입니다. 자세한 내용은 <a href=\"./module-resolution.md#virtual-directories-with-rootdirs\">모듈 해석 문서</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--showConfig</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>다른 입력 옵션 및 구성 파일을 사용하여 빌드를 실제로 실행하는 대신 출력에 마지막 암시적 구성 파일을 표시하십시오.</td>\n</tr>\n<tr>\n<td><code>--skipDefaultLibCheck</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>더 이상 사용하지 않습니다. <code>--skipLibCheck</code>를 대신 사용합니다.<br/><a href=\"./triple-slash-directives.md#-reference-no-default-libtrue\">기본 라이브러리 선언 파일</a>의 타입 검사를 건너뜁니다.</td>\n</tr>\n<tr>\n<td><code>--skipLibCheck</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>모든 선언 파일(<code>*.d.ts</code>)의 타입 검사를 건너뜁니다.</td>\n</tr>\n<tr>\n<td><code>--sourceMap</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>해당하는 <code>.map</code> 파일을 생성합니다.</td>\n</tr>\n<tr>\n<td><code>--sourceRoot</code></td>\n<td><code>string</code></td>\n<td></td>\n<td>디버거가 소스 위치 대신 TypeScript 파일을 찾아야 하는 위치를 지정합니다. 설계 시점에 소스가 아닌 런타임에 소스가 있는 경우 이 옵션을 사용하세요. 지정한 위치는 소스 파일이 위치할 디버깅 위치를 지정하기 위해 소스 맵에 포함됩니다.</td>\n</tr>\n<tr>\n<td><code>--strict</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>모든 엄격한 타입 검사 옵션을 활성화합니다. <br/><code>--strict</code>를 활성화하면 <code>--noImplicitAny</code>, <code>--noImplicitThis</code>, <code>--alwaysStrict</code>, <code>--strictNullChecks</code> 및 <code>--strictFunctionTypes</code>이 가능합니다.</td>\n</tr>\n<tr>\n<td><code>--strictBindCallApply</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>함수에서 <code>bind</code>, <code>call</code> 그리고 <code>apply</code> 메서드의 더 엄격한 검사를 활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--strictFunctionTypes</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>함수 타입에 대한 bivariant 매개변수를 비활성화합니다.</td>\n</tr>\n<tr>\n<td><code>--strictPropertyInitialization</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>undefined가 아닌 클래스 프로퍼티가 생성자에서 초기화 되도록 합니다. 이 옵션을 적용하려면 <code>--strictNullChecks</code>가 활성화되어야 합니다.</td>\n</tr>\n<tr>\n<td><code>--strictNullChecks</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>엄격한 null 검사 모드에서는 <code>null</code>과 <code>undefined</code> 값이 모든 타입의 도메인에 있지 않고 그 자체와 <code>any</code>만 할당할 수  있습니다(한 가지 예외사항은 <code>undefined</code> 또한 <code>void</code>에 할당 가능하다는 것입니다).</td>\n</tr>\n<tr>\n<td><code>--suppressExcessPropertyErrors</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>객체 리터럴에 대한 프로퍼티 초과 검사를 억제합니다.</td>\n</tr>\n<tr>\n<td><code>--suppressImplicitAnyIndexErrors</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>인덱스 시그니처가 없는 객체를 인덱싱하는 경우 <code>--noImplicitAny</code> 억제합니다. 오류를 시그니처 자세한 내용은 <a href=\"https://github.com/Microsoft/TypeScript/issues/1232#issuecomment-64510362\">#1232 이슈</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--target</code><br/><code>-t</code></td>\n<td><code>string</code></td>\n<td><code>\"ES3\"</code></td>\n<td>ECMAScript 대상 버전 지정: <br/>► <code>\"ES3\"</code> (기본 값) <br/>► <code>\"ES5\"</code> <br/>► <code>\"ES6\"</code>/<code>\"ES2015\"</code> <br/>► <code>\"ES2016\"</code> <br/>► <code>\"ES2017\"</code> <br/>► <code>\"ES2018\"</code> <br/>► <code>\"ES2019\"</code> <br/>► <code>\"ES2020\"</code> <br/>► <code>\"ESNext\"</code> <br/><br/> 주의사항: <code>\"ESNext\"</code>는 최신 <a href=\"https://github.com/tc39/proposals\">ES 제안 기능</a>을 대상으로 합니다.</td>\n</tr>\n<tr>\n<td><code>--traceResolution</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>모듈 해석 로그 메세지를 보고합니다.</td>\n</tr>\n<tr>\n<td><code>--tsBuildInfoFile</code></td>\n<td><code>string</code></td>\n<td><code>.tsbuildinfo</code></td>\n<td>증분 빌드 정보를 저장할 파일을 지정합니다.</td>\n</tr>\n<tr>\n<td><code>--types</code></td>\n<td><code>string[]</code></td>\n<td></td>\n<td>타입 정의가 포함될 이름의 목록. 자세한 내용은 <a href=\"./tsconfig.json.md#types-typeroots-and-types\">@types, —typeRoots 및 —types</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--typeRoots</code></td>\n<td><code>string[]</code></td>\n<td></td>\n<td>타입 정의가 포함될 폴더의 목록. 자세한 내용은 <a href=\"./tsconfig.json.md#types-typeroots-and-types\">@types, —typeRoots 및 —types</a>를 참조하세요.</td>\n</tr>\n<tr>\n<td><code>--version</code><br/><code>-v</code></td>\n<td></td>\n<td></td>\n<td>컴파일러의 버전을 출력합니다.</td>\n</tr>\n<tr>\n<td><code>--watch</code><br/><code>-w</code></td>\n<td></td>\n<td></td>\n<td>컴파일러를 감시 모드로 실행합니다. 입력 파일을 감시하여 변경 시 다시 컴파일합니다. 감시 파일과 디렉터리의 구현은 환경 변수를 사용하여 구성합니다. 더 자세한 내용은 <a href=\"./configuring-watch.md\">감시 구성하기</a>를 보세요.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><sup>[1]</sup> 이 옵션은 실험단계입니다.</li>\n<li><sup>[2]</sup> 이 옵션은 <code>tsconfig.json</code>에서만 허용되며 커맨드 라인에서는 허용되지 않습니다.</li>\n</ul>\n<h2 id=\"관련사항-related\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8%EC%82%AC%ED%95%AD-related\" aria-label=\"관련사항 related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련사항 (Related)</h2>\n<ul>\n<li>각 옵션에 대한 상세한 설명은 <a href=\"/TypeScript-Website/tsconfig\">TSConfig 레퍼런스</a>에 있습니다.</li>\n<li><a href=\"/TypeScript-Website/docs/handbook/tsconfig-json.html\"><code>tsconfig.json</code></a> 파일에서 컴파일러 옵션 설정하기</li>\n<li><a href=\"/TypeScript-Website/docs/handbook/compiler-options-in-msbuild.html\">MSBuild projects</a> 프로젝트에서 컴파일러 옵션 설정하기</li>\n</ul>","headings":[{"value":"CLI로 사용하기 (Using the CLI)","depth":2},{"value":"컴파일러 옵션 (Compiler Options)","depth":2},{"value":"관련사항 (Related)","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/compiler-options.html","title":"tsc CLI Options","disable_toc":true,"handbook":null,"oneline":"A very high-level overview of the CLI compiler options for tsc","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"slug":"/ko/docs/handbook/compiler-options.html","repoPath":"/packages/documentation/copy/ko/project-config/Compiler Options.md","lang":"ko","modifiedTime":"2022-12-15T08:47:32.412Z"}},"staticQueryHashes":[]}
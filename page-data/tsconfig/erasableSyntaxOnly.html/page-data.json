{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/erasableSyntaxOnly.html","result":{"pageContext":{"title":"erasableSyntaxOnly","lang":"en","html":"<p>Node.js <a href=\"https://nodejs.org/api/typescript.html#type-stripping\">supports running TypeScript files directly</a> as of v23.6;\nhowever, only TypeScript-specific syntax that does not have runtime semantics are supported under this mode.\nIn other words, it must be possible to easily <em>erase</em> any TypeScript-specific syntax from a file, leaving behind a valid JavaScript file.</p>\n<p>That means the following constructs are not supported:</p>\n<ul>\n<li><code>enum</code> declarations</li>\n<li><code>namespace</code>s and <code>module</code>s with runtime code</li>\n<li>parameter properties in classes</li>\n<li>Non-ECMAScript <code>import =</code> and <code>export =</code> assignments</li>\n</ul>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #008000\">// ❌ error: An `import ... = require(...)` alias</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ error: A namespace with runtime code.</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">container</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">method</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ error: An `import =` alias</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">container</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ❌ error: Parameter properties</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) { }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ error: An `export =` assignment.</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Point</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ error: An enum declaration.</span></div><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Direction</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">Up</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">Down</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">Left</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0070C1\">Right</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Similar tools like <a href=\"https://github.com/bloomberg/ts-blank-space\">ts-blank-space</a> or <a href=\"https://github.com/nodejs/amaro\">Amaro</a> (the underlying library for type-stripping in Node.js) have the same limitations.\nThese tools will provide helpful error messages if they encounter code that doesn’t meet these requirements, but you still won’t find out your code doesn’t work until you actually try to run it.</p>\n<p>The <code>--erasableSyntaxOnly</code> flag will cause TypeScript to error on most TypeScript-specific constructs that have runtime behavior.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container' tabindex='0'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) { }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//          ~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Typically, you will want to combine this flag with the <code>--verbatimModuleSyntax</code>, which ensures that a module contains the appropriate import syntax, and that import elision does not take place.</p>","redirectHref":"/tsconfig#erasableSyntaxOnly"}},"staticQueryHashes":[],"slicesMap":{}}
{"version":3,"file":"17821066377c4486a980330106160c805ea5b4a9-b5a78100d1ac16f1a5a5.js","mappings":"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","sources":["webpack://typescriptlang-org/./src/lib/playgroundURLs.ts","webpack://typescriptlang-org/../src/utils.ts","webpack://typescriptlang-org/../src/index.ts","webpack://typescriptlang-org/../src/validation.ts","webpack://typescriptlang-org/../../node_modules/.pnpm/ts-debounce@2.3.0/node_modules/ts-debounce/dist/src/index.esm.js","webpack://typescriptlang-org/../ts-twoslasher/dist/ sync ^.*th$","webpack://typescriptlang-org/../typescript-vfs/dist/ sync"],"sourcesContent":["import { withPrefix } from \"gatsby\"\n\nexport const getPlaygroundUrls = () => {\n  // This will get switched out in CI by:\n  // scripts/cacheBustPlayground.mjs\n\n  // This should always be a single slash string in the codebase: \"/\"\n  const commitPrefix = \"/\"\n\n  return {\n    sandboxRoot: withPrefix(`/js${commitPrefix}sandbox`),\n    playgroundRoot: withPrefix(`/js${commitPrefix}playground`),\n    playgroundWorker: withPrefix(`/js${commitPrefix}playground-worker/index.js`),\n  }\n}\n","import { TwoslashError } from \"./\"\n\nexport function escapeHtml(text: string) {\n  return text.replace(/</g, \"&lt;\")\n}\n\nexport function strrep(text: string, count: number) {\n  let s = \"\"\n  for (let i = 0; i < count; i++) {\n    s += text\n  }\n  return s\n}\n\nexport function textToAnchorName(text: string) {\n  return text\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/`|#|\\//g, \"\")\n}\n\nexport function fileNameToUrlName(s: string) {\n  return s.replace(/ /g, \"-\").replace(/#/g, \"sharp\").toLowerCase()\n}\n\nexport function parsePrimitive(value: string, type: string): any {\n  switch (type) {\n    case \"number\":\n      return +value\n    case \"string\":\n      return value\n    case \"boolean\":\n      return value.toLowerCase() === \"true\" || value.length === 0\n  }\n\n  throw new TwoslashError(\n    `Unknown primitive value in compiler flag`,\n    `The only recognized primitives are number, string and boolean. Got ${type} with ${value}.`,\n    `This is likely a typo.`\n  )\n}\n\nexport function cleanMarkdownEscaped(code: string) {\n  code = code.replace(/¨D/g, \"$\")\n  code = code.replace(/¨T/g, \"~\")\n  return code\n}\n\nexport function typesToExtension(types: string) {\n  const map: Record<string, string> = {\n    js: \"js\",\n    javascript: \"js\",\n    ts: \"ts\",\n    typescript: \"ts\",\n    tsx: \"tsx\",\n    jsx: \"jsx\",\n    json: \"json\",\n    jsn: \"json\",\n  }\n\n  if (map[types]) return map[types]\n\n  throw new TwoslashError(\n    `Unknown TypeScript extension given to Twoslash`,\n    `Received ${types} but Twoslash only accepts: ${Object.keys(map)} `,\n    ``\n  )\n}\n\nexport function getIdentifierTextSpans(ts: typeof import(\"typescript\"), sourceFile: import(\"typescript\").SourceFile) {\n  const textSpans: { span: import(\"typescript\").TextSpan; text: string }[] = []\n  checkChildren(sourceFile)\n  return textSpans\n\n  function checkChildren(node: import(\"typescript\").Node) {\n    ts.forEachChild(node, child => {\n      if (ts.isIdentifier(child)) {\n        const start = child.getStart(sourceFile, false)\n        textSpans.push({ span: ts.createTextSpan(start, child.end - start), text: child.getText(sourceFile) })\n      }\n      checkChildren(child)\n    })\n  }\n}\n\nexport function stringAroundIndex(string: string, index: number) {\n  const arr = [\n    string[index - 3],\n    string[index - 2],\n    string[index - 1],\n    \">\",\n    string[index],\n    \"<\",\n    string[index + 1],\n    string[index + 2],\n    string[index + 3],\n  ]\n  return arr.filter(Boolean).join(\"\")\n}\n\n/** Came from https://ourcodeworld.com/articles/read/223/how-to-retrieve-the-closest-word-in-a-string-with-a-given-index-in-javascript */\nexport function getClosestWord(str: string, pos: number) {\n  // Make copies\n  str = String(str)\n  pos = Number(pos) >>> 0\n\n  // Search for the word's beginning and end.\n  var left = str.slice(0, pos + 1).search(/\\S+$/),\n    right = str.slice(pos).search(/\\s/)\n\n  // The last word in the string is a special case.\n  if (right < 0) {\n    return {\n      word: str.slice(left),\n      startPos: left,\n    }\n  }\n  // Return the word, using the located bounds to extract it from the string.\n  return {\n    word: str.slice(left, right + pos),\n    startPos: left,\n  }\n}\n","let hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) { }\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\n\ntype LZ = typeof import(\"lz-string\")\ntype TS = typeof import(\"typescript\")\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\n\nimport { parsePrimitive, cleanMarkdownEscaped, typesToExtension, getIdentifierTextSpans, getClosestWord } from \"./utils\"\nimport { validateInput, validateCodeForErrors } from \"./validation\"\n\nimport { createSystem, createVirtualTypeScriptEnvironment, createFSBackedSystem } from \"@typescript/vfs\"\n\nconst log = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\n// Hacking in some internal stuff\ndeclare module \"typescript\" {\n  type Option = {\n    name: string\n    type: \"list\" | \"boolean\" | \"number\" | \"string\" | Map<string, any>\n    element?: Option\n  }\n\n  const optionDeclarations: Array<Option>\n}\n\ntype QueryPosition = {\n  kind: \"query\" | \"completion\"\n  offset: number\n  text: string | undefined\n  docs: string | undefined\n  line: number\n}\n\ntype PartialQueryResults = {\n  kind: \"query\"\n  text: string\n  docs: string | undefined\n  line: number\n  offset: number\n  file: string\n}\n\ntype PartialCompletionResults = {\n  kind: \"completions\"\n  completions: import(\"typescript\").CompletionEntry[]\n  completionPrefix: string\n\n  line: number\n  offset: number\n  file: string\n}\n\ntype HighlightPosition = TwoSlashReturn[\"highlights\"][number]\n\nexport class TwoslashError extends Error {\n  public title: string\n  public description: string\n  public recommendation: string\n  public code: string | undefined\n\n  constructor(title: string, description: string, recommendation: string, code?: string | undefined) {\n    let message = `\n## ${title}\n\n${description}\n`\n    if (recommendation) {\n      message += `\\n${recommendation}`\n    }\n\n    if (code) {\n      message += `\\n${code}`\n    }\n\n    super(message)\n    this.title = title\n    this.description = description\n    this.recommendation = recommendation\n    this.code = code\n  }\n}\n\nfunction filterHighlightLines(codeLines: string[]): { highlights: HighlightPosition[]; queries: QueryPosition[] } {\n  const highlights: HighlightPosition[] = []\n  const queries: QueryPosition[] = []\n\n  let nextContentOffset = 0\n  let contentOffset = 0\n  let removedLines = 0\n\n  for (let i = 0; i < codeLines.length; i++) {\n    const line = codeLines[i]\n    const moveForward = () => {\n      contentOffset = nextContentOffset\n      nextContentOffset += line.length + 1\n    }\n\n    const stripLine = (logDesc: string) => {\n      log(`Removing line ${i} for ${logDesc}`)\n\n      removedLines++\n      codeLines.splice(i, 1)\n      i--\n    }\n\n    // We only need to run regexes over lines with comments\n    if (!line.includes(\"//\")) {\n      moveForward()\n    } else {\n      const highlightMatch = /^\\s*\\/\\/\\s*\\^+( .+)?$/.exec(line)\n      const queryMatch = /^\\s*\\/\\/\\s*\\^\\?\\s*$/.exec(line)\n      // https://regex101.com/r/2yDsRk/1\n      const removePrettierIgnoreMatch = /^\\s*\\/\\/ prettier-ignore$/.exec(line)\n      const completionsQuery = /^\\s*\\/\\/\\s*\\^\\|$/.exec(line)\n\n      if (queryMatch !== null) {\n        const start = line.indexOf(\"^\")\n        queries.push({ kind: \"query\", offset: start, text: undefined, docs: undefined, line: i + removedLines - 1 })\n        stripLine(\"having a query\")\n      } else if (highlightMatch !== null) {\n        const start = line.indexOf(\"^\")\n        const length = line.lastIndexOf(\"^\") - start + 1\n        const description = highlightMatch[1] ? highlightMatch[1].trim() : \"\"\n        highlights.push({\n          kind: \"highlight\",\n          offset: start + contentOffset,\n          length,\n          text: description,\n          line: i + removedLines - 1,\n          start,\n        })\n\n        stripLine(\"having a highlight\")\n      } else if (removePrettierIgnoreMatch !== null) {\n        stripLine(\"being a prettier ignore\")\n      } else if (completionsQuery !== null) {\n        const start = line.indexOf(\"^\")\n        // prettier-ignore\n        queries.push({ kind: \"completion\", offset: start, text: undefined, docs: undefined, line: i + removedLines - 1 })\n        stripLine(\"having a completion query\")\n      } else {\n        moveForward()\n      }\n    }\n  }\n  return { highlights, queries }\n}\n\nfunction getOptionValueFromMap(name: string, key: string, optMap: Map<string, string>) {\n  const result = optMap.get(key.toLowerCase())\n  log(`Get ${name} mapped option: ${key} => ${result}`)\n  if (result === undefined) {\n    const keys = Array.from(optMap.keys() as any)\n\n    throw new TwoslashError(\n      `Invalid inline compiler value`,\n      `Got ${key} for ${name} but it is not a supported value by the TS compiler.`,\n      `Allowed values: ${keys.join(\",\")}`\n    )\n  }\n  return result\n}\n\nfunction setOption(name: string, value: string, opts: CompilerOptions, ts: TS) {\n  log(`Setting ${name} to ${value}`)\n\n  for (const opt of ts.optionDeclarations) {\n    if (opt.name.toLowerCase() === name.toLowerCase()) {\n      switch (opt.type) {\n        case \"number\":\n        case \"string\":\n        case \"boolean\":\n          opts[opt.name] = parsePrimitive(value, opt.type)\n          break\n\n        case \"list\":\n          const elementType = opt.element!.type\n          const strings = value.split(\",\")\n          if (typeof elementType === \"string\") {\n            opts[opt.name] = strings.map(v => parsePrimitive(v, elementType))\n          } else {\n            opts[opt.name] = strings.map(v => getOptionValueFromMap(opt.name, v, elementType as Map<string, string>))\n          }\n          break\n\n        default:\n          // It's a map!\n          const optMap = opt.type as Map<string, string>\n          opts[opt.name] = getOptionValueFromMap(opt.name, value, optMap)\n          break\n      }\n      return\n    }\n  }\n\n  throw new TwoslashError(\n    `Invalid inline compiler flag`,\n    `There isn't a TypeScript compiler flag called '${name}'.`,\n    `This is likely a typo, you can check all the compiler flags in the TSConfig reference, or check the additional Twoslash flags in the npm page for @typescript/twoslash.`\n  )\n}\n\nconst booleanConfigRegexp = /^\\/\\/\\s?@(\\w+)$/\n\n// https://regex101.com/r/8B2Wwh/1\nconst valuedConfigRegexp = /^\\/\\/\\s?@(\\w+):\\s?(.+)$/\n\nfunction filterCompilerOptions(codeLines: string[], defaultCompilerOptions: CompilerOptions, ts: TS) {\n  const options = { ...defaultCompilerOptions }\n  for (let i = 0; i < codeLines.length;) {\n    let match\n    if ((match = booleanConfigRegexp.exec(codeLines[i]))) {\n      options[match[1]] = true\n      setOption(match[1], \"true\", options, ts)\n    } else if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      // Skip a filename tag, which should propagate through this stage\n      if (match[1] === \"filename\") {\n        i++\n        continue\n      }\n      setOption(match[1], match[2], options, ts)\n    } else {\n      i++\n      continue\n    }\n    codeLines.splice(i, 1)\n  }\n  return options\n}\n\nfunction filterCustomTags(codeLines: string[], customTags: string[]) {\n  const tags: TwoSlashReturn[\"tags\"] = []\n\n  for (let i = 0; i < codeLines.length;) {\n    let match\n    if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      if (customTags.includes(match[1])) {\n        tags.push({ name: match[1], line: i, annotation: codeLines[i].split(\"@\" + match[1] + \": \")[1] })\n        codeLines.splice(i, 1)\n      }\n    }\n    i++\n  }\n  return tags\n}\n\n/** Available inline flags which are not compiler flags */\nexport interface ExampleOptions {\n  /** Lets the sample suppress all error diagnostics */\n  noErrors: boolean\n  /** An array of TS error codes, which you write as space separated - this is so the tool can know about unexpected errors */\n  errors: number[]\n  /** Shows the JS equivalent of the TypeScript code instead */\n  showEmit: boolean\n  /**\n   * Must be used with showEmit, lets you choose the file to present instead of the source - defaults to index.js which\n   * means when you just use `showEmit` above it shows the transpiled JS.\n   */\n  showEmittedFile: string\n\n  /** Whether to disable the pre-cache of LSP calls for interesting identifiers, defaults to false */\n  noStaticSemanticInfo: boolean\n  /** Declare that the TypeScript program should edit the fsMap which is passed in, this is only useful for tool-makers, defaults to false */\n  emit: boolean\n  /** Declare that you don't need to validate that errors have corresponding annotations, defaults to false */\n  noErrorValidation: boolean\n}\n\n// Keys in this object are used to filter out handbook options\n// before compiler options are set.\n\nconst defaultHandbookOptions: Partial<ExampleOptions> = {\n  errors: [],\n  noErrors: false,\n  showEmit: false,\n  showEmittedFile: undefined,\n  noStaticSemanticInfo: false,\n  emit: false,\n  noErrorValidation: false,\n}\n\nfunction filterHandbookOptions(codeLines: string[]): ExampleOptions {\n  const options: any = { ...defaultHandbookOptions }\n  for (let i = 0; i < codeLines.length; i++) {\n    let match\n    if ((match = booleanConfigRegexp.exec(codeLines[i]))) {\n      if (match[1] in options) {\n        options[match[1]] = true\n        log(`Setting options.${match[1]} to true`)\n        codeLines.splice(i, 1)\n        i--\n      }\n    } else if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      if (match[1] in options) {\n        options[match[1]] = match[2]\n        log(`Setting options.${match[1]} to ${match[2]}`)\n        codeLines.splice(i, 1)\n        i--\n      }\n    }\n  }\n\n  // Edge case the errors object to turn it into a string array\n  if (\"errors\" in options && typeof options.errors === \"string\") {\n    options.errors = options.errors.split(\" \").map(Number)\n    log(\"Setting options.error to \", options.errors)\n  }\n\n  return options\n}\n\nexport interface TwoSlashReturn {\n  /** The output code, could be TypeScript, but could also be a JS/JSON/d.ts */\n  code: string\n\n  /** The new extension type for the code, potentially changed if they've requested emitted results */\n  extension: string\n\n  /** Requests to highlight a particular part of the code */\n  highlights: {\n    kind: \"highlight\"\n    /** The index of the text in the file */\n    start: number\n    /** What line is the highlighted identifier on? */\n    line: number\n    /** At what index in the line does the caret represent  */\n    offset: number\n    /** The text of the token which is highlighted */\n    text?: string\n    /** The length of the token */\n    length: number\n  }[]\n\n  /** An array of LSP responses identifiers in the sample  */\n  staticQuickInfos: {\n    /** The string content of the node this represents (mainly for debugging) */\n    targetString: string\n    /** The base LSP response (the type) */\n    text: string\n    /** Attached JSDoc info */\n    docs: string | undefined\n    /** The index of the text in the file */\n    start: number\n    /** how long the identifier */\n    length: number\n    /** line number where this is found */\n    line: number\n    /** The character on the line */\n    character: number\n  }[]\n\n  /** Requests to use the LSP to get info for a particular symbol in the source */\n  queries: {\n    kind: \"query\" | \"completions\"\n    /** What line is the highlighted identifier on? */\n    line: number\n    /** At what index in the line does the caret represent  */\n    offset: number\n    /** The text of the token which is highlighted */\n    text?: string\n    /** Any attached JSDocs */\n    docs?: string | undefined\n    /** The token start which the query indicates  */\n    start: number\n    /** The length of the token */\n    length: number\n    /** Results for completions at a particular point */\n    completions?: import(\"typescript\").CompletionEntry[]\n    /* Completion prefix e.g. the letters before the cursor in the word so you can filter */\n    completionsPrefix?: string\n  }[]\n\n  /** The extracted twoslash commands for any custom tags passed in via customTags */\n  tags: {\n    /** What was the name of the tag */\n    name: string\n    /** Where was it located in the original source file */\n    line: number\n    /** What was the text after the `// @tag: ` string  (optional because you could do // @tag on it's own line without the ':') */\n    annotation?: string\n  }[]\n\n  /** Diagnostic error messages which came up when creating the program */\n  errors: {\n    renderedMessage: string\n    id: string\n    category: 0 | 1 | 2 | 3\n    code: number\n    start: number | undefined\n    length: number | undefined\n    line: number | undefined\n    character: number | undefined\n  }[]\n\n  /** The URL for this sample in the playground */\n  playgroundURL: string\n}\n\nexport interface TwoSlashOptions {\n  /** Allows setting any of the handbook options from outside the function, useful if you don't want LSP identifiers */\n  defaultOptions?: Partial<ExampleOptions>\n\n  /** Allows setting any of the compiler options from outside the function */\n  defaultCompilerOptions?: CompilerOptions\n\n  /** Allows applying custom transformers to the emit result, only useful with the showEmit output */\n  customTransformers?: CustomTransformers\n\n  /** An optional copy of the TypeScript import, if missing it will be require'd. */\n  tsModule?: TS\n\n  /** Absolute path to the directory to look up built-in TypeScript .d.ts files. */\n  tsLibDirectory?: string\n\n  /** An optional copy of the lz-string import, if missing it will be require'd. */\n  lzstringModule?: LZ\n\n  /**\n   * An optional Map object which is passed into @typescript/vfs - if you are using twoslash on the\n   * web then you'll need this to set up your lib *.d.ts files. If missing, it will use your fs.\n   */\n  fsMap?: Map<string, string>\n\n  /** The cwd for the folder which the virtual fs should be overlaid on top of when using local fs, opts to process.cwd() if not present */\n  vfsRoot?: string\n\n  /** A set of known `// @[tags]` tags to extract and not treat as a comment */\n  customTags?: string[]\n}\n\n/**\n * Runs the checker against a TypeScript/JavaScript code sample returning potentially\n * difference code, and a set of annotations around how it works.\n *\n * @param code The twoslash markup'd code\n * @param extension For example: \"ts\", \"tsx\", \"typescript\", \"javascript\" or \"js\".\n * @param options Additional options for twoslash\n */\nexport function twoslasher(code: string, extension: string, options: TwoSlashOptions = {}): TwoSlashReturn {\n  const ts: TS = options.tsModule ?? require(\"typescript\")\n  const lzstring: LZ = options.lzstringModule ?? require(\"lz-string\")\n\n  const originalCode = code\n  const safeExtension = typesToExtension(extension)\n  const defaultFileName = \"index.\" + safeExtension\n\n  log(`\\n\\nLooking at code: \\n\\`\\`\\`${safeExtension}\\n${code}\\n\\`\\`\\`\\n`)\n\n  const defaultCompilerOptions = {\n    strict: true,\n    target: ts.ScriptTarget.ES2016,\n    allowJs: true,\n    ...(options.defaultCompilerOptions ?? {}),\n  }\n\n  validateInput(code)\n\n  code = cleanMarkdownEscaped(code)\n\n  // NOTE: codeLines is mutated by the below functions:\n  const codeLines = code.split(/\\r\\n?|\\n/g)\n\n  let tags: TwoSlashReturn[\"tags\"] = options.customTags ? filterCustomTags(codeLines, options.customTags) : []\n  const handbookOptions = { ...filterHandbookOptions(codeLines), ...options.defaultOptions }\n  const compilerOptions = filterCompilerOptions(codeLines, defaultCompilerOptions, ts)\n\n  // Handle special casing the lookup for when using jsx preserve which creates .jsx files\n  if (!handbookOptions.showEmittedFile) {\n    handbookOptions.showEmittedFile =\n      compilerOptions.jsx && compilerOptions.jsx === ts.JsxEmit.Preserve ? \"index.jsx\" : \"index.js\"\n  }\n\n  const getRoot = () => {\n    const pa = \"pa\"\n    const path = require(pa + \"th\") as typeof import(\"path\")\n    const rootPath = options.vfsRoot || process.cwd()\n    return rootPath.split(path.sep).join(path.posix.sep)\n  }\n\n  // In a browser we want to DI everything, in node we can use local infra\n  const useFS = !!options.fsMap\n  const vfs = useFS && options.fsMap ? options.fsMap : new Map<string, string>()\n  const system = useFS ? createSystem(vfs) : createFSBackedSystem(vfs, getRoot(), ts, options.tsLibDirectory)\n  const fsRoot = useFS ? \"/\" : getRoot() + \"/\"\n\n  const env = createVirtualTypeScriptEnvironment(system, [], ts, compilerOptions, options.customTransformers)\n  const ls = env.languageService\n\n  code = codeLines.join(\"\\n\")\n\n  let partialQueries = [] as (PartialQueryResults | PartialCompletionResults)[]\n  let queries = [] as TwoSlashReturn[\"queries\"]\n  let highlights = [] as TwoSlashReturn[\"highlights\"]\n\n  const nameContent = splitTwoslashCodeInfoFiles(code, defaultFileName, fsRoot)\n  const sourceFiles = [\"js\", \"jsx\", \"ts\", \"tsx\"]\n\n  /** All of the referenced files in the markup */\n  const filenames = nameContent.map(nc => nc[0])\n\n  for (const file of nameContent) {\n    const [filename, codeLines] = file\n    const filetype = filename.split(\".\").pop() || \"\"\n\n    // Only run the LSP-y things on source files\n    const allowJSON = compilerOptions.resolveJsonModule && filetype === \"json\"\n    if (!sourceFiles.includes(filetype) && !allowJSON) {\n      continue\n    }\n\n    // Create the file in the vfs\n    const newFileCode = codeLines.join(\"\\n\")\n    env.createFile(filename, newFileCode)\n\n    const updates = filterHighlightLines(codeLines)\n    highlights = highlights.concat(updates.highlights)\n\n    // ------ Do the LSP lookup for the queries\n\n    const lspedQueries = updates.queries.map((q, i) => {\n      const sourceFile = env.getSourceFile(filename)!\n      const position = ts.getPositionOfLineAndCharacter(sourceFile, q.line, q.offset)\n      switch (q.kind) {\n        case \"query\": {\n          const quickInfo = ls.getQuickInfoAtPosition(filename, position)\n\n          // prettier-ignore\n          let text: string\n          let docs: string | undefined\n\n          if (quickInfo && quickInfo.displayParts) {\n            text = quickInfo.displayParts.map(dp => dp.text).join(\"\")\n            docs = quickInfo.documentation ? quickInfo.documentation.map(d => d.text).join(\"<br/>\") : undefined\n          } else {\n            throw new TwoslashError(\n              `Invalid QuickInfo query`,\n              `The request on line ${q.line} in ${filename} for quickinfo via ^? returned no from the compiler.`,\n              `This is likely that the x positioning is off.`\n            )\n          }\n\n          const queryResult: PartialQueryResults = {\n            kind: \"query\",\n            text,\n            docs,\n            line: q.line - i,\n            offset: q.offset,\n            file: filename,\n          }\n          return queryResult\n        }\n\n        case \"completion\": {\n          const completions = ls.getCompletionsAtPosition(filename, position - 1, {})\n          if (!completions && !handbookOptions.noErrorValidation) {\n            throw new TwoslashError(\n              `Invalid completion query`,\n              `The request on line ${q.line} in ${filename} for completions via ^| returned no completions from the compiler.`,\n              `This is likely that the positioning is off.`\n            )\n          }\n\n          const word = getClosestWord(sourceFile.text, position - 1)\n          const prefix = sourceFile.text.slice(word.startPos, position)\n          const lastDot = prefix.split(\".\").pop() || \"\"\n\n          const queryResult: PartialCompletionResults = {\n            kind: \"completions\",\n            completions: completions?.entries || [],\n            completionPrefix: lastDot,\n            line: q.line - i,\n            offset: q.offset,\n            file: filename,\n          }\n          return queryResult\n        }\n      }\n    })\n    partialQueries = partialQueries.concat(lspedQueries)\n\n    // Sets the file in the compiler as being without the comments\n    const newEditedFileCode = codeLines.join(\"\\n\")\n    env.updateFile(filename, newEditedFileCode)\n  }\n\n  // We need to also strip the highlights + queries from the main file which is shown to people\n  const allCodeLines = code.split(/\\r\\n?|\\n/g)\n  filterHighlightLines(allCodeLines)\n  code = allCodeLines.join(\"\\n\")\n\n  // Lets fs changes propagate back up to the fsMap\n  if (handbookOptions.emit) {\n    filenames.forEach(f => {\n      const filetype = f.split(\".\").pop() || \"\"\n      if (!sourceFiles.includes(filetype)) return\n\n      const output = ls.getEmitOutput(f)\n      output.outputFiles.forEach(output => {\n        system.writeFile(output.name, output.text)\n      })\n    })\n  }\n\n  // Code should now be safe to compile, so we're going to split it into different files\n  let errs: import(\"typescript\").Diagnostic[] = []\n  // Let because of a filter when cutting\n  let staticQuickInfos: TwoSlashReturn[\"staticQuickInfos\"] = []\n\n  // Iterate through the declared files and grab errors and LSP quickinfos\n  // const declaredFiles = Object.keys(fileMap)\n\n  filenames.forEach(file => {\n    const filetype = file.split(\".\").pop() || \"\"\n\n    // Only run the LSP-y things on source files\n    if (!sourceFiles.includes(filetype)) {\n      return\n    }\n\n    if (!handbookOptions.noErrors) {\n      errs = errs.concat(ls.getSemanticDiagnostics(file), ls.getSyntacticDiagnostics(file))\n    }\n\n    const source = env.sys.readFile(file)!\n    const sourceFile = env.getSourceFile(file)\n    if (!sourceFile) {\n      throw new TwoslashError(\n        `Could not find a  TypeScript sourcefile for '${file}' in the Twoslash vfs`,\n        `It's a little hard to provide useful advice on this error. Maybe you imported something which the compiler doesn't think is a source file?`,\n        ``\n      )\n    }\n\n    // Get all of the interesting quick info popover\n    if (!handbookOptions.showEmit) {\n      const fileContentStartIndexInModifiedFile = code.indexOf(source) == -1 ? 0 : code.indexOf(source)\n      const linesAbove = code.slice(0, fileContentStartIndexInModifiedFile).split(\"\\n\").length - 1\n\n      // Get all interesting identifiers in the file, so we can show hover info for it\n      const identifiers = handbookOptions.noStaticSemanticInfo ? [] : getIdentifierTextSpans(ts, sourceFile)\n      for (const identifier of identifiers) {\n        const span = identifier.span\n        const quickInfo = ls.getQuickInfoAtPosition(file, span.start)\n\n        if (quickInfo && quickInfo.displayParts) {\n          const text = quickInfo.displayParts.map(dp => dp.text).join(\"\")\n          const targetString = identifier.text\n          const docs = quickInfo.documentation ? quickInfo.documentation.map(d => d.text).join(\"\\n\") : undefined\n\n          // Get the position of the\n          const position = span.start + fileContentStartIndexInModifiedFile\n          // Use TypeScript to pull out line/char from the original code at the position + any previous offset\n          const burnerSourceFile = ts.createSourceFile(\"_.ts\", code, ts.ScriptTarget.ES2015)\n          const { line, character } = ts.getLineAndCharacterOfPosition(burnerSourceFile, position)\n\n          staticQuickInfos.push({ text, docs, start: position, length: span.length, line, character, targetString })\n        }\n      }\n\n      // Offset the queries for this file because they are based on the line for that one\n      // specific file, and not the global twoslash document. This has to be done here because\n      // in the above loops, the code for queries/highlights/etc hasn't been stripped yet.\n      partialQueries\n        .filter((q: any) => q.file === file)\n        .forEach(q => {\n          const pos =\n            ts.getPositionOfLineAndCharacter(sourceFile, q.line, q.offset) + fileContentStartIndexInModifiedFile\n\n          switch (q.kind) {\n            case \"query\": {\n              queries.push({\n                docs: q.docs,\n                kind: \"query\",\n                start: pos + fileContentStartIndexInModifiedFile,\n                length: q.text.length,\n                text: q.text,\n                offset: q.offset,\n                line: q.line + linesAbove + 1,\n              })\n              break\n            }\n            case \"completions\": {\n              queries.push({\n                completions: q.completions,\n                kind: \"completions\",\n                start: pos + fileContentStartIndexInModifiedFile,\n                completionsPrefix: q.completionPrefix,\n                length: 1,\n                offset: q.offset,\n                line: q.line + linesAbove + 1,\n              })\n            }\n          }\n        })\n    }\n  })\n\n  const relevantErrors = errs.filter(e => e.file && filenames.includes(e.file.fileName))\n\n  // A validator that error codes are mentioned, so we can know if something has broken in the future\n  if (!handbookOptions.noErrorValidation && relevantErrors.length) {\n    validateCodeForErrors(relevantErrors, handbookOptions, extension, originalCode, fsRoot)\n  }\n\n  let errors: TwoSlashReturn[\"errors\"] = []\n\n  // We can't pass the ts.DiagnosticResult out directly (it can't be JSON.stringified)\n  for (const err of relevantErrors) {\n    const codeWhereErrorLives = env.sys.readFile(err.file!.fileName)!\n    const lineOffset =\n      codeLines.findIndex(line => {\n        if (line.includes(`// @filename: `)) {\n          const fileName = line.split(\"// @filename: \")[1].trim()\n          return err.file!.fileName.endsWith(fileName)\n        }\n        return false\n      }) + 1\n    const fileContentStartIndexInModifiedFile = code.indexOf(codeWhereErrorLives)\n    const renderedMessage = ts.flattenDiagnosticMessageText(err.messageText, \"\\n\")\n    const id = `err-${err.code}-${err.start}-${err.length}`\n    const { line, character } = ts.getLineAndCharacterOfPosition(err.file!, err.start!)\n\n    errors.push({\n      category: err.category,\n      code: err.code,\n      length: err.length,\n      start: err.start ? err.start + fileContentStartIndexInModifiedFile : undefined,\n      line: line + lineOffset,\n      character,\n      renderedMessage,\n      id,\n    })\n  }\n\n  // Handle emitting files\n  if (handbookOptions.showEmit) {\n    // Get the file which created the file we want to show:\n    const emitFilename = handbookOptions.showEmittedFile || defaultFileName\n    const emitSourceFilename =\n      fsRoot + emitFilename.replace(\".jsx\", \"\").replace(\".js\", \"\").replace(/\\.d\\.([^\\.]+\\.)?[cm]?ts$/i, \"\").replace(\".map\", \"\")\n\n    let emitSource = filenames.find(f => f === emitSourceFilename + \".ts\" || f === emitSourceFilename + \".tsx\")\n\n    if (!emitSource && !compilerOptions.outFile) {\n      const allFiles = filenames.join(\", \")\n      // prettier-ignore\n      throw new TwoslashError(\n        `Could not find source file to show the emit for`,\n        `Cannot find the corresponding **source** file  ${emitFilename} for completions via ^| returned no quickinfo from the compiler.`,\n        `Looked for: ${emitSourceFilename} in the vfs - which contains: ${allFiles}`\n      )\n    }\n\n    // Allow outfile, in which case you need any file.\n    if (compilerOptions.outFile) {\n      emitSource = filenames[0]\n    }\n\n    const output = ls.getEmitOutput(emitSource!)\n    const file = output.outputFiles.find(\n      o => o.name === fsRoot + handbookOptions.showEmittedFile || o.name === handbookOptions.showEmittedFile\n    )\n\n    if (!file) {\n      const allFiles = output.outputFiles.map(o => o.name).join(\", \")\n      throw new TwoslashError(\n        `Cannot find the output file in the Twoslash VFS`,\n        `Looking for ${handbookOptions.showEmittedFile} in the Twoslash vfs after compiling`,\n        `Looked for\" ${fsRoot + handbookOptions.showEmittedFile} in the vfs - which contains ${allFiles}.`\n      )\n    }\n\n    code = file.text\n    extension = file.name.split(\".\").pop()!\n\n    // Remove highlights and queries, because it won't work across transpiles,\n    // though I guess source-mapping could handle the transition\n    highlights = []\n    partialQueries = []\n    staticQuickInfos = []\n  }\n\n  const zippedCode = lzstring.compressToEncodedURIComponent(originalCode)\n  const playgroundURL = `https://www.typescriptlang.org/play/#code/${zippedCode}`\n\n  // Cutting happens last, and it means editing the lines and character index of all\n  // the type annotations which are attached to a location\n\n  const cutString = \"// ---cut---\\n\"\n  if (code.includes(cutString)) {\n    // Get the place it is, then find the end and the start of the next line\n    const cutIndex = code.indexOf(cutString) + cutString.length\n    const lineOffset = code.substr(0, cutIndex).split(\"\\n\").length - 1\n\n    // Kills the code shown\n    code = code.split(cutString).pop()!\n\n    // For any type of metadata shipped, it will need to be shifted to\n    // fit in with the new positions after the cut\n    staticQuickInfos.forEach(info => {\n      info.start -= cutIndex\n      info.line -= lineOffset\n    })\n    staticQuickInfos = staticQuickInfos.filter(s => s.start > -1)\n\n    errors.forEach(err => {\n      if (err.start) err.start -= cutIndex\n      if (err.line) err.line -= lineOffset\n    })\n    errors = errors.filter(e => e.start && e.start > -1)\n\n    highlights.forEach(highlight => {\n      highlight.start -= cutIndex\n      highlight.line -= lineOffset\n    })\n\n    highlights = highlights.filter(e => e.start > -1)\n\n    queries.forEach(q => (q.line -= lineOffset))\n    queries = queries.filter(q => q.line > -1)\n\n    tags.forEach(q => (q.line -= lineOffset))\n    tags = tags.filter(q => q.line > -1)\n  }\n\n  const cutAfterString = \"// ---cut-after---\\n\"\n\n  if (code.includes(cutAfterString)) {\n\n    // Get the place it is, then find the end and the start of the next line\n    const cutIndex = code.indexOf(cutAfterString) + cutAfterString.length\n    const lineOffset = code.substr(0, cutIndex).split(\"\\n\").length - 1\n\n    // Kills the code shown, removing any whitespace on the end\n    code = code.split(cutAfterString).shift()!.trimEnd()\n\n    // Cut any metadata after the cutAfterString\n    staticQuickInfos = staticQuickInfos.filter(s => s.line < lineOffset)\n    errors = errors.filter(e => e.line && e.line < lineOffset)\n    highlights = highlights.filter(e => e.line < lineOffset)\n    queries = queries.filter(q => q.line < lineOffset)\n    tags = tags.filter(q => q.line < lineOffset)\n  }\n\n  return {\n    code,\n    extension,\n    highlights,\n    queries,\n    staticQuickInfos,\n    errors,\n    playgroundURL,\n    tags,\n  }\n}\n\nconst splitTwoslashCodeInfoFiles = (code: string, defaultFileName: string, root: string) => {\n  const lines = code.split(/\\r\\n?|\\n/g)\n\n  let nameForFile = code.includes(`@filename: ${defaultFileName}`) ? \"global.ts\" : defaultFileName\n  let currentFileContent: string[] = []\n  const fileMap: Array<[string, string[]]> = []\n\n  for (const line of lines) {\n    if (line.includes(\"// @filename: \")) {\n      fileMap.push([root + nameForFile, currentFileContent])\n      nameForFile = line.split(\"// @filename: \")[1].trim()\n      currentFileContent = []\n    } else {\n      currentFileContent.push(line)\n    }\n  }\n  fileMap.push([root + nameForFile, currentFileContent])\n\n  // Basically, strip these:\n  // [\"index.ts\", []]\n  // [\"index.ts\", [\"\"]]\n  const nameContent = fileMap.filter(n => n[1].length > 0 && (n[1].length > 1 || n[1][0] !== \"\"))\n  return nameContent\n}\n","import { TwoslashError } from \"./\"\n\n/** To ensure that errors are matched up right */\nexport function validateCodeForErrors(\n  relevantErrors: import(\"typescript\").Diagnostic[],\n  handbookOptions: { errors: number[] },\n  extension: string,\n  originalCode: string,\n  vfsRoot: string\n) {\n  const inErrsButNotFoundInTheHeader = relevantErrors.filter(e => !handbookOptions.errors.includes(e.code))\n  const errorsFound = Array.from(new Set(inErrsButNotFoundInTheHeader.map(e => e.code))).join(\" \")\n\n  if (inErrsButNotFoundInTheHeader.length) {\n    const errorsToShow = new Set(relevantErrors.map(e => e.code))\n    const codeToAdd = `// @errors: ${Array.from(errorsToShow).join(\" \")}`\n\n    const missing = handbookOptions.errors.length\n      ? `\\nThe existing annotation specified ${handbookOptions.errors.join(\" \")}`\n      : \"\\nExpected: \" + codeToAdd\n\n    // These get filled by below\n    const filesToErrors: Record<string, import(\"typescript\").Diagnostic[]> = {}\n    const noFiles: import(\"typescript\").Diagnostic[] = []\n\n    inErrsButNotFoundInTheHeader.forEach(d => {\n      const fileRef = d.file?.fileName && d.file.fileName.replace(vfsRoot, \"\")\n      if (!fileRef) noFiles.push(d)\n      else {\n        const existing = filesToErrors[fileRef]\n        if (existing) existing.push(d)\n        else filesToErrors[fileRef] = [d]\n      }\n    })\n\n    const showDiagnostics = (title: string, diags: import(\"typescript\").Diagnostic[]) => {\n      return (\n        `${title}\\n  ` +\n        diags\n          .map(e => {\n            const msg = typeof e.messageText === \"string\" ? e.messageText : e.messageText.messageText\n            return `[${e.code}] ${e.start} - ${msg}`\n          })\n          .join(\"\\n  \")\n      )\n    }\n\n    const innerDiags: string[] = []\n    if (noFiles.length) {\n      innerDiags.push(showDiagnostics(\"Ambient Errors\", noFiles))\n    }\n    Object.keys(filesToErrors).forEach(filepath => {\n      innerDiags.push(showDiagnostics(filepath, filesToErrors[filepath]))\n    })\n\n    const allMessages = innerDiags.join(\"\\n\\n\")\n\n    const newErr = new TwoslashError(\n      `Errors were thrown in the sample, but not included in an errors tag`,\n      `These errors were not marked as being expected: ${errorsFound}. ${missing}`,\n      `Compiler Errors:\\n\\n${allMessages}`\n    )\n\n    newErr.code = `## Code\\n\\n'''${extension}\\n${originalCode}\\n'''`\n    throw newErr\n  }\n}\n\n/** Mainly to warn myself, I've lost a good few minutes to this before */\nexport function validateInput(code: string) {\n  if (code.includes(\"// @errors \")) {\n    throw new TwoslashError(\n      `You have '// @errors ' (with a space)`,\n      `You want '// @errors: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n\n  if (code.includes(\"// @filename \")) {\n    throw new TwoslashError(\n      `You have '// @filename ' (with a space)`,\n      `You want '// @filename: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n}\n","function i(i,o,t){var n,a;void 0===o&&(o=50),void 0===t&&(t={});var e=null!=(n=t.isImmediate)&&n,r=t.maxWait,u=Date.now();function v(){if(void 0!==r){var i=Date.now()-u;if(i+o>=r)return r-i}return o}var c=function(){var o=[].slice.call(arguments),t=this,n=function(){a=void 0,u=Date.now(),e||i.apply(t,o)},r=e&&void 0===a;void 0!==a&&clearTimeout(a),a=setTimeout(n,v()),r&&i.apply(t,o)};return c.cancel=function(){void 0!==a&&clearTimeout(a)},c}export{i as debounce};\n//# sourceMappingURL=index.esm.js.map\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 4602;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 8355;\nmodule.exports = webpackEmptyContext;"],"names":["getPlaygroundUrls","sandboxRoot","withPrefix","playgroundRoot","playgroundWorker","parsePrimitive","value","type","toLowerCase","length","TwoslashError","hasLocalStorage","localStorage","error","hasProcess","process","log","getItem","DEBUG","console","_message","_Error","title","description","recommendation","code","_this","message","call","_wrapNativeSuper","Error","filterHighlightLines","codeLines","highlights","queries","nextContentOffset","contentOffset","removedLines","_loop","_i","line","moveForward","stripLine","logDesc","splice","includes","highlightMatch","exec","queryMatch","removePrettierIgnoreMatch","completionsQuery","start","indexOf","push","kind","offset","text","undefined","docs","_start","lastIndexOf","trim","_start2","i","getOptionValueFromMap","name","key","optMap","result","get","keys","Array","from","join","setOption","opts","ts","_ret","_step","_loop2","opt","elementType","element","strings","split","map","v","_iterator","_createForOfIteratorHelperLoose","optionDeclarations","done","booleanConfigRegexp","valuedConfigRegexp","defaultHandbookOptions","errors","noErrors","showEmit","showEmittedFile","noStaticSemanticInfo","emit","noErrorValidation","twoslasher","extension","options","_options$tsModule","_options$lzstringModu","_options$defaultCompi","tsModule","require","lzstring","lzstringModule","originalCode","safeExtension","types","js","javascript","typescript","tsx","jsx","json","jsn","Object","typesToExtension","defaultFileName","defaultCompilerOptions","_extends","strict","target","ScriptTarget","ES2016","allowJs","validateInput","replace","cleanMarkdownEscaped","tags","customTags","match","annotation","filterCustomTags","handbookOptions","Number","filterHandbookOptions","defaultOptions","compilerOptions","filterCompilerOptions","JsxEmit","Preserve","getRoot","path","pa","vfsRoot","cwd","sep","posix","useFS","fsMap","vfs","Map","system","createSystem","createFSBackedSystem","tsLibDirectory","fsRoot","env","createVirtualTypeScriptEnvironment","customTransformers","ls","languageService","_step2","partialQueries","nameContent","splitTwoslashCodeInfoFiles","sourceFiles","filenames","nc","_loop3","file","filename","filetype","pop","allowJSON","resolveJsonModule","newFileCode","createFile","updates","concat","lspedQueries","q","sourceFile","getSourceFile","position","getPositionOfLineAndCharacter","quickInfo","getQuickInfoAtPosition","displayParts","dp","documentation","d","completions","getCompletionsAtPosition","word","str","pos","String","left","slice","search","right","startPos","getClosestWord","lastDot","entries","completionPrefix","newEditedFileCode","updateFile","_iterator2","allCodeLines","forEach","f","getEmitOutput","outputFiles","output","writeFile","errs","staticQuickInfos","getSemanticDiagnostics","getSyntacticDiagnostics","source","sys","readFile","_step3","fileContentStartIndexInModifiedFile","linesAbove","identifiers","textSpans","checkChildren","node","forEachChild","child","isIdentifier","getStart","span","createTextSpan","end","getText","getIdentifierTextSpans","_iterator3","identifier","targetString","burnerSourceFile","createSourceFile","ES2015","_ts$getLineAndCharact","getLineAndCharacterOfPosition","character","filter","completionsPrefix","relevantErrors","e","fileName","inErrsButNotFoundInTheHeader","errorsFound","Set","errorsToShow","codeToAdd","missing","filesToErrors","noFiles","_d$file","fileRef","existing","showDiagnostics","diags","msg","messageText","innerDiags","filepath","allMessages","newErr","validateCodeForErrors","_step4","_loop4","err","codeWhereErrorLives","lineOffset","findIndex","endsWith","renderedMessage","flattenDiagnosticMessageText","id","_ts$getLineAndCharact2","category","_iterator4","emitFilename","emitSourceFilename","emitSource","find","outFile","allFiles","o","_allFiles","playgroundURL","compressToEncodedURIComponent","cutString","cutIndex","substr","info","s","highlight","cutAfterString","_cutIndex","_lineOffset","shift","trimEnd","root","_step5","lines","nameForFile","currentFileContent","fileMap","_iterator5","n","debugLog","rootFiles","mergedCompilerOpts","_createVirtualLanguag","fileNames","_createVirtualCompile","createVirtualCompilerHost","compilerHost","_updateFile2","_deleteFile2","deleteFile","fileVersions","projectVersion","languageServiceHost","getProjectVersion","toString","getCompilationSettings","getCustomTransformers","getScriptFileNames","getScriptSnapshot","contents","ScriptSnapshot","fromString","getScriptVersion","lsHost","set","index","createVirtualLanguageServiceHost","_updateFile","_deleteFile","createLanguageService","diagnostics","getCompilerOptionsDiagnostics","formatDiagnostics","_languageService$getP","getProgram","content","optPrevTextSpan","prevSourceFile","prevFullContents","prevTextSpan","newText","newSourceFile","updateSourceFile","newLength","createDefaultMapFromCDN","version","cache","fetcher","storer","fetchlike","fetch","files","array","ES5","lib","targetToCut","matches","startsWith","targetCutIndex","indexesForCutting","libCutIndex","reduce","max","current","finalCutIndex","Math","knownLibFilesForCompilerOptions","prefix","storelike","removeItem","Promise","all","cacheKey","resolve","decompressFromUTF16","then","resp","t","setItem","compressToUTF16","notImplemented","methodName","audit","fn","_len","arguments","args","_key","res","apply","smallres","getDefaultCompilerOptions","React","esModuleInterop","module","ModuleKind","ESNext","suppressOutputPathCheck","skipLibCheck","skipDefaultLibCheck","moduleResolution","ModuleResolutionKind","NodeJs","libize","createDirectory","directoryExists","directory","some","exit","fileExists","has","getCurrentDirectory","getDirectories","getExecutingFilePath","readDirectory","_files$get","resolvePath","newLine","useCaseSensitiveFileNames","write","_projectRoot","requirePath","nodeSys","tsLib","dirname","tsLibName","libs","realpath","getCanonicalFileName","getDefaultLibFileName","getNewLine","languageVersionOrOptions","_ref","alreadyExists","fromCharCode","a","isImmediate","r","maxWait","u","Date","now","c","this","clearTimeout","setTimeout","cancel","webpackEmptyContext","req","exports"],"sourceRoot":""}